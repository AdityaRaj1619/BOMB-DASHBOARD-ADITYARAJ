{"ast":null,"code":"const EventEmitter = require('events');\nconst dev = process.env.NODE_ENV === 'development';\nclass ConnectionManager extends EventEmitter {\n  constructor(connections, targets, options) {\n    super();\n    this.targets = targets;\n    this.connections = connections;\n    this.connected = false;\n    this.status = 'loading';\n    this.interval = options.interval || 5000;\n    this.name = options.name || 'default';\n    this.inSetup = true;\n    this.connect();\n  }\n  connect() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`);\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider');\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied');\n    } else {\n      const {\n        protocol,\n        location\n      } = this.targets[index];\n      this.connection = this.connections[protocol](location);\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err);\n        if (this.listenerCount('error')) return this.emit('error', err);\n        console.warn('eth-provider - Uncaught connection error: ' + err.message);\n      });\n      this.connection.on('close', summary => {\n        this.connected = false;\n        this.emit('close');\n        if (!this.closing) this.refresh();\n      });\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index];\n        this.connection.index = index;\n        this.targets[index].status = this.connection.status;\n        this.connected = true;\n        this.inSetup = false;\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location);\n        this.emit('connect');\n      });\n      this.connection.on('data', data => this.emit('data', data));\n      this.connection.on('payload', payload => this.emit('payload', payload));\n    }\n  }\n  refresh() {\n    let interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.interval;\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`);\n    clearTimeout(this.connectTimer);\n    this.connectTimer = setTimeout(() => this.connect(), interval);\n  }\n  connectionError(index, err) {\n    this.targets[index].status = err;\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false;\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets);\n      this.refresh();\n    } else {\n      // Not last target, move on the next connection option\n      this.connect(++index);\n    }\n  }\n  close() {\n    this.closing = true;\n    if (this.connection) {\n      this.connection.close(); // Let event bubble from here\n    } else {\n      this.emit('close');\n    }\n    clearTimeout(this.connectTimer);\n  }\n  error(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n  send(payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100);\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected');\n    } else {\n      this.connection.send(payload);\n    }\n  }\n}\nmodule.exports = ConnectionManager;","map":{"version":3,"names":["EventEmitter","require","dev","process","env","NODE_ENV","ConnectionManager","constructor","connections","targets","options","connected","status","interval","name","inSetup","connect","index","arguments","length","undefined","console","log","connection","protocol","location","on","err","connectionError","listenerCount","emit","warn","message","summary","closing","refresh","target","data","payload","toFixed","clearTimeout","connectTimer","setTimeout","close","error","code","id","jsonrpc","send","closed","module","exports"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/eth-provider/ConnectionManager/index.js"],"sourcesContent":["const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}