{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar assert_1 = require(\"@0x/assert\");\nvar utils_1 = require(\"@0x/utils\");\nvar EthereumTx = require(\"ethereumjs-tx\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar types_1 = require(\"../types\");\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with the supplied Ethereum private key.\n */\nvar PrivateKeyWalletSubprovider = /** @class */function (_super) {\n  __extends(PrivateKeyWalletSubprovider, _super);\n  /**\n   * Instantiates a PrivateKeyWalletSubprovider.\n   * @param privateKey The corresponding private key to an Ethereum address\n   * @return PrivateKeyWalletSubprovider instance\n   */\n  function PrivateKeyWalletSubprovider(privateKey) {\n    var _this = this;\n    assert_1.assert.isString('privateKey', privateKey);\n    _this = _super.call(this) || this;\n    _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');\n    _this._address = \"0x\" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');\n    return _this;\n  }\n  /**\n   * Retrieve the account associated with the supplied private key.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   * @return An array of accounts\n   */\n  PrivateKeyWalletSubprovider.prototype.getAccountsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, [this._address]];\n      });\n    });\n  };\n  /**\n   * Sign a transaction with the private key. If you've added this Subprovider to your\n   * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and\n   * this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n  PrivateKeyWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tx, rawTx;\n      return __generator(this, function (_a) {\n        PrivateKeyWalletSubprovider._validateTxParams(txParams);\n        if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) {\n          throw new Error(\"Requested to sign transaction with address: \" + txParams.from + \", instantiated with address: \" + this._address);\n        }\n        tx = new EthereumTx(txParams);\n        tx.sign(this._privateKeyBuffer);\n        rawTx = \"0x\" + tx.serialize().toString('hex');\n        return [2 /*return*/, rawTx];\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n  PrivateKeyWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, msgHashBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (data === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n        }\n        assert_1.assert.isHexString('data', data);\n        assert_1.assert.isETHAddressHex('address', address);\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n        dataBuff = ethUtil.toBuffer(data);\n        msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n        sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2 /*return*/, rpcSig];\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n   * JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n  PrivateKeyWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (typedData === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);\n        }\n        assert_1.assert.isETHAddressHex('address', address);\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n        dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);\n        sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2 /*return*/, rpcSig];\n      });\n    });\n  };\n  return PrivateKeyWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\nexports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;","map":{"version":3,"sources":["../../../src/subproviders/private_key_wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"@0x/assert\");\nvar utils_1 = require(\"@0x/utils\");\nvar EthereumTx = require(\"ethereumjs-tx\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar types_1 = require(\"../types\");\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with the supplied Ethereum private key.\n */\nvar PrivateKeyWalletSubprovider = /** @class */ (function (_super) {\n    __extends(PrivateKeyWalletSubprovider, _super);\n    /**\n     * Instantiates a PrivateKeyWalletSubprovider.\n     * @param privateKey The corresponding private key to an Ethereum address\n     * @return PrivateKeyWalletSubprovider instance\n     */\n    function PrivateKeyWalletSubprovider(privateKey) {\n        var _this = this;\n        assert_1.assert.isString('privateKey', privateKey);\n        _this = _super.call(this) || this;\n        _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');\n        _this._address = \"0x\" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');\n        return _this;\n    }\n    /**\n     * Retrieve the account associated with the supplied private key.\n     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n     * via your providerEngine instance.\n     * @return An array of accounts\n     */\n    PrivateKeyWalletSubprovider.prototype.getAccountsAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, [this._address]];\n            });\n        });\n    };\n    /**\n     * Sign a transaction with the private key. If you've added this Subprovider to your\n     * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and\n     * this method will be called auto-magically. If you are not using this via a ProviderEngine\n     * instance, you can call it directly.\n     * @param txParams Parameters of the transaction to sign\n     * @return Signed transaction hex string\n     */\n    PrivateKeyWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, rawTx;\n            return __generator(this, function (_a) {\n                PrivateKeyWalletSubprovider._validateTxParams(txParams);\n                if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) {\n                    throw new Error(\"Requested to sign transaction with address: \" + txParams.from + \", instantiated with address: \" + this._address);\n                }\n                tx = new EthereumTx(txParams);\n                tx.sign(this._privateKeyBuffer);\n                rawTx = \"0x\" + tx.serialize().toString('hex');\n                return [2 /*return*/, rawTx];\n            });\n        });\n    };\n    /**\n     * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.\n     * The address must be provided it must match the address calculated from the private key.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param data Hex string message to sign\n     * @param address Address of the account to sign with\n     * @return Signature hex string (order: rsv)\n     */\n    PrivateKeyWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dataBuff, msgHashBuff, sig, rpcSig;\n            return __generator(this, function (_a) {\n                if (data === undefined) {\n                    throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n                }\n                assert_1.assert.isHexString('data', data);\n                assert_1.assert.isETHAddressHex('address', address);\n                if (address !== this._address) {\n                    throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n                }\n                dataBuff = ethUtil.toBuffer(data);\n                msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n                sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);\n                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n                return [2 /*return*/, rpcSig];\n            });\n        });\n    };\n    /**\n     * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.\n     * The address must be provided it must match the address calculated from the private key.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n     * JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param address Address of the account to sign with\n     * @param data the typed data object\n     * @return Signature hex string (order: rsv)\n     */\n    PrivateKeyWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dataBuff, sig, rpcSig;\n            return __generator(this, function (_a) {\n                if (typedData === undefined) {\n                    throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);\n                }\n                assert_1.assert.isETHAddressHex('address', address);\n                if (address !== this._address) {\n                    throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n                }\n                dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);\n                sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);\n                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n                return [2 /*return*/, rpcSig];\n            });\n        });\n    };\n    return PrivateKeyWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider));\nexports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;\n//# sourceMappingURL=private_key_wallet.js.map"]},"metadata":{},"sourceType":"script"}