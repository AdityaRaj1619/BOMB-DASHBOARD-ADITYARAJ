{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _classCallCheck from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\nfunction noop() {\n  return undefined;\n}\nvar SYN = \"SYN\";\nvar ACK = \"ACK\";\nvar BRK = \"BRK\";\nvar BasePostMessageStream = /*#__PURE__*/function (_Duplex) {\n  _inherits(BasePostMessageStream, _Duplex);\n  var _super = _createSuper(BasePostMessageStream);\n  function BasePostMessageStream(_ref) {\n    var _this;\n    _classCallCheck(this, BasePostMessageStream);\n    var name = _ref.name,\n      target = _ref.target,\n      _ref$targetWindow = _ref.targetWindow,\n      targetWindow = _ref$targetWindow === void 0 ? window : _ref$targetWindow,\n      _ref$targetOrigin = _ref.targetOrigin,\n      targetOrigin = _ref$targetOrigin === void 0 ? \"*\" : _ref$targetOrigin;\n    _this = _super.call(this, {\n      objectMode: true\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_init\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_haveSyn\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_name\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_target\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_targetWindow\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_targetOrigin\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_onMessage\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    _this._init = false;\n    _this._haveSyn = false;\n    _this._name = name;\n    _this._target = target; // target origin\n    _this._targetWindow = targetWindow;\n    _this._targetOrigin = targetOrigin;\n    _this._onMessage = _this.onMessage.bind(_assertThisInitialized(_this));\n    _this._synIntervalId = null;\n    window.addEventListener(\"message\", _this._onMessage, false);\n    _this._handShake();\n    return _this;\n  }\n  _createClass(BasePostMessageStream, [{\n    key: \"_break\",\n    value: function _break() {\n      this.cork();\n      this._write(BRK, null, noop);\n      this._haveSyn = false;\n      this._init = false;\n    }\n  }, {\n    key: \"_handShake\",\n    value: function _handShake() {\n      this._write(SYN, null, noop);\n      this.cork();\n    }\n  }, {\n    key: \"_onData\",\n    value: function _onData(data) {\n      if (!this._init) {\n        // listen for handshake\n        if (data === SYN) {\n          this._haveSyn = true;\n          this._write(ACK, null, noop);\n        } else if (data === ACK) {\n          this._init = true;\n          if (!this._haveSyn) {\n            this._write(ACK, null, noop);\n          }\n          this.uncork();\n        }\n      } else if (data === BRK) {\n        this._break();\n      } else {\n        // forward message\n        try {\n          this.push(data);\n        } catch (err) {\n          this.emit(\"error\", err);\n        }\n      }\n    }\n  }, {\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      var message = event.data;\n      // validate message\n      if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n        return;\n      }\n      this._onData(message.data);\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(data, _, cb) {\n      this._postMessage(data);\n      cb();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      window.removeEventListener(\"message\", this._onMessage, false);\n    }\n  }]);\n  return BasePostMessageStream;\n}(Duplex);\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(function () {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  var n = arr.length;\n  var copy = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nvar SafeEventEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SafeEventEmitter, _EventEmitter);\n  var _super2 = _createSuper(SafeEventEmitter);\n  function SafeEventEmitter() {\n    _classCallCheck(this, SafeEventEmitter);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(SafeEventEmitter, [{\n    key: \"emit\",\n    value: function emit(type) {\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== undefined) {\n        doError = doError && events.error === undefined;\n      } else if (!doError) {\n        return false;\n      }\n      // If there is no 'error' event listener then throw.\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      if (doError) {\n        var er;\n        if (args.length > 0) {\n          er = args[0];\n        }\n        if (er instanceof Error) {\n          // Note: The comments on the `throw` lines are intentional, they show\n          // up in Node's output if this results in an unhandled exception.\n          throw er; // Unhandled 'error' event\n        }\n        // At least give some kind of context to the user\n        var err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n        err.context = er;\n        throw err; // Unhandled 'error' event\n      }\n\n      var handler = events[type];\n      if (handler === undefined) {\n        return false;\n      }\n      if (typeof handler === \"function\") {\n        safeApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler);\n        for (var i = 0; i < len; i += 1) {\n          safeApply(listeners[i], this, args);\n        }\n      }\n      return true;\n    }\n  }]);\n  return SafeEventEmitter;\n}(EventEmitter);\nvar SerializableError = /*#__PURE__*/function (_Error) {\n  _inherits(SerializableError, _Error);\n  var _super3 = _createSuper(SerializableError);\n  function SerializableError(_ref) {\n    var _this2;\n    _classCallCheck(this, SerializableError);\n    var code = _ref.code,\n      message = _ref.message,\n      data = _ref.data;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    _this2 = _super3.call(this, message);\n    _defineProperty(_assertThisInitialized(_this2), \"code\", void 0);\n    _defineProperty(_assertThisInitialized(_this2), \"data\", void 0);\n    _this2.code = code;\n    if (data !== undefined) {\n      _this2.data = data;\n    }\n    return _this2;\n  }\n  _createClass(SerializableError, [{\n    key: \"toString\",\n    value: function toString() {\n      return stringify({\n        code: this.code,\n        message: this.message,\n        data: this.data,\n        stack: this.stack\n      });\n    }\n  }]);\n  return SerializableError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar getRpcPromiseCallback = function getRpcPromiseCallback(resolve, reject) {\n  var unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (error, response) {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return function (req, res, next, end) {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(function (done) {\n        var error = res.error;\n        if (!error) {\n          return done();\n        }\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  var idMap = {};\n  function readNoop() {\n    return false;\n  }\n  var events = new SafeEventEmitter();\n  function processResponse(res) {\n    var context = idMap[res.id];\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    var err;\n    try {\n      var isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  var stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  var middleware = function middleware(req, res, next, end) {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req: req,\n      res: res,\n      next: next,\n      end: end\n    };\n  };\n  return {\n    events: events,\n    middleware: middleware,\n    stream: stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return function (req, res, next, end) {\n    var handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return function (req, res, next, _end) {\n    var originalId = req.id;\n    var newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(function (done) {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return function (req, res, next, _) {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next, end) {\n      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // nextPromise is the key to the implementation\n            // it is resolved by the return handler passed to the\n            // \"next\" function\n            nextPromise = new Promise(function (resolve) {\n              resolveNextPromise = resolve;\n            });\n            returnHandlerCallback = null;\n            nextWasCalled = false; // This will be called by the consumer's async middleware.\n            asyncNext = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      nextWasCalled = true;\n                      // We pass a return handler to next(). When it is called by the engine,\n                      // the consumer's async middleware will resume executing.\n                      next(function (runReturnHandlersCallback) {\n                        // This callback comes from JRPCEngine._runReturnHandlers\n                        returnHandlerCallback = runReturnHandlersCallback;\n                        resolveNextPromise();\n                      });\n                      _context.next = 4;\n                      return nextPromise;\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function asyncNext() {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n            _context2.prev = 4;\n            _context2.next = 7;\n            return asyncMiddleware(req, res, asyncNext);\n          case 7:\n            if (!nextWasCalled) {\n              _context2.next = 13;\n              break;\n            }\n            _context2.next = 10;\n            return nextPromise;\n          case 10:\n            // we must wait until the return handler is called\n            returnHandlerCallback(null);\n            _context2.next = 14;\n            break;\n          case 13:\n            end(null);\n          case 14:\n            _context2.next = 19;\n            break;\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](4);\n            if (returnHandlerCallback) {\n              returnHandlerCallback(_context2.t0);\n            } else {\n              end(_context2.t0);\n            }\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n    return function (_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nvar JRPCEngine = /*#__PURE__*/function (_SafeEventEmitter) {\n  _inherits(JRPCEngine, _SafeEventEmitter);\n  var _super4 = _createSuper(JRPCEngine);\n  function JRPCEngine() {\n    var _this3;\n    _classCallCheck(this, JRPCEngine);\n    _this3 = _super4.call(this);\n    _defineProperty(_assertThisInitialized(_this3), \"_middleware\", void 0);\n    _this3._middleware = [];\n    return _this3;\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  _createClass(JRPCEngine, [{\n    key: \"push\",\n    value:\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== \"function\") {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n        return this._handleBatch(req);\n      }\n      if (cb) {\n        return this._handle(req, cb);\n      }\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this4 = this;\n      return /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next, end) {\n          var _yield$JRPCEngine$_ru, _yield$JRPCEngine$_ru2, middlewareError, isComplete, returnHandlers;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return JRPCEngine._runAllMiddleware(req, res, _this4._middleware);\n              case 3:\n                _yield$JRPCEngine$_ru = _context4.sent;\n                _yield$JRPCEngine$_ru2 = _slicedToArray(_yield$JRPCEngine$_ru, 3);\n                middlewareError = _yield$JRPCEngine$_ru2[0];\n                isComplete = _yield$JRPCEngine$_ru2[1];\n                returnHandlers = _yield$JRPCEngine$_ru2[2];\n                if (!isComplete) {\n                  _context4.next = 12;\n                  break;\n                }\n                _context4.next = 11;\n                return JRPCEngine._runReturnHandlers(returnHandlers);\n              case 11:\n                return _context4.abrupt(\"return\", end(middlewareError));\n              case 12:\n                return _context4.abrupt(\"return\", next( /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(handlerCallback) {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.prev = 0;\n                          _context3.next = 3;\n                          return JRPCEngine._runReturnHandlers(returnHandlers);\n                        case 3:\n                          _context3.next = 8;\n                          break;\n                        case 5:\n                          _context3.prev = 5;\n                          _context3.t0 = _context3[\"catch\"](0);\n                          return _context3.abrupt(\"return\", handlerCallback(_context3.t0));\n                        case 8:\n                          return _context3.abrupt(\"return\", handlerCallback());\n                        case 9:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }, _callee3, null, [[0, 5]]);\n                  }));\n                  return function (_x9) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n              case 15:\n                _context4.prev = 15;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", end(_context4.t0));\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4, null, [[0, 15]]);\n        }));\n        return function (_x5, _x6, _x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return Promise.all(\n              // 1. Begin executing each request in the order received\n              reqs.map(this._promiseHandle.bind(this)));\n            case 3:\n              responses = _context5.sent;\n              if (!cb) {\n                _context5.next = 6;\n                break;\n              }\n              return _context5.abrupt(\"return\", cb(null, responses));\n            case 6:\n              return _context5.abrupt(\"return\", responses);\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5[\"catch\"](0);\n              if (!cb) {\n                _context5.next = 13;\n                break;\n              }\n              return _context5.abrupt(\"return\", cb(_context5.t0));\n            case 13:\n              throw _context5.t0;\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[0, 9]]);\n      }));\n      function _handleBatch(_x10, _x11) {\n        return _handleBatch2.apply(this, arguments);\n      }\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this5 = this;\n      return new Promise(function (resolve) {\n        _this5._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\")) {\n                _context6.next = 3;\n                break;\n              }\n              _error2 = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n              });\n              return _context6.abrupt(\"return\", cb(_error2, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error: _error2\n              }));\n            case 3:\n              if (!(typeof callerReq.method !== \"string\")) {\n                _context6.next = 6;\n                break;\n              }\n              _error3 = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n              });\n              return _context6.abrupt(\"return\", cb(_error3, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error: _error3\n              }));\n            case 6:\n              req = _objectSpread$1({}, callerReq);\n              res = {\n                id: req.id,\n                jsonrpc: req.jsonrpc\n              };\n              error = null;\n              _context6.prev = 9;\n              _context6.next = 12;\n              return this._processRequest(req, res);\n            case 12:\n              _context6.next = 17;\n              break;\n            case 14:\n              _context6.prev = 14;\n              _context6.t0 = _context6[\"catch\"](9);\n              // A request handler error, a re-thrown middleware error, or something\n              // unexpected.\n              error = _context6.t0;\n            case 17:\n              if (error) {\n                // Ensure no result is present on an errored response\n                delete res.result;\n                if (!res.error) {\n                  res.error = serializeError(error);\n                }\n              }\n              return _context6.abrupt(\"return\", cb(error, res));\n            case 19:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[9, 14]]);\n      }));\n      function _handle(_x12, _x13) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {\n        var _yield$JRPCEngine$_ru3, _yield$JRPCEngine$_ru4, error, isComplete, returnHandlers;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return JRPCEngine._runAllMiddleware(req, res, this._middleware);\n            case 2:\n              _yield$JRPCEngine$_ru3 = _context7.sent;\n              _yield$JRPCEngine$_ru4 = _slicedToArray(_yield$JRPCEngine$_ru3, 3);\n              error = _yield$JRPCEngine$_ru4[0];\n              isComplete = _yield$JRPCEngine$_ru4[1];\n              returnHandlers = _yield$JRPCEngine$_ru4[2];\n              // Throw if \"end\" was not called, or if the response has neither a result\n              // nor an error.\n              JRPCEngine._checkForCompletion(req, res, isComplete);\n              // The return handlers should run even if an error was encountered during\n              // middleware processing.\n              _context7.next = 10;\n              return JRPCEngine._runReturnHandlers(returnHandlers);\n            case 10:\n              if (!error) {\n                _context7.next = 12;\n                break;\n              }\n              throw error;\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function _processRequest(_x14, _x15) {\n        return _processRequest2.apply(this, arguments);\n      }\n      return _processRequest;\n    }()\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JRPCEngine$_ru5, _yield$JRPCEngine$_ru6;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              returnHandlers = [];\n              error = null;\n              isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n              _iterator = _createForOfIteratorHelper(middlewareStack);\n              _context8.prev = 4;\n              _iterator.s();\n            case 6:\n              if ((_step = _iterator.n()).done) {\n                _context8.next = 18;\n                break;\n              }\n              middleware = _step.value;\n              _context8.next = 10;\n              return JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            case 10:\n              _yield$JRPCEngine$_ru5 = _context8.sent;\n              _yield$JRPCEngine$_ru6 = _slicedToArray(_yield$JRPCEngine$_ru5, 2);\n              error = _yield$JRPCEngine$_ru6[0];\n              isComplete = _yield$JRPCEngine$_ru6[1];\n              if (!isComplete) {\n                _context8.next = 16;\n                break;\n              }\n              return _context8.abrupt(\"break\", 18);\n            case 16:\n              _context8.next = 6;\n              break;\n            case 18:\n              _context8.next = 23;\n              break;\n            case 20:\n              _context8.prev = 20;\n              _context8.t0 = _context8[\"catch\"](4);\n              _iterator.e(_context8.t0);\n            case 23:\n              _context8.prev = 23;\n              _iterator.f();\n              return _context8.finish(23);\n            case 26:\n              return _context8.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n            case 27:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[4, 20, 23, 26]]);\n      }));\n      function _runAllMiddleware(_x16, _x17, _x18) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n          if (error) {\n            res.error = serializeError(error);\n          }\n          // True indicates that the request should end\n          resolve([error, true]);\n        };\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== \"function\") {\n                end(new SerializableError({\n                  code: -32603,\n                  message: \"JRPCEngine: 'next' return handlers must be functions\"\n                }));\n              }\n              returnHandlers.push(returnHandler);\n            }\n            // False indicates that the request should not end\n            resolve([null, false]);\n          }\n        };\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(handlers) {\n        var _iterator2, _step2, _loop;\n        return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(handlers);\n              _context10.prev = 1;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var handler;\n                return _regeneratorRuntime().wrap(function _loop$(_context9) {\n                  while (1) switch (_context9.prev = _context9.next) {\n                    case 0:\n                      handler = _step2.value;\n                      _context9.next = 3;\n                      return new Promise(function (resolve, reject) {\n                        handler(function (err) {\n                          return err ? reject(err) : resolve();\n                        });\n                      });\n                    case 3:\n                    case \"end\":\n                      return _context9.stop();\n                  }\n                }, _loop);\n              });\n              _iterator2.s();\n            case 4:\n              if ((_step2 = _iterator2.n()).done) {\n                _context10.next = 8;\n                break;\n              }\n              return _context10.delegateYield(_loop(), \"t0\", 6);\n            case 6:\n              _context10.next = 4;\n              break;\n            case 8:\n              _context10.next = 13;\n              break;\n            case 10:\n              _context10.prev = 10;\n              _context10.t1 = _context10[\"catch\"](1);\n              _iterator2.e(_context10.t1);\n            case 13:\n              _context10.prev = 13;\n              _iterator2.f();\n              return _context10.finish(13);\n            case 16:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee9, null, [[1, 10, 13, 16]]);\n      }));\n      function _runReturnHandlers(_x19) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!(\"result\" in res) && !(\"error\" in res)) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Response has no error or result for request\"\n        });\n      }\n      if (!isComplete) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Nothing ended request\"\n        });\n      }\n    }\n  }]);\n  return JRPCEngine;\n}(SafeEventEmitter);\nfunction mergeMiddleware(middlewareStack) {\n  var engine = new JRPCEngine();\n  middlewareStack.forEach(function (middleware) {\n    return engine.push(middleware);\n  });\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  var engine = opts.engine;\n  // eslint-disable-next-line prefer-const\n  var stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, function (_err, res) {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read: read,\n    write: write\n  });\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", function (message) {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nvar Substream = /*#__PURE__*/function (_Duplex2) {\n  _inherits(Substream, _Duplex2);\n  var _super5 = _createSuper(Substream);\n  function Substream(_ref) {\n    var _this6;\n    _classCallCheck(this, Substream);\n    var parent = _ref.parent,\n      name = _ref.name;\n    _this6 = _super5.call(this, {\n      objectMode: true\n    });\n    _defineProperty(_assertThisInitialized(_this6), \"_parent\", void 0);\n    _defineProperty(_assertThisInitialized(_this6), \"_name\", void 0);\n    _this6._parent = parent;\n    _this6._name = name;\n    return _this6;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _createClass(Substream, [{\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      this._parent.push({\n        name: this._name,\n        data: chunk\n      });\n      callback();\n    }\n  }]);\n  return Substream;\n}(Duplex);\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nvar ObjectMultiplex = /*#__PURE__*/function (_Duplex3) {\n  _inherits(ObjectMultiplex, _Duplex3);\n  var _super6 = _createSuper(ObjectMultiplex);\n  function ObjectMultiplex() {\n    var _this7;\n    _classCallCheck(this, ObjectMultiplex);\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this7 = _super6.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(_assertThisInitialized(_this7), \"_substreams\", void 0);\n    _defineProperty(_assertThisInitialized(_this7), \"getStream\", void 0);\n    _this7._substreams = {};\n    return _this7;\n  }\n  _createClass(ObjectMultiplex, [{\n    key: \"createStream\",\n    value: function createStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      }\n      // create substream\n      var substream = new Substream({\n        parent: this,\n        name: name\n      });\n      this._substreams[name] = substream;\n      // listen for parent stream to end\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      anyStreamEnd(this, function (_error) {\n        return substream.destroy(_error || undefined);\n      });\n      return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n  }, {\n    key: \"ignoreStream\",\n    value: function ignoreStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      }\n      // set\n      this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      var name = chunk.name,\n        data = chunk.data;\n      if (!name) {\n        window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n        return callback();\n      }\n      // get corresponding substream\n      var substream = this._substreams[name];\n      if (!substream) {\n        window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n        return callback();\n      }\n      // push data into substream\n      if (substream !== IGNORE_SUBSTREAM) {\n        substream.push(data);\n      }\n      return callback();\n    }\n  }]);\n  return ObjectMultiplex;\n}(Duplex); // util\nfunction anyStreamEnd(stream, _cb) {\n  var cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  var mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, function (err) {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\nvar PostMessageStream = /*#__PURE__*/function (_BasePostMessageStrea) {\n  _inherits(PostMessageStream, _BasePostMessageStrea);\n  var _super7 = _createSuper(PostMessageStream);\n  function PostMessageStream() {\n    _classCallCheck(this, PostMessageStream);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(PostMessageStream, [{\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n      if (typeof data === \"object\") {\n        var dataObj = data;\n        if (typeof dataObj.data === \"object\") {\n          var dataObjData = dataObj.data;\n          if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n            var dataObjDataParam = dataObjData.params[0];\n            if (dataObjDataParam._origin) {\n              originConstraint = dataObjDataParam._origin;\n            }\n            // add a constraint for the response\n            dataObjDataParam._origin = window.location.origin;\n          }\n        }\n      }\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }]);\n  return PostMessageStream;\n}(BasePostMessageStream);\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["noop","undefined","SYN","ACK","BRK","Duplex","constructor","name","target","targetWindow","window","targetOrigin","objectMode","_defineProperty","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","EventEmitter","type","doError","events","_events","error","er","len","listeners","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","SerializableError","done","createStreamMiddleware","idMap","readNoop","SafeEventEmitter","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","randomId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","nextPromise","Promise","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_checkForCompletion","mergeMiddleware","engine","forEach","createEngineStream","opts","on","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","Substream","anyStreamEnd","_error","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","BasePostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data;\n    // validate message\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n    // If there is no 'error' event listener then throw.\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false;\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread$1({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  });\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // create substream\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream;\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  }\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          }\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}