{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* tslint:disable max-classes-per-file */\nvar _ = require(\"lodash\");\nvar queue_1 = require(\"../utils/queue\");\nvar blob_1 = require(\"./blocks/blob\");\nvar pointer_1 = require(\"./blocks/pointer\");\nvar set_1 = require(\"./blocks/set\");\n/**\n * Iterator class for Calldata Blocks. Blocks follows the order\n * they should be put into calldata that is passed to he EVM.\n *\n * Example #1:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                  } B,\n *                  Blob{} C\n *            }\n * It will iterate as follows: [A, B, C, B.a]\n *\n * Example #2:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                      Pointer {\n *                          Blob{} b\n *                      }\n *                  } B,\n *                  Pointer {\n *                      Blob{} c\n *                  } C\n *            }\n * It will iterate as follows: [A, B, C, B.a, B.b, C.c]\n */\nvar BaseIterator = /** @class */function () {\n  function BaseIterator(root) {\n    this._root = root;\n    this._queue = BaseIterator._createQueue(root);\n  }\n  BaseIterator._createQueue = function (block) {\n    var queue = new queue_1.Queue();\n    // Base case\n    if (!(block instanceof set_1.SetCalldataBlock)) {\n      queue.pushBack(block);\n      return queue;\n    }\n    // This is a set; add members\n    var set = block;\n    _.eachRight(set.getMembers(), function (member) {\n      queue.mergeFront(BaseIterator._createQueue(member));\n    });\n    // Add children\n    _.each(set.getMembers(), function (member) {\n      // Traverse child if it is a unique pointer.\n      // A pointer that is an alias for another pointer is ignored.\n      if (member instanceof pointer_1.PointerCalldataBlock && member.getAlias() === undefined) {\n        var dependency = member.getDependency();\n        queue.mergeBack(BaseIterator._createQueue(dependency));\n      }\n    });\n    // Put set block at the front of the queue\n    queue.pushFront(set);\n    return queue;\n  };\n  BaseIterator.prototype[Symbol.iterator] = function () {\n    var _this = this;\n    return {\n      next: function next() {\n        var nextBlock = _this.nextBlock();\n        if (nextBlock !== undefined) {\n          return {\n            value: nextBlock,\n            done: false\n          };\n        }\n        return {\n          done: true,\n          value: new blob_1.BlobCalldataBlock('', '', '', new Buffer(''))\n        };\n      }\n    };\n  };\n  return BaseIterator;\n}();\nvar CalldataIterator = /** @class */function (_super) {\n  __extends(CalldataIterator, _super);\n  function CalldataIterator(root) {\n    return _super.call(this, root) || this;\n  }\n  CalldataIterator.prototype.nextBlock = function () {\n    return this._queue.popFront();\n  };\n  return CalldataIterator;\n}(BaseIterator);\nexports.CalldataIterator = CalldataIterator;\nvar ReverseCalldataIterator = /** @class */function (_super) {\n  __extends(ReverseCalldataIterator, _super);\n  function ReverseCalldataIterator(root) {\n    return _super.call(this, root) || this;\n  }\n  ReverseCalldataIterator.prototype.nextBlock = function () {\n    return this._queue.popBack();\n  };\n  return ReverseCalldataIterator;\n}(BaseIterator);\nexports.ReverseCalldataIterator = ReverseCalldataIterator;","map":{"version":3,"sources":["../../../../src/abi_encoder/calldata/iterator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable max-classes-per-file */\nvar _ = require(\"lodash\");\nvar queue_1 = require(\"../utils/queue\");\nvar blob_1 = require(\"./blocks/blob\");\nvar pointer_1 = require(\"./blocks/pointer\");\nvar set_1 = require(\"./blocks/set\");\n/**\n * Iterator class for Calldata Blocks. Blocks follows the order\n * they should be put into calldata that is passed to he EVM.\n *\n * Example #1:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                  } B,\n *                  Blob{} C\n *            }\n * It will iterate as follows: [A, B, C, B.a]\n *\n * Example #2:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                      Pointer {\n *                          Blob{} b\n *                      }\n *                  } B,\n *                  Pointer {\n *                      Blob{} c\n *                  } C\n *            }\n * It will iterate as follows: [A, B, C, B.a, B.b, C.c]\n */\nvar BaseIterator = /** @class */ (function () {\n    function BaseIterator(root) {\n        this._root = root;\n        this._queue = BaseIterator._createQueue(root);\n    }\n    BaseIterator._createQueue = function (block) {\n        var queue = new queue_1.Queue();\n        // Base case\n        if (!(block instanceof set_1.SetCalldataBlock)) {\n            queue.pushBack(block);\n            return queue;\n        }\n        // This is a set; add members\n        var set = block;\n        _.eachRight(set.getMembers(), function (member) {\n            queue.mergeFront(BaseIterator._createQueue(member));\n        });\n        // Add children\n        _.each(set.getMembers(), function (member) {\n            // Traverse child if it is a unique pointer.\n            // A pointer that is an alias for another pointer is ignored.\n            if (member instanceof pointer_1.PointerCalldataBlock && member.getAlias() === undefined) {\n                var dependency = member.getDependency();\n                queue.mergeBack(BaseIterator._createQueue(dependency));\n            }\n        });\n        // Put set block at the front of the queue\n        queue.pushFront(set);\n        return queue;\n    };\n    BaseIterator.prototype[Symbol.iterator] = function () {\n        var _this = this;\n        return {\n            next: function () {\n                var nextBlock = _this.nextBlock();\n                if (nextBlock !== undefined) {\n                    return {\n                        value: nextBlock,\n                        done: false,\n                    };\n                }\n                return {\n                    done: true,\n                    value: new blob_1.BlobCalldataBlock('', '', '', new Buffer('')),\n                };\n            },\n        };\n    };\n    return BaseIterator;\n}());\nvar CalldataIterator = /** @class */ (function (_super) {\n    __extends(CalldataIterator, _super);\n    function CalldataIterator(root) {\n        return _super.call(this, root) || this;\n    }\n    CalldataIterator.prototype.nextBlock = function () {\n        return this._queue.popFront();\n    };\n    return CalldataIterator;\n}(BaseIterator));\nexports.CalldataIterator = CalldataIterator;\nvar ReverseCalldataIterator = /** @class */ (function (_super) {\n    __extends(ReverseCalldataIterator, _super);\n    function ReverseCalldataIterator(root) {\n        return _super.call(this, root) || this;\n    }\n    ReverseCalldataIterator.prototype.nextBlock = function () {\n        return this._queue.popBack();\n    };\n    return ReverseCalldataIterator;\n}(BaseIterator));\nexports.ReverseCalldataIterator = ReverseCalldataIterator;\n//# sourceMappingURL=iterator.js.map"]},"metadata":{},"sourceType":"script"}