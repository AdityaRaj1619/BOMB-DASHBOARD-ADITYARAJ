{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar TorusConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(TorusConnector, _AbstractConnector);\n  function TorusConnector(_ref) {\n    var _this;\n    var chainId = _ref.chainId,\n      _ref$initOptions = _ref.initOptions,\n      initOptions = _ref$initOptions === void 0 ? {} : _ref$initOptions,\n      _ref$constructorOptio = _ref.constructorOptions,\n      constructorOptions = _ref$constructorOptio === void 0 ? {} : _ref$constructorOptio,\n      _ref$loginOptions = _ref.loginOptions,\n      loginOptions = _ref$loginOptions === void 0 ? {} : _ref$loginOptions;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.initOptions = initOptions;\n    _this.constructorOptions = constructorOptions;\n    _this.loginOptions = loginOptions;\n    return _this;\n  }\n  var _proto = TorusConnector.prototype;\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.torus.login(_this3.loginOptions).then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.torus.provider,\n            account: account\n          };\n        });\n      };\n      var _temp4 = function () {\n        if (!_this3.torus) {\n          return Promise.resolve(import('@toruslabs/torus-embed').then(function (m) {\n            var _m$default;\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Torus) {\n            _this3.torus = new Torus(_this3.constructorOptions);\n            return Promise.resolve(_this3.torus.init(_this3.initOptions)).then(function () {});\n          });\n        }\n      }();\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n      return Promise.resolve(_this5.torus.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n      return Promise.resolve(_this9.torus.ethereum.request({\n        method: 'eth_accounts'\n      }).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.deactivate = function deactivate() {\n    return Promise.resolve();\n  };\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n      return Promise.resolve(_this11.torus.cleanUp()).then(function () {\n        _this11.torus = undefined;\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  return TorusConnector;\n}(AbstractConnector);\nexport { TorusConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["TorusConnector","AbstractConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","torus","Torus","then","m","init","account","login","accounts","provider","getProvider","getChainId","getAccount","ethereum","request","method","deactivate","close","cleanUp","undefined","emitDeactivate"],"mappings":"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","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.torus = undefined\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}