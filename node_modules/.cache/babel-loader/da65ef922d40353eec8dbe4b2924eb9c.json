{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\nconst useEarnings = (poolName, earnTokenName, poolId) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.earnedFromBank(poolName, earnTokenName, poolId, bombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, bombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, bombFinance, fetchBalance]);\n  return balance;\n};\nexport default useEarnings;","map":{"version":3,"names":["useCallback","useEffect","useState","BigNumber","useBombFinance","config","useEarnings","poolName","earnTokenName","poolId","balance","setBalance","from","bombFinance","isUnlocked","fetchBalance","earnedFromBank","myAccount","catch","err","console","error","stack","refreshBalance","setInterval","refreshInterval","clearInterval"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useEarnings.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {BigNumber} from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport {ContractName} from '../bomb-finance';\nimport config from '../config';\n\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.earnedFromBank(poolName, earnTokenName, poolId, bombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, bombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, bombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useEarnings;\n"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACtD,SAAQC,SAAS,QAAO,QAAQ;AAChC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,WAAW,GAAGA,CAACC,QAAsB,EAAEC,aAAqB,EAAEC,MAAc,KAAK;EACrF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAACC,SAAS,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EACzD,MAAMC,WAAW,GAAGT,cAAc,EAAE;EACpC,MAAMU,UAAU,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,UAAU;EAE1C,MAAMC,YAAY,GAAGf,WAAW,CAAC,YAAY;IAC3C,MAAMU,OAAO,GAAG,MAAMG,WAAW,CAACG,cAAc,CAACT,QAAQ,EAAEC,aAAa,EAAEC,MAAM,EAAEI,WAAW,CAACI,SAAS,CAAC;IACxGN,UAAU,CAACD,OAAO,CAAC;EACrB,CAAC,EAAE,CAACH,QAAQ,EAAEC,aAAa,EAAEC,MAAM,EAAEI,WAAW,CAAC,CAAC;EAElDZ,SAAS,CAAC,MAAM;IACd,IAAIa,UAAU,EAAE;MACdC,YAAY,EAAE,CAACG,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC;MAEvD,MAAMC,cAAc,GAAGC,WAAW,CAACT,YAAY,EAAEV,MAAM,CAACoB,eAAe,CAAC;MACxE,OAAO,MAAMC,aAAa,CAACH,cAAc,CAAC;IAC5C;EACF,CAAC,EAAE,CAACT,UAAU,EAAEP,QAAQ,EAAEM,WAAW,EAAEE,YAAY,CAAC,CAAC;EAErD,OAAOL,OAAO;AAChB,CAAC;AAED,eAAeJ,WAAW"},"metadata":{},"sourceType":"module"}