{"ast":null,"code":"var assert = require('assert');\nvar crypto = require('crypto');\nvar cs = require('coinstring');\nvar secp256k1 = require('secp256k1');\nvar MASTER_SECRET = new Buffer('Bitcoin seed');\nvar HARDENED_OFFSET = 0x80000000;\nvar LEN = 78;\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {\n  private: 0x0488ADE4,\n  public: 0x0488B21E\n};\nfunction HDKey(versions) {\n  this.versions = versions || BITCOIN_VERSIONS;\n  this.depth = 0;\n  this.index = 0;\n  this._privateKey = null;\n  this._publicKey = null;\n  this.chainCode = null;\n  this._fingerprint = 0;\n  this.parentFingerprint = 0;\n}\nObject.defineProperty(HDKey.prototype, 'fingerprint', {\n  get: function () {\n    return this._fingerprint;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'identifier', {\n  get: function () {\n    return this._identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', {\n  get: function () {\n    return this.identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey;\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.');\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key');\n    this._privateKey = value;\n    this._publicKey = secp256k1.publicKeyCreate(value, true);\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey;\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key');\n    this._publicKey = secp256k1.publicKeyConvert(value, true); // force compressed point\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    this._privateKey = null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([new Buffer([0]), this.privateKey])));else return null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey));\n  }\n});\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this;\n  }\n  var entries = path.split('/');\n  var hdkey = this;\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path');\n      return;\n    }\n    var hardened = c.length > 1 && c[c.length - 1] === \"'\";\n    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index');\n    if (hardened) childIndex += HARDENED_OFFSET;\n    hdkey = hdkey.deriveChild(childIndex);\n  });\n  return hdkey;\n};\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET;\n  var indexBuffer = new Buffer(4);\n  indexBuffer.writeUInt32BE(index, 0);\n  var data;\n  if (isHardened) {\n    // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key');\n    var pk = this.privateKey;\n    var zb = new Buffer([0]);\n    pk = Buffer.concat([zb, pk]);\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer]);\n  } else {\n    // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer]);\n  }\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hd = new HDKey(this.versions);\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL);\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1);\n    }\n    // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true);\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened);\n    }\n  }\n  hd.chainCode = IR;\n  hd.depth = this.depth + 1;\n  hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)\n  hd.index = index;\n  return hd;\n};\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  };\n};\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hdkey = new HDKey(versions);\n  hdkey.chainCode = IR;\n  hdkey.privateKey = IL;\n  return hdkey;\n};\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS;\n  var hdkey = new HDKey(versions);\n  var keyBuffer = cs.decode(base58key);\n  var version = keyBuffer.readUInt32BE(0);\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n  hdkey.depth = keyBuffer.readUInt8(4);\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n  hdkey.index = keyBuffer.readUInt32BE(9);\n  hdkey.chainCode = keyBuffer.slice(13, 45);\n  var key = keyBuffer.slice(45);\n  if (key.readUInt8(0) === 0) {\n    // private\n    assert(version === versions.private, 'Version mismatch: version does not match private');\n    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public');\n    hdkey.publicKey = key;\n  }\n  return hdkey;\n};\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv);\n};\nfunction serialize(hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = new Buffer(LEN);\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(hdkey.depth, 4);\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n  buffer.writeUInt32BE(fingerprint, 5);\n  buffer.writeUInt32BE(hdkey.index, 9);\n  hdkey.chainCode.copy(buffer, 13);\n  key.copy(buffer, 45);\n  return buffer;\n}\nfunction hash160(buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest();\n  return crypto.createHash('rmd160').update(sha).digest();\n}\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET;\nmodule.exports = HDKey;","map":{"version":3,"names":["assert","require","crypto","cs","secp256k1","MASTER_SECRET","Buffer","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","hash160","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","serialize","concat","privateKey","derive","path","entries","split","hdkey","forEach","c","i","hardened","childIndex","parseInt","deriveChild","isHardened","indexBuffer","writeUInt32BE","data","pk","zb","I","createHmac","update","digest","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","fingerprint","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","version","readUInt8","key","fromJSON","obj","buffer","writeUInt8","copy","buf","sha","createHash","module","exports"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/hdkey/lib/hdkey.js"],"sourcesContent":["var assert = require('assert')\nvar crypto = require('crypto')\nvar cs = require('coinstring')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = new Buffer('Bitcoin seed')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = secp256k1.publicKeyCreate(value, true)\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([new Buffer([0]), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = new Buffer(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = new Buffer([0])\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL)\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true)\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = cs.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = new Buffer(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('rmd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}