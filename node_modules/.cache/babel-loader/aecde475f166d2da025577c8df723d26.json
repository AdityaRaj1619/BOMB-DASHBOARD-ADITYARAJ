{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { addTransaction, clearAllTransactions } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  const {\n    chainId,\n    account\n  } = useWallet();\n  const dispatch = useDispatch();\n  return useCallback(function (response) {\n    let {\n      summary,\n      approval\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary\n    }));\n  }, [dispatch, chainId, account]);\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions() {\n  var _state$chainId;\n  const {\n    chainId\n  } = useWallet();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress, spender) {\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    const tx = allTransactions[hash];\n    if (!tx) return false;\n    if (tx.receipt) {\n      return false;\n    } else {\n      const approval = tx.approval;\n      if (!approval) return false;\n      return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n    }\n  }), [allTransactions, spender, tokenAddress]);\n}\nexport function useClearAllTransactions() {\n  const {\n    chainId\n  } = useWallet();\n  const dispatch = useDispatch();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({\n      chainId\n    })), [dispatch, chainId])\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useWallet","addTransaction","clearAllTransactions","useTransactionAdder","chainId","account","dispatch","response","summary","approval","arguments","length","undefined","hash","Error","from","useAllTransactions","_state$chainId","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useClearAllTransactions"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/state/transactions/hooks.tsx"],"sourcesContent":["import {TransactionResponse} from '@ethersproject/providers';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\n\nimport {AppDispatch, AppState} from '../index';\nimport {addTransaction, clearAllTransactions} from './actions';\nimport {TransactionDetails} from './reducer';\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: {summary?: string; approval?: {tokenAddress: string; spender: string}},\n) => void {\n  const {chainId, account} = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {summary, approval}: {summary?: string; approval?: {tokenAddress: string; spender: string}} = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const {hash} = response;\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n      dispatch(addTransaction({hash, from: account, chainId, approval, summary}));\n    },\n    [dispatch, chainId, account],\n  );\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): {[txHash: string]: TransactionDetails} {\n  const {chainId} = useWallet();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): {clearAllTransactions: () => void} {\n  const {chainId} = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({chainId})), [dispatch, chainId]),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}