{"ast":null,"code":"// const EthQuery = require('ethjs-query')\nconst EthQuery = require('eth-query');\nconst EventEmitter = require('events');\nconst pify = require('pify');\nconst hexUtils = require('./hexUtils');\nconst incrementHexNumber = hexUtils.incrementHexNumber;\nconst sec = 1000;\nconst min = 60 * sec;\nclass RpcBlockTracker extends EventEmitter {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.');\n    this._provider = opts.provider;\n    this._query = new EthQuery(opts.provider);\n    // config\n    this._pollingInterval = opts.pollingInterval || 4 * sec;\n    this._syncingTimeout = opts.syncingTimeout || 1 * min;\n    // state\n    this._trackingBlock = null;\n    this._trackingBlockTimestamp = null;\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind methods for cleaner syntax later\n    this._performSync = this._performSync.bind(this);\n    this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this);\n  }\n  getTrackingBlock() {\n    return this._trackingBlock;\n  }\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n  async awaitCurrentBlock() {\n    // return if available\n    if (this._currentBlock) return this._currentBlock;\n    // wait for \"sync\" event\n    await new Promise(resolve => this.once('latest', resolve));\n    // return newly set current block\n    return this._currentBlock;\n  }\n  async start() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // abort if already started\n    if (this._isRunning) return;\n    this._isRunning = true;\n    // if this._currentBlock\n    if (opts.fromBlock) {\n      // use specified start point\n      await this._setTrackingBlock(await this._fetchBlockByNumber(opts.fromBlock));\n    } else {\n      // or query for latest\n      await this._setTrackingBlock(await this._fetchLatestBlock());\n    }\n    if (this._provider.on) {\n      await this._initSubscription();\n    } else {\n      this._performSync().catch(err => {\n        if (err) console.error(err);\n      });\n    }\n  }\n  async stop() {\n    this._isRunning = false;\n    if (this._provider.on) {\n      await this._removeSubscription();\n    }\n  }\n\n  //\n  // private\n  //\n\n  async _setTrackingBlock(newBlock) {\n    if (this._trackingBlock && this._trackingBlock.hash === newBlock.hash) return;\n    // check for large timestamp lapse\n    const previous = this._trackingBlockTimestamp;\n    const now = Date.now();\n    // check for desynchronization (computer sleep or no internet)\n    if (previous && now - previous > this._syncingTimeout) {\n      this._trackingBlockTimestamp = null;\n      await this._warpToLatest();\n    } else {\n      this._trackingBlock = newBlock;\n      this._trackingBlockTimestamp = now;\n      this.emit('block', newBlock);\n    }\n  }\n  async _setCurrentBlock(newBlock) {\n    if (this._currentBlock && this._currentBlock.hash === newBlock.hash) return;\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      newBlock,\n      oldBlock\n    });\n  }\n  async _warpToLatest() {\n    // set latest as tracking block\n    await this._setTrackingBlock(await this._fetchLatestBlock());\n  }\n  async _pollForNextBlock() {\n    setTimeout(() => this._performSync(), this._pollingInterval);\n  }\n  async _performSync() {\n    if (!this._isRunning) return;\n    const trackingBlock = this.getTrackingBlock();\n    if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing');\n    const nextNumber = incrementHexNumber(trackingBlock.number);\n    try {\n      const newBlock = await this._fetchBlockByNumber(nextNumber);\n      if (newBlock) {\n        // set as new tracking block\n        await this._setTrackingBlock(newBlock);\n        // ask for next block\n        this._performSync();\n      } else {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock);\n        // setup poll for next block\n        this._pollForNextBlock();\n      }\n    } catch (err) {\n      // hotfix for https://github.com/ethereumjs/testrpc/issues/290\n      if (err.message.includes('index out of range') || err.message.includes(\"Couldn't find block by reference\")) {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock);\n        // setup poll for next block\n        this._pollForNextBlock();\n      } else {\n        console.error(err);\n        this._pollForNextBlock();\n      }\n    }\n  }\n  async _handleNewBlockNotification(err, notification) {\n    if (notification.id != this._subscriptionId) return; // this notification isn't for us\n\n    if (err) {\n      this.emit('error', err);\n      await this._removeSubscription();\n    }\n    await this._setTrackingBlock(await this._fetchBlockByNumber(notification.result.number));\n  }\n  async _initSubscription() {\n    this._provider.on('data', this._handleNewBlockNotification);\n    let result = await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_subscribe',\n      params: ['newHeads']\n    });\n    this._subscriptionId = result.result;\n  }\n  async _removeSubscription() {\n    if (!this._subscriptionId) throw new Error(\"Not subscribed.\");\n    this._provider.removeListener('data', this._handleNewBlockNotification);\n    await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_unsubscribe',\n      params: [this._subscriptionId]\n    });\n    delete this._subscriptionId;\n  }\n  _fetchLatestBlock() {\n    return pify(this._query.getBlockByNumber).call(this._query, 'latest', true);\n  }\n  _fetchBlockByNumber(hexNumber) {\n    const cleanHex = hexUtils.formatHex(hexNumber);\n    return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true);\n  }\n}\nmodule.exports = RpcBlockTracker;\n\n// ├─ difficulty: 0x2892ddca\n// ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773\n// ├─ gasLimit: 0x47e7c4\n// ├─ gasUsed: 0x6384\n// ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// ├─ logsBloom: 0xn// ├─ miner: 0x01711853335f857442ef6f349b2467c531731318\n// ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352\n// ├─ nonce: 0xd556d5a5504198e4\n// ├─ number: 0x72ac8\n// ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5\n// ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99\n// ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n// ├─ size: 0x2ad\n// ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6\n// ├─ timestamp: 0x58955844\n// ├─ totalDifficulty: 0x751d0dfa03c1\n// ├─ transactions\n// │  └─ 0\n// │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// │     ├─ blockNumber: 0x72ac8\n// │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857\n// │     ├─ gas: 0x15f90\n// │     ├─ gasPrice: 0x4a817c800\n// │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d\n// │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde\n// │     ├─ nonce: 0x323e\n// │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf\n// │     ├─ transactionIndex: 0x0\n// │     ├─ value: 0x0\n// │     ├─ v: 0x29\n// │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954\n// │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2\n// ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3\n// └─ uncles","map":{"version":3,"names":["EthQuery","require","EventEmitter","pify","hexUtils","incrementHexNumber","sec","min","RpcBlockTracker","constructor","opts","arguments","length","undefined","provider","Error","_provider","_query","_pollingInterval","pollingInterval","_syncingTimeout","syncingTimeout","_trackingBlock","_trackingBlockTimestamp","_currentBlock","_isRunning","_performSync","bind","_handleNewBlockNotification","getTrackingBlock","getCurrentBlock","awaitCurrentBlock","Promise","resolve","once","start","fromBlock","_setTrackingBlock","_fetchBlockByNumber","_fetchLatestBlock","on","_initSubscription","catch","err","console","error","stop","_removeSubscription","newBlock","hash","previous","now","Date","_warpToLatest","emit","_setCurrentBlock","oldBlock","_pollForNextBlock","setTimeout","trackingBlock","nextNumber","number","message","includes","notification","id","_subscriptionId","result","sendAsync","send","jsonrpc","getTime","method","params","removeListener","getBlockByNumber","call","hexNumber","cleanHex","formatHex","module","exports"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/eth-block-tracker/src/index.js"],"sourcesContent":["// const EthQuery = require('ethjs-query')\nconst EthQuery = require('eth-query')\nconst EventEmitter = require('events')\nconst pify = require('pify')\nconst hexUtils = require('./hexUtils')\nconst incrementHexNumber = hexUtils.incrementHexNumber\nconst sec = 1000\nconst min = 60 * sec\n\nclass RpcBlockTracker extends EventEmitter {\n\n  constructor(opts = {}) {\n    super()\n    if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.')\n    this._provider = opts.provider\n    this._query = new EthQuery(opts.provider)\n    // config\n    this._pollingInterval = opts.pollingInterval || 4 * sec\n    this._syncingTimeout = opts.syncingTimeout || 1 * min\n    // state\n    this._trackingBlock = null\n    this._trackingBlockTimestamp = null\n    this._currentBlock = null\n    this._isRunning = false\n    // bind methods for cleaner syntax later\n    this._performSync = this._performSync.bind(this)\n    this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this)\n  }\n\n  getTrackingBlock () {\n    return this._trackingBlock\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async awaitCurrentBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for \"sync\" event\n    await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return this._currentBlock\n  }\n\n  async start (opts = {}) {\n    // abort if already started\n    if (this._isRunning) return\n    this._isRunning = true\n    // if this._currentBlock\n    if (opts.fromBlock) {\n      // use specified start point\n      await this._setTrackingBlock(await this._fetchBlockByNumber(opts.fromBlock))\n    } else {\n      // or query for latest\n      await this._setTrackingBlock(await this._fetchLatestBlock())\n    }\n    if (this._provider.on) {\n      await this._initSubscription()\n    } else {\n      this._performSync()\n        .catch((err) => {\n          if (err) console.error(err)\n        })\n    }\n  }\n\n  async stop () {\n    this._isRunning = false\n    if (this._provider.on) {\n      await this._removeSubscription()\n    }\n  }\n\n  //\n  // private\n  //\n\n  async _setTrackingBlock (newBlock) {\n    if (this._trackingBlock && (this._trackingBlock.hash === newBlock.hash)) return\n    // check for large timestamp lapse\n    const previous = this._trackingBlockTimestamp\n    const now = Date.now()\n    // check for desynchronization (computer sleep or no internet)\n    if (previous && (now - previous) > this._syncingTimeout) {\n      this._trackingBlockTimestamp = null\n      await this._warpToLatest()\n    } else {\n      this._trackingBlock = newBlock\n      this._trackingBlockTimestamp = now\n      this.emit('block', newBlock)\n    }\n  }\n\n  async _setCurrentBlock (newBlock) {\n    if (this._currentBlock && (this._currentBlock.hash === newBlock.hash)) return\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { newBlock, oldBlock })\n  }\n\n  async _warpToLatest() {\n    // set latest as tracking block\n    await this._setTrackingBlock(await this._fetchLatestBlock())\n  }\n\n  async _pollForNextBlock () {\n    setTimeout(() => this._performSync(), this._pollingInterval)\n  }\n\n  async _performSync () {\n    if (!this._isRunning) return\n    const trackingBlock = this.getTrackingBlock()\n    if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing')\n    const nextNumber = incrementHexNumber(trackingBlock.number)\n    try {\n\n      const newBlock = await this._fetchBlockByNumber(nextNumber)\n      if (newBlock) {\n        // set as new tracking block\n        await this._setTrackingBlock(newBlock)\n        // ask for next block\n        this._performSync()\n      } else {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock)\n        // setup poll for next block\n        this._pollForNextBlock()\n      }\n\n    } catch (err) {\n\n      // hotfix for https://github.com/ethereumjs/testrpc/issues/290\n      if (err.message.includes('index out of range') ||\n          err.message.includes(\"Couldn't find block by reference\")) {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock)\n        // setup poll for next block\n        this._pollForNextBlock()\n      } else {\n        console.error(err)\n        this._pollForNextBlock()\n      }\n\n    }\n  }\n\n  async _handleNewBlockNotification(err, notification) {\n    if (notification.id != this._subscriptionId)\n      return // this notification isn't for us\n\n    if (err) {\n      this.emit('error', err)\n      await this._removeSubscription()\n    }\n\n    await this._setTrackingBlock(await this._fetchBlockByNumber(notification.result.number))\n  }\n\n  async _initSubscription() {\n    this._provider.on('data', this._handleNewBlockNotification)\n\n    let result = await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_subscribe',\n      params: [\n        'newHeads'\n      ],\n    })\n\n    this._subscriptionId = result.result\n  }\n\n  async _removeSubscription() {\n    if (!this._subscriptionId) throw new Error(\"Not subscribed.\")\n\n    this._provider.removeListener('data', this._handleNewBlockNotification)\n\n    await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_unsubscribe',\n      params: [\n        this._subscriptionId\n      ],\n    })\n\n    delete this._subscriptionId\n  }\n\n  _fetchLatestBlock () {\n    return pify(this._query.getBlockByNumber).call(this._query, 'latest', true)\n  }\n\n  _fetchBlockByNumber (hexNumber) {\n    const cleanHex = hexUtils.formatHex(hexNumber)\n    return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true)\n  }\n\n}\n\nmodule.exports = RpcBlockTracker\n\n // ├─ difficulty: 0x2892ddca\n // ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773\n // ├─ gasLimit: 0x47e7c4\n // ├─ gasUsed: 0x6384\n // ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n // ├─ logsBloom: 0xn // ├─ miner: 0x01711853335f857442ef6f349b2467c531731318\n // ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352\n // ├─ nonce: 0xd556d5a5504198e4\n // ├─ number: 0x72ac8\n // ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5\n // ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99\n // ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n // ├─ size: 0x2ad\n // ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6\n // ├─ timestamp: 0x58955844\n // ├─ totalDifficulty: 0x751d0dfa03c1\n // ├─ transactions\n // │  └─ 0\n // │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n // │     ├─ blockNumber: 0x72ac8\n // │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857\n // │     ├─ gas: 0x15f90\n // │     ├─ gasPrice: 0x4a817c800\n // │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d\n // │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde\n // │     ├─ nonce: 0x323e\n // │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf\n // │     ├─ transactionIndex: 0x0\n // │     ├─ value: 0x0\n // │     ├─ v: 0x29\n // │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954\n // │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2\n // ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3\n // └─ uncles\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}