{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport config from './../config';\n\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\nexport const connectToNetwork = async provider => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: `0x${config.chainId.toString(16)}`,\n      chainName: config.networkName,\n      nativeCurrency: {\n        name: 'BNB',\n        symbol: 'BNB',\n        decimals: 18\n      },\n      rpcUrls: ['https://rpc.ankr.com/bsc'],\n      blockExplorerUrls: [config.ftmscanUrl]\n    }]\n  });\n};\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const {\n    ethereum\n  } = window;\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\nexport default usePromptNetwork;","map":{"version":3,"names":["useEffect","useState","config","connectToNetwork","provider","request","method","params","chainId","toString","chainName","networkName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","ftmscanUrl","usePromptNetwork","networkPrompt","setNetworkPrompt","ethereum","window","networkVersion"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useNetworkPrompt.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport config from './../config';\n\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\nexport const connectToNetwork = async (provider: any) => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${config.chainId.toString(16)}`,\n        chainName: config.networkName,\n        nativeCurrency: {\n          name: 'BNB',\n          symbol: 'BNB',\n          decimals: 18,\n        },\n        rpcUrls: ['https://rpc.ankr.com/bsc'],\n        blockExplorerUrls: [config.ftmscanUrl],\n      },\n    ],\n  });\n};\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAa,IAAK;EACvD,MAAMA,QAAQ,CAACC,OAAO,CAAC;IACrBC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CACN;MACEC,OAAO,EAAG,KAAIN,MAAM,CAACM,OAAO,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC;MAC3CC,SAAS,EAAER,MAAM,CAACS,WAAW;MAC7BC,cAAc,EAAE;QACdC,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE,KAAK;QACbC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE,CAAC,0BAA0B,CAAC;MACrCC,iBAAiB,EAAE,CAACf,MAAM,CAACgB,UAAU;IACvC,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM;IAAEqB;EAAS,CAAC,GAAGC,MAAa;EAElCvB,SAAS,CAAC,MAAM;IACd,IAAI,CAACoB,aAAa,EAAE;MAClB,IAAIE,QAAQ,IAAIA,QAAQ,CAACE,cAAc,KAAKtB,MAAM,CAACM,OAAO,CAACC,QAAQ,EAAE,EAAE;QACrEN,gBAAgB,CAACmB,QAAQ,CAAC;QAC1BD,gBAAgB,CAAC,IAAI,CAAC;MACxB;IACF;EACF,CAAC,EAAE,CAACD,aAAa,EAAEE,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module"}