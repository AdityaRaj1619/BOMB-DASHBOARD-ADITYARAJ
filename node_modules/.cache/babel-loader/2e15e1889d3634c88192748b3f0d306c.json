{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  var _state$chainId;\n  const {\n    chainId,\n    ethereum\n  } = useWallet();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.transactions);\n  const transactions = chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n    const provider = getDefaultProvider();\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      provider.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash;\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          addPopup({\n            txn: {\n              hash,\n              success: receipt.status === 1,\n              summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n            }\n          }, hash);\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n  return null;\n}","map":{"version":3,"names":["useEffect","useDispatch","useSelector","useWallet","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","getDefaultProvider","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","_state$chainId","chainId","ethereum","dispatch","state","transactions","addPopup","provider","Object","keys","filter","hash","forEach","getTransactionReceipt","then","_transactions$hash","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/state/transactions/updater.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}