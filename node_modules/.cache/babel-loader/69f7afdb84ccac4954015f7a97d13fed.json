{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Prepends a subprovider to a provider\n * @param provider    Given provider\n * @param subprovider Subprovider to prepend\n */\nfunction prependSubprovider(provider, subprovider) {\n  subprovider.setEngine(provider);\n  // HACK: We use implementation details of provider engine here\n  // https://github.com/MetaMask/provider-engine/blob/master/index.js#L68\n  provider._providers = __spread([subprovider], provider._providers);\n}\nexports.prependSubprovider = prependSubprovider;","map":{"version":3,"sources":["../../../src/utils/subprovider_utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAIG;AACH,SAAgB,kBAAkB,CAAC,QAA4B,EAAE,WAAwB,EAAA;EACrF,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;EAC/B;EACA;EACC,QAAgB,CAAC,UAAU,GAAA,QAAA,CAAA,CAAI,WAAW,CAAA,EAAM,QAAgB,CAAC,UAAU,CAAC;AACjF;AALA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Prepends a subprovider to a provider\n * @param provider    Given provider\n * @param subprovider Subprovider to prepend\n */\nfunction prependSubprovider(provider, subprovider) {\n    subprovider.setEngine(provider);\n    // HACK: We use implementation details of provider engine here\n    // https://github.com/MetaMask/provider-engine/blob/master/index.js#L68\n    provider._providers = __spread([subprovider], provider._providers);\n}\nexports.prependSubprovider = prependSubprovider;\n//# sourceMappingURL=subprovider_utils.js.map"]},"metadata":{},"sourceType":"script"}