{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _createForOfIteratorHelper from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";function _regeneratorRuntime(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,\"_invoke\",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==typeof value&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,\"_invoke\",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,\"throw\"===methodName&&delegate.iterator.return&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method)||\"return\"!==methodName&&(context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a '\"+methodName+\"' method\")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}// import { Fetcher, Route, Token } from '@uniswap/sdk';\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport{Fetcher,Route,Token}from'@pancakeswap/sdk';import{BigNumber,Contract,ethers}from'ethers';import{decimalToBalance}from'./ether-utils';import ERC20 from'./ERC20';import{getFullDisplayBalance,getDisplayBalance}from'../utils/formatBalance';import{getDefaultProvider}from'../utils/provider';import IUniswapV2PairABI from'./IUniswapV2Pair.abi.json';import IBombBorrowableABI from'./IBombBorrowable.abi.json';import config,{bankDefinitions}from'../config';import moment from'moment';import{parseUnits}from'ethers/lib/utils';import{BNB_TICKER,SPOOKY_ROUTER_ADDR,BOMB_TICKER}from'../utils/constants';import{bombMaxi}from'../services/graph';/**\n * An API module of Bomb Money contracts.\n * All contract-interacting domain logic should be defined in here.\n */export var BombFinance=/*#__PURE__*/function(){function BombFinance(cfg){_classCallCheck(this,BombFinance);this.myAccount=void 0;this.provider=void 0;this.signer=void 0;this.config=void 0;this.contracts=void 0;this.externalTokens=void 0;this.boardroomVersionOfUser=void 0;this.BOMBBTCB_LP=void 0;this.BOMB=void 0;this.BUSD=void 0;this.BSHARE=void 0;this.BBOND=void 0;this.XBOMB=void 0;this.BNB=void 0;this.BTC=void 0;this.BOMB_BORROWABLE=void 0;this.BTCB_BORROWABLE=void 0;this.BBOMB_BOMB=void 0;this.BBOMB_BTCB=void 0;this.BBOMBBOMB=void 0;this.BBOMBBTCB=void 0;this.BUSMBUSD_LP=void 0;this.BUSM=void 0;this.BOMB_MAXI=void 0;this.BSHARE_MAXI=void 0;var deployments=cfg.deployments,externalTokens=cfg.externalTokens;var provider=getDefaultProvider();// loads contracts from deployments\nthis.contracts={};for(var _i=0,_Object$entries=Object.entries(deployments);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),_name=_Object$entries$_i[0],deployment=_Object$entries$_i[1];this.contracts[_name]=new Contract(deployment.address,deployment.abi,provider);}this.externalTokens={};for(var _i2=0,_Object$entries2=Object.entries(externalTokens);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),symbol=_Object$entries2$_i[0],_Object$entries2$_i$=_slicedToArray(_Object$entries2$_i[1],2),address=_Object$entries2$_i$[0],decimal=_Object$entries2$_i$[1];this.externalTokens[symbol]=new ERC20(address,provider,symbol,decimal);}this.BOMB=new ERC20(deployments.Bomb.address,provider,'BOMB');this.BSHARE=new ERC20(deployments.BShare.address,provider,'BSHARE');this.BBOND=new ERC20(deployments.BBond.address,provider,'BBOND');this.BNB=this.externalTokens['WBNB'];this.BTC=this.externalTokens['BTCB'];this.XBOMB=new ERC20(deployments.xBOMB.address,provider,'XBOMB');this.BUSM=this.externalTokens['BUSM'];this.BUSD=this.externalTokens['BUSD'];// this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n// this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n// this.BBOMB_BOMB = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n// this.BBOMB_BTCB = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\nthis.BBOMB_BOMB=new ERC20(deployments.BombBorrowable.address,provider,'bBOMB');this.BBOMBBOMB=this.externalTokens['BBOMB-BOMB'];this.BBOMBBTCB=this.externalTokens['BBOMB-BTCB'];this.BBOMB_BTCB=new ERC20(deployments.BtcbBorrowable.address,provider,'bBOMB');this.BOMB_BORROWABLE=new Contract(externalTokens['BBOMB-BOMB'][0],IBombBorrowableABI,provider);this.BTCB_BORROWABLE=new Contract(externalTokens['BBOMB-BTCB'][0],IBombBorrowableABI,provider);this.BOMB_MAXI=new ERC20(deployments.BombMaxiLPBShareRewardPool.address,provider,'80BOMB-20BTCB-LP');this.BSHARE_MAXI=new ERC20(deployments.BshareMaxiLPBShareRewardPool.address,provider,'80BSHARE-20WBNB-LP');// Uniswap V2 Pair\nthis.BOMBBTCB_LP=new Contract(externalTokens['BOMB-BTCB-LP'][0],IUniswapV2PairABI,provider);this.BUSMBUSD_LP=new Contract(externalTokens['BUSM-BUSD-LP'][0],IUniswapV2PairABI,provider);this.config=cfg;this.provider=provider;}/**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */_createClass(BombFinance,[{key:\"unlockWallet\",value:function unlockWallet(provider,account){var _this=this;var newProvider=new ethers.providers.Web3Provider(provider,this.config.chainId);this.signer=newProvider.getSigner(0);this.myAccount=account;for(var _i3=0,_Object$entries3=Object.entries(this.contracts);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),_name2=_Object$entries3$_i[0],contract=_Object$entries3$_i[1];this.contracts[_name2]=contract.connect(this.signer);}var tokens=[this.BOMB,this.BSHARE,this.BBOND].concat(_toConsumableArray(Object.values(this.externalTokens)));var _iterator=_createForOfIteratorHelper(tokens),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var token=_step.value;token.connect(this.signer);}}catch(err){_iterator.e(err);}finally{_iterator.f();}this.BOMBBTCB_LP=this.BOMBBTCB_LP.connect(this.signer);console.log(\"\\uD83D\\uDD13 Wallet is unlocked. Welcome, \".concat(account,\"!\"));this.fetchBoardroomVersionOfUser().then(function(version){return _this.boardroomVersionOfUser=version;}).catch(function(err){console.error(\"Failed to fetch boardroom version: \".concat(err.stack));_this.boardroomVersionOfUser='latest';});}},{key:\"isUnlocked\",get:function get(){return!!this.myAccount;}//===================================================================\n//===================== GET ASSET STATS =============================\n//===================FROM APE TO DISPLAY =========================\n//=========================IN HOME PAGE==============================\n//===================================================================\n},{key:\"getBombStat\",value:function(){var _getBombStat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _this$contracts,BombRewardPool,BombGenesisRewardPool,supply,bombRewardPoolSupply,bombRewardPoolSupply2,bombCirculatingSupply,priceInBTC,priceOfOneBTC,priceOfBombInDollars;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_this$contracts=this.contracts,BombRewardPool=_this$contracts.BombRewardPool,BombGenesisRewardPool=_this$contracts.BombGenesisRewardPool;_context.next=3;return this.BOMB.totalSupply();case 3:supply=_context.sent;_context.next=6;return this.BOMB.balanceOf(BombGenesisRewardPool.address);case 6:bombRewardPoolSupply=_context.sent;_context.next=9;return this.BOMB.balanceOf(BombRewardPool.address);case 9:bombRewardPoolSupply2=_context.sent;bombCirculatingSupply=supply.sub(bombRewardPoolSupply).sub(bombRewardPoolSupply2);//  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BOMB);\n//const priceInBNBstring = priceInBNB.toString();\n_context.next=13;return this.getTokenPriceFromPancakeswapBTC(this.BOMB);case 13:priceInBTC=_context.sent;_context.next=16;return this.getBTCBPriceFromPancakeswap();case 16:priceOfOneBTC=_context.sent;//const priceInDollars = await this.getTokenPriceFromPancakeswapBOMBUSD();\npriceOfBombInDollars=(Number(priceInBTC)*Number(priceOfOneBTC)/10000).toFixed(2);//console.log('priceOfBombInDollars', priceOfBombInDollars);\nreturn _context.abrupt(\"return\",{//  tokenInFtm: (Number(priceInBNB) * 100).toString(),\ntokenInFtm:priceInBTC.toString(),priceInDollars:priceOfBombInDollars,totalSupply:getDisplayBalance(supply,this.BOMB.decimal,0),circulatingSupply:getDisplayBalance(bombCirculatingSupply,this.BOMB.decimal,0)});case 19:case\"end\":return _context.stop();}},_callee,this);}));function getBombStat(){return _getBombStat.apply(this,arguments);}return getBombStat;}()},{key:\"getBTCPriceUSD\",value:function(){var _getBTCPriceUSD=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var priceOfOneBTC;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.getBTCBPriceFromPancakeswap();case 2:priceOfOneBTC=_context2.sent;return _context2.abrupt(\"return\",Number(priceOfOneBTC));case 4:case\"end\":return _context2.stop();}},_callee2,this);}));function getBTCPriceUSD(){return _getBTCPriceUSD.apply(this,arguments);}return getBTCPriceUSD;}()/**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */},{key:\"getLPStat\",value:function(){var _getLPStat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(name){var lpToken,lpTokenSupplyBN,lpTokenSupply,token0,isBomb,tokenAmountBN,tokenAmount,ftmAmountBN,ftmAmount,tokenAmountInOneLP,ftmAmountInOneLP,lpTokenPrice,lpTokenPriceFixed,liquidity;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:// console.log('NAME', name);\nlpToken=this.externalTokens[name];_context3.next=3;return lpToken.totalSupply();case 3:lpTokenSupplyBN=_context3.sent;lpTokenSupply=getDisplayBalance(lpTokenSupplyBN,18);token0=name.startsWith('BOMB')?this.BOMB:this.BSHARE;// console.log('NAME', name);\nisBomb=name.startsWith('BOMB');_context3.next=9;return token0.balanceOf(lpToken.address);case 9:tokenAmountBN=_context3.sent;tokenAmount=getDisplayBalance(tokenAmountBN,18);_context3.next=13;return this.BNB.balanceOf(lpToken.address);case 13:ftmAmountBN=_context3.sent;ftmAmount=getDisplayBalance(ftmAmountBN,18);tokenAmountInOneLP=Number(tokenAmount)/Number(lpTokenSupply);ftmAmountInOneLP=Number(ftmAmount)/Number(lpTokenSupply);_context3.next=19;return this.getLPTokenPrice(lpToken,token0,isBomb);case 19:lpTokenPrice=_context3.sent;lpTokenPriceFixed=Number(lpTokenPrice).toFixed(2).toString();liquidity=(Number(lpTokenSupply)*Number(lpTokenPrice)).toFixed(2).toString();return _context3.abrupt(\"return\",{tokenAmount:tokenAmountInOneLP.toFixed(2).toString(),ftmAmount:ftmAmountInOneLP.toFixed(2).toString(),priceOfOne:lpTokenPriceFixed,totalLiquidity:liquidity,totalSupply:Number(lpTokenSupply).toFixed(2).toString()});case 23:case\"end\":return _context3.stop();}},_callee3,this);}));function getLPStat(_x){return _getLPStat.apply(this,arguments);}return getLPStat;}()},{key:\"getLPStatBTC\",value:function(){var _getLPStatBTC=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name){var lpToken,lpTokenSupplyBN,lpTokenSupply,token0,isBomb,tokenAmountBN,tokenAmount,btcAmountBN,btcAmount,tokenAmountInOneLP,ftmAmountInOneLP,lpTokenPrice,lpTokenPriceFixed,liquidity;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:lpToken=this.externalTokens[name];_context4.next=3;return lpToken.totalSupply();case 3:lpTokenSupplyBN=_context4.sent;lpTokenSupply=getDisplayBalance(lpTokenSupplyBN,18);token0=name.startsWith('BOMB')?this.BOMB:this.BSHARE;isBomb=name.startsWith('BOMB');_context4.next=9;return token0.balanceOf(lpToken.address);case 9:tokenAmountBN=_context4.sent;tokenAmount=getDisplayBalance(tokenAmountBN,18);_context4.next=13;return this.BTC.balanceOf(lpToken.address);case 13:btcAmountBN=_context4.sent;btcAmount=getDisplayBalance(btcAmountBN,18);tokenAmountInOneLP=Number(tokenAmount)/Number(lpTokenSupply);ftmAmountInOneLP=Number(btcAmount)/Number(lpTokenSupply);_context4.next=19;return this.getLPTokenPrice(lpToken,token0,isBomb);case 19:lpTokenPrice=_context4.sent;lpTokenPriceFixed=Number(lpTokenPrice).toFixed(2).toString();liquidity=(Number(lpTokenSupply)*Number(lpTokenPrice)).toFixed(2).toString();return _context4.abrupt(\"return\",{tokenAmount:tokenAmountInOneLP.toFixed(2).toString(),ftmAmount:ftmAmountInOneLP.toFixed(5).toString(),priceOfOne:lpTokenPriceFixed,totalLiquidity:liquidity,totalSupply:Number(lpTokenSupply).toFixed(2).toString()});case 23:case\"end\":return _context4.stop();}},_callee4,this);}));function getLPStatBTC(_x2){return _getLPStatBTC.apply(this,arguments);}return getLPStatBTC;}()/**\n   * Use this method to get price for Bomb\n   * @returns TokenStat for BBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */},{key:\"getBondStat\",value:function(){var _getBondStat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){var Treasury,bombStat,bondBombRatioBN,modifier,bondPriceInBNB,priceOfBBondInDollars,supply;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:Treasury=this.contracts.Treasury;_context5.next=3;return this.getBombStat();case 3:bombStat=_context5.sent;_context5.next=6;return Treasury.getBondPremiumRate();case 6:bondBombRatioBN=_context5.sent;modifier=bondBombRatioBN/1e14>1?bondBombRatioBN/1e14:1;bondPriceInBNB=(Number(bombStat.tokenInFtm)*modifier).toFixed(4);priceOfBBondInDollars=(Number(bombStat.priceInDollars)*modifier).toFixed(4);_context5.next=12;return this.BBOND.displayedTotalSupply();case 12:supply=_context5.sent;return _context5.abrupt(\"return\",{tokenInFtm:bondPriceInBNB,priceInDollars:priceOfBBondInDollars,totalSupply:supply,circulatingSupply:supply});case 14:case\"end\":return _context5.stop();}},_callee5,this);}));function getBondStat(){return _getBondStat.apply(this,arguments);}return getBondStat;}()/**\n   * @returns TokenStat for BSHARE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */},{key:\"getShareStat\",value:function(){var _getShareStat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var BShareRewardPool,supply,priceInBNB,bombRewardPoolSupply,tShareCirculatingSupply,priceOfOneBNB,priceOfSharesInDollars;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:BShareRewardPool=this.contracts.BShareRewardPool;_context6.next=3;return this.BSHARE.totalSupply();case 3:supply=_context6.sent;_context6.next=6;return this.getTokenPriceFromPancakeswap(this.BSHARE);case 6:priceInBNB=_context6.sent;_context6.next=9;return this.BSHARE.balanceOf(BShareRewardPool.address);case 9:bombRewardPoolSupply=_context6.sent;tShareCirculatingSupply=supply.sub(bombRewardPoolSupply);_context6.next=13;return this.getWBNBPriceFromPancakeswap();case 13:priceOfOneBNB=_context6.sent;priceOfSharesInDollars=(Number(priceInBNB)*Number(priceOfOneBNB)).toFixed(2);return _context6.abrupt(\"return\",{tokenInFtm:priceInBNB,priceInDollars:priceOfSharesInDollars,totalSupply:getDisplayBalance(supply,this.BSHARE.decimal,0),circulatingSupply:getDisplayBalance(tShareCirculatingSupply,this.BSHARE.decimal,0)});case 16:case\"end\":return _context6.stop();}},_callee6,this);}));function getShareStat(){return _getShareStat.apply(this,arguments);}return getShareStat;}()},{key:\"getBombStatInEstimatedTWAP\",value:function(){var _getBombStatInEstimatedTWAP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(){var _this$contracts2,Oracle,BombRewardPool,expectedPrice,supply,bombRewardPoolSupply,bombCirculatingSupply;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:_this$contracts2=this.contracts,Oracle=_this$contracts2.Oracle,BombRewardPool=_this$contracts2.BombRewardPool;_context7.next=3;return Oracle.twap(this.BOMB.address,ethers.utils.parseEther('10000'));case 3:expectedPrice=_context7.sent;_context7.next=6;return this.BOMB.totalSupply();case 6:supply=_context7.sent;_context7.next=9;return this.BOMB.balanceOf(BombRewardPool.address);case 9:bombRewardPoolSupply=_context7.sent;bombCirculatingSupply=supply.sub(bombRewardPoolSupply);return _context7.abrupt(\"return\",{tokenInFtm:getDisplayBalance(expectedPrice),priceInDollars:getDisplayBalance(expectedPrice),totalSupply:getDisplayBalance(supply,this.BOMB.decimal,0),circulatingSupply:getDisplayBalance(bombCirculatingSupply,this.BOMB.decimal,0)});case 12:case\"end\":return _context7.stop();}},_callee7,this);}));function getBombStatInEstimatedTWAP(){return _getBombStatInEstimatedTWAP.apply(this,arguments);}return getBombStatInEstimatedTWAP;}()},{key:\"getBombPriceInLastTWAP\",value:function(){var _getBombPriceInLastTWAP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(){var Treasury;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:Treasury=this.contracts.Treasury;return _context8.abrupt(\"return\",Treasury.getBombUpdatedPrice());case 2:case\"end\":return _context8.stop();}},_callee8,this);}));function getBombPriceInLastTWAP(){return _getBombPriceInLastTWAP.apply(this,arguments);}return getBombPriceInLastTWAP;}()// async getBombPegTWAP(): Promise<any> {\n//   const { Treasury } = this.contracts;\n//   const updatedPrice = Treasury.getBombUpdatedPrice();\n//   const updatedPrice2 = updatedPrice * 10000;\n//   return updatedPrice2;\n// }\n},{key:\"getBondsPurchasable\",value:function(){var _getBondsPurchasable=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(){var Treasury;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:Treasury=this.contracts.Treasury;// const burnableBomb = (Number(Treasury.getBurnableBombLeft()) * 1000).toFixed(2).toString();\nreturn _context9.abrupt(\"return\",Treasury.getBurnableBombLeft());case 2:case\"end\":return _context9.stop();}},_callee9,this);}));function getBondsPurchasable(){return _getBondsPurchasable.apply(this,arguments);}return getBondsPurchasable;}()},{key:\"getBombMaxiStats\",value:function(){var _getBombMaxiStats=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(poolId){var BombMaxi;return _regeneratorRuntime().wrap(function _callee10$(_context10){while(1)switch(_context10.prev=_context10.next){case 0:_context10.next=2;return bombMaxi(poolId);case 2:BombMaxi=_context10.sent;return _context10.abrupt(\"return\",{totalShares:BombMaxi.data.pool.totalShares.toString(),totalLiquidity:BombMaxi.data.pool.totalLiquidity.toString()// tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n// ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n// priceOfOne: lpTokenPriceFixed,\n// totalLiquidity: liquidity,\n// totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n});case 4:case\"end\":return _context10.stop();}},_callee10);}));function getBombMaxiStats(_x3){return _getBombMaxiStats.apply(this,arguments);}return getBombMaxiStats;}()/**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */},{key:\"getPoolAPRs\",value:function(){var _getPoolAPRs=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(bank){var depositToken,poolContract,depositTokenValue,depositTokenPrice,stakeInPool,TVL,stat,tokenPerSecond,tokenPerHour,totalRewardPricePerYear,totalRewardPricePerDay,totalStakingTokenInPool,dailyAPR,yearlyAPR;return _regeneratorRuntime().wrap(function _callee11$(_context11){while(1)switch(_context11.prev=_context11.next){case 0:if(!(this.myAccount===undefined)){_context11.next=2;break;}return _context11.abrupt(\"return\");case 2:depositToken=bank.depositToken;// if (depositToken.symbol === '80BOMB-20BTCB-LP' || depositToken.symbol === '80BSHARE-20WBNB-LP') {\n//   const temp = 'TBD';\n//   return {\n//     dailyAPR: temp,\n//     yearlyAPR: temp,\n//     TVL: temp,\n//   };\n// }\npoolContract=this.contracts[bank.contract];if(bank.depositTokenName===\"BBOND\"){depositTokenValue=this.BOMB;}else{depositTokenValue=depositToken;}_context11.next=7;return this.getDepositTokenPriceInDollars(bank.depositTokenName,depositTokenValue);case 7:depositTokenPrice=_context11.sent;_context11.next=10;return depositToken.balanceOf(bank.address);case 10:stakeInPool=_context11.sent;TVL=Number(depositTokenPrice)*Number(getDisplayBalance(stakeInPool,depositToken.decimal));if(!(bank.earnTokenName==='BOMB')){_context11.next=18;break;}_context11.next=15;return this.getBombStat();case 15:_context11.t0=_context11.sent;_context11.next=21;break;case 18:_context11.next=20;return this.getShareStat();case 20:_context11.t0=_context11.sent;case 21:stat=_context11.t0;_context11.next=24;return this.getTokenPerSecond(bank.earnTokenName,bank.contract,poolContract,bank.depositTokenName);case 24:tokenPerSecond=_context11.sent;tokenPerHour=tokenPerSecond.mul(60).mul(60);totalRewardPricePerYear=Number(stat.priceInDollars)*Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));totalRewardPricePerDay=Number(stat.priceInDollars)*Number(getDisplayBalance(tokenPerHour.mul(24)));totalStakingTokenInPool=Number(depositTokenPrice)*Number(getDisplayBalance(stakeInPool,depositToken.decimal));dailyAPR=totalRewardPricePerDay/totalStakingTokenInPool*100;yearlyAPR=totalRewardPricePerYear/totalStakingTokenInPool*100;return _context11.abrupt(\"return\",{dailyAPR:dailyAPR.toFixed(2).toString(),yearlyAPR:yearlyAPR.toFixed(2).toString(),TVL:TVL.toFixed(2).toString()});case 32:case\"end\":return _context11.stop();}},_callee11,this);}));function getPoolAPRs(_x4){return _getPoolAPRs.apply(this,arguments);}return getPoolAPRs;}()},{key:\"getXbombAPR\",value:function(){var _getXbombAPR=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(){var bombToken,xbombToken,xbombExchange,xbombPercent,xbombPercentTotal,depositTokenPrice,stakeInPool,TVL,startDate,nowDate,difference,days,aprPerDay,dailyAPR,yearlyAPR;return _regeneratorRuntime().wrap(function _callee12$(_context12){while(1)switch(_context12.prev=_context12.next){case 0:if(!(this.myAccount===undefined)){_context12.next=2;break;}return _context12.abrupt(\"return\");case 2:bombToken=this.BOMB;xbombToken=this.XBOMB;_context12.next=6;return this.getXbombExchange();case 6:xbombExchange=_context12.sent;_context12.next=9;return xbombExchange;case 9:xbombPercent=_context12.sent;xbombPercentTotal=Number(xbombPercent)/1000000000000000000*100-100;_context12.next=13;return this.getDepositTokenPriceInDollars(bombToken.symbol,bombToken);case 13:depositTokenPrice=_context12.sent;_context12.next=16;return bombToken.balanceOf(xbombToken.address);case 16:stakeInPool=_context12.sent;TVL=Number(depositTokenPrice)*Number(getDisplayBalance(stakeInPool,bombToken.decimal));startDate=new Date('January 24, 2022');nowDate=new Date(Date.now());difference=nowDate.getTime()-startDate.getTime();days=difference/60/60/24/1000;aprPerDay=xbombPercentTotal/days;// Determine days between now and a date\n// const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n// const totalRewardPricePerYear =\n//   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n// const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n// const totalStakingTokenInPool =\n//   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n// const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n// const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\ndailyAPR=aprPerDay;yearlyAPR=aprPerDay*365;return _context12.abrupt(\"return\",{dailyAPR:dailyAPR.toFixed(2).toString(),yearlyAPR:yearlyAPR.toFixed(2).toString(),TVL:TVL.toFixed(2).toString()});case 26:case\"end\":return _context12.stop();}},_callee12,this);}));function getXbombAPR(){return _getXbombAPR.apply(this,arguments);}return getXbombAPR;}()/**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */},{key:\"getTokenPerSecond\",value:function(){var _getTokenPerSecond=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(earnTokenName,contractName,poolContract,depositTokenName){var _rewardPerSecond,poolStartTime,startDateTime,FOUR_DAYS,rewardPerSecond;return _regeneratorRuntime().wrap(function _callee13$(_context13){while(1)switch(_context13.prev=_context13.next){case 0:if(!(earnTokenName==='BOMB')){_context13.next=32;break;}if(contractName.endsWith('BombRewardPool')){_context13.next=20;break;}_context13.next=4;return poolContract.tSharePerSecond();case 4:_rewardPerSecond=_context13.sent;if(!(depositTokenName==='WBNB')){_context13.next=9;break;}return _context13.abrupt(\"return\",_rewardPerSecond.mul(6000).div(11000).div(24));case 9:if(!(depositTokenName==='CAKE')){_context13.next=13;break;}return _context13.abrupt(\"return\",_rewardPerSecond.mul(2500).div(11000).div(24));case 13:if(!(depositTokenName==='SUSD')){_context13.next=17;break;}return _context13.abrupt(\"return\",_rewardPerSecond.mul(1000).div(11000).div(24));case 17:if(!(depositTokenName==='SVL')){_context13.next=19;break;}return _context13.abrupt(\"return\",_rewardPerSecond.mul(1500).div(11000).div(24));case 19:return _context13.abrupt(\"return\",_rewardPerSecond.div(24));case 20:_context13.next=22;return poolContract.poolStartTime();case 22:poolStartTime=_context13.sent;startDateTime=new Date(poolStartTime.toNumber()*1000);FOUR_DAYS=4*24*60*60*1000;if(!(Date.now()-startDateTime.getTime()>FOUR_DAYS)){_context13.next=29;break;}_context13.next=28;return poolContract.epochBombPerSecond(1);case 28:return _context13.abrupt(\"return\",_context13.sent);case 29:_context13.next=31;return poolContract.epochBombPerSecond(0);case 31:return _context13.abrupt(\"return\",_context13.sent);case 32:_context13.next=34;return poolContract.tSharePerSecond();case 34:rewardPerSecond=_context13.sent;if(!depositTokenName.startsWith('BOMB-BTCB')){_context13.next=39;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(400).div(1000));case 39:if(!depositTokenName.startsWith('BOMB-BSHARE')){_context13.next=43;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(0).div(1000));case 43:if(!depositTokenName.startsWith('BOMB')){_context13.next=47;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(0).div(1000));case 47:if(!depositTokenName.startsWith('BBOND')){_context13.next=51;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(150).div(1000));case 51:if(!depositTokenName.startsWith('BUSM-BUSD')){_context13.next=55;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(50).div(1000));case 55:if(!depositTokenName.startsWith('80BOMB')){_context13.next=59;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(200).div(1000));case 59:if(!depositTokenName.startsWith('80BSHARE')){_context13.next=63;break;}return _context13.abrupt(\"return\",rewardPerSecond.mul(50).div(1000));case 63:return _context13.abrupt(\"return\",rewardPerSecond.mul(150).div(1000));case 64:case\"end\":return _context13.stop();}},_callee13);}));function getTokenPerSecond(_x5,_x6,_x7,_x8){return _getTokenPerSecond.apply(this,arguments);}return getTokenPerSecond;}()/**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */},{key:\"getDepositTokenPriceInDollars\",value:function(){var _getDepositTokenPriceInDollars=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(tokenName,token){var tokenPrice,priceOfOneFtmInDollars;return _regeneratorRuntime().wrap(function _callee14$(_context14){while(1)switch(_context14.prev=_context14.next){case 0:_context14.next=2;return this.getWBNBPriceFromPancakeswap();case 2:priceOfOneFtmInDollars=_context14.sent;if(!(tokenName==='WBNB')){_context14.next=7;break;}tokenPrice=priceOfOneFtmInDollars;_context14.next=54;break;case 7:if(!(tokenName==='BOMB-BTCB-LP')){_context14.next=13;break;}_context14.next=10;return this.getLPTokenPrice(token,this.BOMB,true);case 10:tokenPrice=_context14.sent;_context14.next=54;break;case 13:if(!(tokenName==='BSHARE-BNB-LP')){_context14.next=19;break;}_context14.next=16;return this.getLPTokenPrice(token,this.BSHARE,false);case 16:tokenPrice=_context14.sent;_context14.next=54;break;case 19:if(!(tokenName==='BOMB-BSHARE-LP')){_context14.next=25;break;}_context14.next=22;return this.getLPTokenPrice(token,this.BOMB,true);case 22:tokenPrice=_context14.sent;_context14.next=54;break;case 25:if(!(tokenName==='BUSM-BUSD-LP')){_context14.next=31;break;}_context14.next=28;return this.getBusdLPTokenPrice(token,this.BUSM,true);case 28:tokenPrice=_context14.sent;_context14.next=54;break;case 31:if(!(tokenName==='80BOMB-20BTCB-LP')){_context14.next=37;break;}_context14.next=34;return this.getMaxiLPTokenPrice('0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028');case 34:tokenPrice=_context14.sent;_context14.next=54;break;case 37:if(!(tokenName==='80BSHARE-20WBNB-LP')){_context14.next=43;break;}_context14.next=40;return this.getMaxiLPTokenPrice('0x2c374ed1575e5c2c02c569f627299e902a1972cb000200000000000000000027');case 40:tokenPrice=_context14.sent;_context14.next=54;break;case 43:if(!(tokenName==='BBOND')){_context14.next=50;break;}_context14.next=46;return this.getTokenPriceFromPancakeswap(this.BOMB);case 46:tokenPrice=_context14.sent;tokenPrice=(Number(tokenPrice)*Number(priceOfOneFtmInDollars)).toString();_context14.next=54;break;case 50:_context14.next=52;return this.getTokenPriceFromPancakeswap(token);case 52:tokenPrice=_context14.sent;tokenPrice=(Number(tokenPrice)*Number(priceOfOneFtmInDollars)).toString();case 54:return _context14.abrupt(\"return\",tokenPrice);case 55:case\"end\":return _context14.stop();}},_callee14,this);}));function getDepositTokenPriceInDollars(_x9,_x10){return _getDepositTokenPriceInDollars.apply(this,arguments);}return getDepositTokenPriceInDollars;}()//===================================================================\n//===================== GET ASSET STATS =============================\n//=========================== END ===================================\n//===================================================================\n},{key:\"getCurrentEpoch\",value:function(){var _getCurrentEpoch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(){var Treasury;return _regeneratorRuntime().wrap(function _callee15$(_context15){while(1)switch(_context15.prev=_context15.next){case 0:Treasury=this.contracts.Treasury;return _context15.abrupt(\"return\",Treasury.epoch());case 2:case\"end\":return _context15.stop();}},_callee15,this);}));function getCurrentEpoch(){return _getCurrentEpoch.apply(this,arguments);}return getCurrentEpoch;}()},{key:\"getBondOraclePriceInLastTWAP\",value:function(){var _getBondOraclePriceInLastTWAP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(){var Treasury;return _regeneratorRuntime().wrap(function _callee16$(_context16){while(1)switch(_context16.prev=_context16.next){case 0:Treasury=this.contracts.Treasury;return _context16.abrupt(\"return\",Treasury.getBondPremiumRate());case 2:case\"end\":return _context16.stop();}},_callee16,this);}));function getBondOraclePriceInLastTWAP(){return _getBondOraclePriceInLastTWAP.apply(this,arguments);}return getBondOraclePriceInLastTWAP;}()/**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */},{key:\"buyBonds\",value:function(){var _buyBonds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(amount){var Treasury,treasuryBombPrice;return _regeneratorRuntime().wrap(function _callee17$(_context17){while(1)switch(_context17.prev=_context17.next){case 0:Treasury=this.contracts.Treasury;_context17.next=3;return Treasury.getBombPrice();case 3:treasuryBombPrice=_context17.sent;_context17.next=6;return Treasury.buyBonds(decimalToBalance(amount),treasuryBombPrice);case 6:return _context17.abrupt(\"return\",_context17.sent);case 7:case\"end\":return _context17.stop();}},_callee17,this);}));function buyBonds(_x11){return _buyBonds.apply(this,arguments);}return buyBonds;}()/**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */},{key:\"redeemBonds\",value:function(){var _redeemBonds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18(amount){var Treasury,priceForBomb;return _regeneratorRuntime().wrap(function _callee18$(_context18){while(1)switch(_context18.prev=_context18.next){case 0:Treasury=this.contracts.Treasury;_context18.next=3;return Treasury.getBombPrice();case 3:priceForBomb=_context18.sent;_context18.next=6;return Treasury.redeemBonds(decimalToBalance(amount),priceForBomb);case 6:return _context18.abrupt(\"return\",_context18.sent);case 7:case\"end\":return _context18.stop();}},_callee18,this);}));function redeemBonds(_x12){return _redeemBonds.apply(this,arguments);}return redeemBonds;}()},{key:\"getTotalValueLocked\",value:function(){var _getTotalValueLocked=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19(){var totalValue,_i4,_Object$values,bankInfo,pool,token,tokenPrice,tokenAmountInPool,value,poolValue,BSHAREPrice,BOMBPrice,boardroomtShareBalanceOf,bombStakeBalanceOf,boardroomTVL,bombTVL;return _regeneratorRuntime().wrap(function _callee19$(_context19){while(1)switch(_context19.prev=_context19.next){case 0:totalValue=0;_i4=0,_Object$values=Object.values(bankDefinitions);case 2:if(!(_i4<_Object$values.length)){_context19.next=18;break;}bankInfo=_Object$values[_i4];pool=this.contracts[bankInfo.contract];token=this.externalTokens[bankInfo.depositTokenName];_context19.next=8;return this.getDepositTokenPriceInDollars(bankInfo.depositTokenName,token);case 8:tokenPrice=_context19.sent;_context19.next=11;return token.balanceOf(pool.address);case 11:tokenAmountInPool=_context19.sent;value=Number(getDisplayBalance(tokenAmountInPool,token.decimal))*Number(tokenPrice);poolValue=Number.isNaN(value)?0:value;totalValue+=poolValue;case 15:_i4++;_context19.next=2;break;case 18:_context19.next=20;return this.getShareStat();case 20:BSHAREPrice=_context19.sent.priceInDollars;_context19.next=23;return this.getBombStat();case 23:BOMBPrice=_context19.sent.priceInDollars;_context19.next=26;return this.BSHARE.balanceOf(this.currentBoardroom().address);case 26:boardroomtShareBalanceOf=_context19.sent;_context19.next=29;return this.BOMB.balanceOf(this.XBOMB.address);case 29:bombStakeBalanceOf=_context19.sent;boardroomTVL=Number(getDisplayBalance(boardroomtShareBalanceOf,this.BSHARE.decimal))*Number(BSHAREPrice);bombTVL=Number(getDisplayBalance(bombStakeBalanceOf,this.BOMB.decimal))*Number(BOMBPrice);return _context19.abrupt(\"return\",totalValue+boardroomTVL+bombTVL);case 33:case\"end\":return _context19.stop();}},_callee19,this);}));function getTotalValueLocked(){return _getTotalValueLocked.apply(this,arguments);}return getTotalValueLocked;}()/**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */},{key:\"getLPTokenPrice\",value:function(){var _getLPTokenPrice=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20(lpToken,token,isBomb){var totalSupply,tokenSupply,stat,priceOfToken,tokenInLP,tokenPrice;return _regeneratorRuntime().wrap(function _callee20$(_context20){while(1)switch(_context20.prev=_context20.next){case 0:_context20.t0=getFullDisplayBalance;_context20.next=3;return lpToken.totalSupply();case 3:_context20.t1=_context20.sent;_context20.t2=lpToken.decimal;totalSupply=(0,_context20.t0)(_context20.t1,_context20.t2);_context20.t3=getFullDisplayBalance;_context20.next=9;return token.balanceOf(lpToken.address);case 9:_context20.t4=_context20.sent;_context20.t5=token.decimal;tokenSupply=(0,_context20.t3)(_context20.t4,_context20.t5);if(!(isBomb===true)){_context20.next=18;break;}_context20.next=15;return this.getBombStat();case 15:_context20.t6=_context20.sent;_context20.next=21;break;case 18:_context20.next=20;return this.getShareStat();case 20:_context20.t6=_context20.sent;case 21:stat=_context20.t6;priceOfToken=stat.priceInDollars;tokenInLP=Number(tokenSupply)/Number(totalSupply);tokenPrice=(Number(priceOfToken)*tokenInLP*2//We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n).toString();return _context20.abrupt(\"return\",tokenPrice);case 26:case\"end\":return _context20.stop();}},_callee20,this);}));function getLPTokenPrice(_x13,_x14,_x15){return _getLPTokenPrice.apply(this,arguments);}return getLPTokenPrice;}()/**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */},{key:\"getBusdLPTokenPrice\",value:function(){var _getBusdLPTokenPrice=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21(lpToken,token,isBomb){var totalSupply,tokenSupply,priceToken,priceOfToken,tokenInLP,tokenPrice;return _regeneratorRuntime().wrap(function _callee21$(_context21){while(1)switch(_context21.prev=_context21.next){case 0:_context21.t0=getFullDisplayBalance;_context21.next=3;return lpToken.totalSupply();case 3:_context21.t1=_context21.sent;_context21.t2=lpToken.decimal;totalSupply=(0,_context21.t0)(_context21.t1,_context21.t2);_context21.t3=getFullDisplayBalance;_context21.next=9;return token.balanceOf(lpToken.address);case 9:_context21.t4=_context21.sent;_context21.t5=token.decimal;tokenSupply=(0,_context21.t3)(_context21.t4,_context21.t5);_context21.next=14;return this.getTokenPriceFromPancakeswapBUSD(this.BUSM);case 14:priceToken=_context21.sent;priceOfToken=Number(priceToken);tokenInLP=Number(tokenSupply)/Number(totalSupply);tokenPrice=(Number(priceOfToken)*tokenInLP*2//We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n).toString();return _context21.abrupt(\"return\",tokenPrice);case 19:case\"end\":return _context21.stop();}},_callee21,this);}));function getBusdLPTokenPrice(_x16,_x17,_x18){return _getBusdLPTokenPrice.apply(this,arguments);}return getBusdLPTokenPrice;}()},{key:\"getMaxiLPTokenPrice\",value:function(){var _getMaxiLPTokenPrice=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(maxiPool){var bombmaxi,totalShares,totalLiquidity,tokenInLP,tokenPrice;return _regeneratorRuntime().wrap(function _callee22$(_context22){while(1)switch(_context22.prev=_context22.next){case 0:_context22.next=2;return this.getBombMaxiStats(maxiPool);case 2:bombmaxi=_context22.sent;_context22.next=5;return bombmaxi.totalShares;case 5:totalShares=_context22.sent;_context22.next=8;return bombmaxi.totalLiquidity;case 8:totalLiquidity=_context22.sent;// const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\ntokenInLP=Number(totalLiquidity)/Number(totalShares);tokenPrice=tokenInLP//We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n.toString();return _context22.abrupt(\"return\",tokenPrice);case 12:case\"end\":return _context22.stop();}},_callee22,this);}));function getMaxiLPTokenPrice(_x19){return _getMaxiLPTokenPrice.apply(this,arguments);}return getMaxiLPTokenPrice;}()},{key:\"earnedFromBank\",value:function(){var _earnedFromBank=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(poolName,earnTokenName,poolId){var account,pool,_args23=arguments;return _regeneratorRuntime().wrap(function _callee23$(_context23){while(1)switch(_context23.prev=_context23.next){case 0:account=_args23.length>3&&_args23[3]!==undefined?_args23[3]:this.myAccount;pool=this.contracts[poolName];_context23.prev=2;if(!(earnTokenName==='BOMB')){_context23.next=9;break;}_context23.next=6;return pool.pendingBOMB(poolId,account);case 6:return _context23.abrupt(\"return\",_context23.sent);case 9:_context23.next=11;return pool.pendingShare(poolId,account);case 11:return _context23.abrupt(\"return\",_context23.sent);case 12:_context23.next=18;break;case 14:_context23.prev=14;_context23.t0=_context23[\"catch\"](2);console.error(\"Failed to call pendingShare() on pool \".concat(pool.address,\": \").concat(_context23.t0.stack));return _context23.abrupt(\"return\",BigNumber.from(0));case 18:case\"end\":return _context23.stop();}},_callee23,this,[[2,14]]);}));function earnedFromBank(_x20,_x21,_x22){return _earnedFromBank.apply(this,arguments);}return earnedFromBank;}()},{key:\"stakedBalanceOnBank\",value:function(){var _stakedBalanceOnBank=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(poolName,poolId){var account,pool,userInfo,_args24=arguments;return _regeneratorRuntime().wrap(function _callee24$(_context24){while(1)switch(_context24.prev=_context24.next){case 0:account=_args24.length>2&&_args24[2]!==undefined?_args24[2]:this.myAccount;pool=this.contracts[poolName];_context24.prev=2;_context24.next=5;return pool.userInfo(poolId,account);case 5:userInfo=_context24.sent;_context24.next=8;return userInfo.amount;case 8:return _context24.abrupt(\"return\",_context24.sent);case 11:_context24.prev=11;_context24.t0=_context24[\"catch\"](2);console.error(\"Failed to call userInfo() on pool \".concat(pool.address,\": \").concat(_context24.t0.stack));return _context24.abrupt(\"return\",BigNumber.from(0));case 15:case\"end\":return _context24.stop();}},_callee24,this,[[2,11]]);}));function stakedBalanceOnBank(_x23,_x24){return _stakedBalanceOnBank.apply(this,arguments);}return stakedBalanceOnBank;}()/**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */},{key:\"stake\",value:function(){var _stake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(poolName,poolId,amount){var pool;return _regeneratorRuntime().wrap(function _callee25$(_context25){while(1)switch(_context25.prev=_context25.next){case 0:pool=this.contracts[poolName];_context25.next=3;return pool.deposit(poolId,amount);case 3:return _context25.abrupt(\"return\",_context25.sent);case 4:case\"end\":return _context25.stop();}},_callee25,this);}));function stake(_x25,_x26,_x27){return _stake.apply(this,arguments);}return stake;}()/**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */},{key:\"unstake\",value:function(){var _unstake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26(poolName,poolId,amount){var pool;return _regeneratorRuntime().wrap(function _callee26$(_context26){while(1)switch(_context26.prev=_context26.next){case 0:pool=this.contracts[poolName];_context26.next=3;return pool.withdraw(poolId,amount);case 3:return _context26.abrupt(\"return\",_context26.sent);case 4:case\"end\":return _context26.stop();}},_callee26,this);}));function unstake(_x28,_x29,_x30){return _unstake.apply(this,arguments);}return unstake;}()/**\n   * Transfers earned token reward from given pool to my account.\n   */},{key:\"harvest\",value:function(){var _harvest=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27(poolName,poolId){var pool;return _regeneratorRuntime().wrap(function _callee27$(_context27){while(1)switch(_context27.prev=_context27.next){case 0:pool=this.contracts[poolName];//By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n_context27.next=3;return pool.withdraw(poolId,0);case 3:return _context27.abrupt(\"return\",_context27.sent);case 4:case\"end\":return _context27.stop();}},_callee27,this);}));function harvest(_x31,_x32){return _harvest.apply(this,arguments);}return harvest;}()/**\n   * Harvests and withdraws deposited tokens from the pool.\n   */},{key:\"exit\",value:function(){var _exit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28(poolName,poolId){var account,pool,userInfo,_args28=arguments;return _regeneratorRuntime().wrap(function _callee28$(_context28){while(1)switch(_context28.prev=_context28.next){case 0:account=_args28.length>2&&_args28[2]!==undefined?_args28[2]:this.myAccount;pool=this.contracts[poolName];_context28.next=4;return pool.userInfo(poolId,account);case 4:userInfo=_context28.sent;_context28.next=7;return pool.withdraw(poolId,userInfo.amount);case 7:return _context28.abrupt(\"return\",_context28.sent);case 8:case\"end\":return _context28.stop();}},_callee28,this);}));function exit(_x33,_x34){return _exit.apply(this,arguments);}return exit;}()},{key:\"fetchBoardroomVersionOfUser\",value:function(){var _fetchBoardroomVersionOfUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29(){return _regeneratorRuntime().wrap(function _callee29$(_context29){while(1)switch(_context29.prev=_context29.next){case 0:return _context29.abrupt(\"return\",'latest');case 1:case\"end\":return _context29.stop();}},_callee29);}));function fetchBoardroomVersionOfUser(){return _fetchBoardroomVersionOfUser.apply(this,arguments);}return fetchBoardroomVersionOfUser;}()},{key:\"currentBoardroom\",value:function currentBoardroom(){if(!this.boardroomVersionOfUser){//throw new Error('you must unlock the wallet to continue.');\n}return this.contracts.Boardroom;}},{key:\"isOldBoardroomMember\",value:function isOldBoardroomMember(){return this.boardroomVersionOfUser!=='latest';}},{key:\"getTokenPriceFromPancakeswap\",value:function(){var _getTokenPriceFromPancakeswap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30(tokenContract){var ready,WBNB,wftm,token,wftmToToken,priceInBUSD;return _regeneratorRuntime().wrap(function _callee30$(_context30){while(1)switch(_context30.prev=_context30.next){case 0:_context30.next=2;return this.provider.ready;case 2:ready=_context30.sent;if(ready){_context30.next=5;break;}return _context30.abrupt(\"return\");case 5://const { chainId } = this.config;\nWBNB=this.config.externalTokens.WBNB;wftm=new Token(56,WBNB[0],WBNB[1],'WBNB');token=new Token(56,tokenContract.address,tokenContract.decimal,tokenContract.symbol);_context30.prev=8;_context30.next=11;return Fetcher.fetchPairData(wftm,token,this.provider);case 11:wftmToToken=_context30.sent;priceInBUSD=new Route([wftmToToken],token);return _context30.abrupt(\"return\",priceInBUSD.midPrice.toFixed(4));case 16:_context30.prev=16;_context30.t0=_context30[\"catch\"](8);console.error(\"Failed to fetch token price of \".concat(tokenContract.symbol,\": \").concat(_context30.t0));case 19:case\"end\":return _context30.stop();}},_callee30,this,[[8,16]]);}));function getTokenPriceFromPancakeswap(_x35){return _getTokenPriceFromPancakeswap.apply(this,arguments);}return getTokenPriceFromPancakeswap;}()},{key:\"getTokenPriceFromPancakeswapBUSD\",value:function(){var _getTokenPriceFromPancakeswapBUSD=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31(tokenContract){var ready,BUSD,wftm,token,wftmToToken,priceInBUSD;return _regeneratorRuntime().wrap(function _callee31$(_context31){while(1)switch(_context31.prev=_context31.next){case 0:_context31.next=2;return this.provider.ready;case 2:ready=_context31.sent;if(ready){_context31.next=5;break;}return _context31.abrupt(\"return\");case 5://const { chainId } = this.config;\nBUSD=this.config.externalTokens.BUSD;wftm=new Token(56,BUSD[0],BUSD[1],'BUSD');token=new Token(56,tokenContract.address,tokenContract.decimal,tokenContract.symbol);_context31.prev=8;_context31.next=11;return Fetcher.fetchPairData(wftm,token,this.provider);case 11:wftmToToken=_context31.sent;priceInBUSD=new Route([wftmToToken],token);return _context31.abrupt(\"return\",priceInBUSD.midPrice.toFixed(4));case 16:_context31.prev=16;_context31.t0=_context31[\"catch\"](8);console.error(\"Failed to fetch token price of \".concat(tokenContract.symbol,\": \").concat(_context31.t0));case 19:case\"end\":return _context31.stop();}},_callee31,this,[[8,16]]);}));function getTokenPriceFromPancakeswapBUSD(_x36){return _getTokenPriceFromPancakeswapBUSD.apply(this,arguments);}return getTokenPriceFromPancakeswapBUSD;}()},{key:\"getTokenPriceFromPancakeswapBTC\",value:function(){var _getTokenPriceFromPancakeswapBTC=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32(tokenContract){var ready,btcb,token,wftmToToken,priceInBUSD,priceForPeg;return _regeneratorRuntime().wrap(function _callee32$(_context32){while(1)switch(_context32.prev=_context32.next){case 0:_context32.next=2;return this.provider.ready;case 2:ready=_context32.sent;if(ready){_context32.next=5;break;}return _context32.abrupt(\"return\");case 5://const { chainId } = this.config;\n// const {WBNB} = this.config.externalTokens;\n// const wbnb = new Token(56, WBNB[0], WBNB[1]);\nbtcb=new Token(56,this.BTC.address,this.BTC.decimal,'BTCB','BTCB');token=new Token(56,tokenContract.address,tokenContract.decimal,tokenContract.symbol);_context32.prev=7;_context32.next=10;return Fetcher.fetchPairData(btcb,token,this.provider);case 10:wftmToToken=_context32.sent;priceInBUSD=new Route([wftmToToken],token);//   console.log('priceInBUSDBTC', priceInBUSD.midPrice.toFixed(12));\npriceForPeg=Number(priceInBUSD.midPrice.toFixed(12))*10000;return _context32.abrupt(\"return\",priceForPeg.toFixed(4));case 16:_context32.prev=16;_context32.t0=_context32[\"catch\"](7);console.error(\"Failed to fetch token price of \".concat(tokenContract.symbol,\": \").concat(_context32.t0));case 19:case\"end\":return _context32.stop();}},_callee32,this,[[7,16]]);}));function getTokenPriceFromPancakeswapBTC(_x37){return _getTokenPriceFromPancakeswapBTC.apply(this,arguments);}return getTokenPriceFromPancakeswapBTC;}()},{key:\"getTokenPriceFromPancakeswapBOMBUSD\",value:function(){var _getTokenPriceFromPancakeswapBOMBUSD=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33(){var ready,btcb,token,wftmToToken,priceInBUSD,priceForPeg;return _regeneratorRuntime().wrap(function _callee33$(_context33){while(1)switch(_context33.prev=_context33.next){case 0:_context33.next=2;return this.provider.ready;case 2:ready=_context33.sent;if(ready){_context33.next=5;break;}return _context33.abrupt(\"return\");case 5://const { chainId } = this.config;\n//const {WBNB} = this.config.externalTokens;\n//  const wbnb = new Token(56, WBNB[0], WBNB[1]);\nbtcb=new Token(56,this.BTC.address,this.BTC.decimal,'BTCB','BTCB');token=new Token(56,this.BOMB.address,this.BOMB.decimal,this.BOMB.symbol);_context33.prev=7;_context33.next=10;return Fetcher.fetchPairData(btcb,token,this.provider);case 10:wftmToToken=_context33.sent;priceInBUSD=new Route([wftmToToken],token);// console.log('test', priceInBUSD.midPrice.toFixed(12));\npriceForPeg=Number(priceInBUSD.midPrice.toFixed(12))*10000;return _context33.abrupt(\"return\",priceForPeg.toFixed(4));case 16:_context33.prev=16;_context33.t0=_context33[\"catch\"](7);console.error(\"Failed to fetch token price of \".concat(this.BOMB.symbol,\": \").concat(_context33.t0));case 19:case\"end\":return _context33.stop();}},_callee33,this,[[7,16]]);}));function getTokenPriceFromPancakeswapBOMBUSD(){return _getTokenPriceFromPancakeswapBOMBUSD.apply(this,arguments);}return getTokenPriceFromPancakeswapBOMBUSD;}()// async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n//   const ready = await this.provider.ready;\n//   if (!ready) return;\n//   const { chainId } = this.config;\n//   const { WBNB } = this.externalTokens;\n//   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\n//   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n//   try {\n//     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n//     const liquidityToken = wftmToToken.liquidityToken;\n//     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\n//     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\n//     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n//     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n//     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n//     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n//     return priceOfShiba.toString();\n//   } catch (err) {\n//     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n//   }\n// }\n},{key:\"getWBNBPriceFromPancakeswap\",value:function(){var _getWBNBPriceFromPancakeswap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34(){var ready,_this$externalTokens,WBNB,FUSDT,fusdt_wftm_lp_pair,ftm_amount_BN,ftm_amount,fusdt_amount_BN,fusdt_amount;return _regeneratorRuntime().wrap(function _callee34$(_context34){while(1)switch(_context34.prev=_context34.next){case 0:_context34.next=2;return this.provider.ready;case 2:ready=_context34.sent;if(ready){_context34.next=5;break;}return _context34.abrupt(\"return\");case 5:_this$externalTokens=this.externalTokens,WBNB=_this$externalTokens.WBNB,FUSDT=_this$externalTokens.FUSDT;_context34.prev=6;fusdt_wftm_lp_pair=this.externalTokens['USDT-BNB-LP'];_context34.next=10;return WBNB.balanceOf(fusdt_wftm_lp_pair.address);case 10:ftm_amount_BN=_context34.sent;ftm_amount=Number(getFullDisplayBalance(ftm_amount_BN,WBNB.decimal));_context34.next=14;return FUSDT.balanceOf(fusdt_wftm_lp_pair.address);case 14:fusdt_amount_BN=_context34.sent;fusdt_amount=Number(getFullDisplayBalance(fusdt_amount_BN,FUSDT.decimal));return _context34.abrupt(\"return\",(fusdt_amount/ftm_amount).toString());case 19:_context34.prev=19;_context34.t0=_context34[\"catch\"](6);console.error(\"Failed to fetch token price of WBNB: \".concat(_context34.t0));case 22:case\"end\":return _context34.stop();}},_callee34,this,[[6,19]]);}));function getWBNBPriceFromPancakeswap(){return _getWBNBPriceFromPancakeswap.apply(this,arguments);}return getWBNBPriceFromPancakeswap;}()},{key:\"getBTCBPriceFromPancakeswap\",value:function(){var _getBTCBPriceFromPancakeswap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(){var ready,BTCB,btcPriceInBNB,wbnbPrice,btcprice;return _regeneratorRuntime().wrap(function _callee35$(_context35){while(1)switch(_context35.prev=_context35.next){case 0:_context35.next=2;return this.provider.ready;case 2:ready=_context35.sent;if(ready){_context35.next=5;break;}return _context35.abrupt(\"return\");case 5:BTCB=this.externalTokens.BTCB;_context35.prev=6;_context35.next=9;return this.getTokenPriceFromPancakeswap(BTCB);case 9:btcPriceInBNB=_context35.sent;_context35.next=12;return this.getWBNBPriceFromPancakeswap();case 12:wbnbPrice=_context35.sent;btcprice=(Number(btcPriceInBNB)*Number(wbnbPrice)).toFixed(2).toString();//console.log('btcprice', btcprice);\nreturn _context35.abrupt(\"return\",btcprice);case 17:_context35.prev=17;_context35.t0=_context35[\"catch\"](6);console.error(\"Failed to fetch token price of BTCB: \".concat(_context35.t0));case 20:case\"end\":return _context35.stop();}},_callee35,this,[[6,17]]);}));function getBTCBPriceFromPancakeswap(){return _getBTCBPriceFromPancakeswap.apply(this,arguments);}return getBTCBPriceFromPancakeswap;}()// async getBTCBPriceFromPancakeswap(): Promise<string> {\n//   const ready = await this.provider.ready;\n//   if (!ready) return;\n//   const { BTCB, FUSDT } = this.externalTokens;\n//   try {\n//     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\n//     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\n//     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\n//     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\n//     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n//     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\n//     return (fusdt_amount / ftm_amount).toString();\n//     console.log('BTCB price');\n//   } catch (err) {\n//     console.error(`Failed to fetch token price of BTCB: ${err}`);\n//   }\n// }\n//===================================================================\n//===================================================================\n//===================== MASONRY METHODS =============================\n//===================================================================\n//===================================================================\n},{key:\"getBoardroomAPR\",value:function(){var _getBoardroomAPR=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36(){var Boardroom,latestSnapshotIndex,lastHistory,lastRewardsReceived,BSHAREPrice,BOMBPrice,epochRewardsPerShare,amountOfRewardsPerDay,boardroomtShareBalanceOf,boardroomTVL,realAPR;return _regeneratorRuntime().wrap(function _callee36$(_context36){while(1)switch(_context36.prev=_context36.next){case 0:Boardroom=this.currentBoardroom();_context36.next=3;return Boardroom.latestSnapshotIndex();case 3:latestSnapshotIndex=_context36.sent;_context36.next=6;return Boardroom.boardroomHistory(latestSnapshotIndex);case 6:lastHistory=_context36.sent;lastRewardsReceived=lastHistory[1];_context36.next=10;return this.getShareStat();case 10:BSHAREPrice=_context36.sent.priceInDollars;_context36.next=13;return this.getBombStat();case 13:BOMBPrice=_context36.sent.priceInDollars;epochRewardsPerShare=lastRewardsReceived/1e18;//Mgod formula\namountOfRewardsPerDay=epochRewardsPerShare*Number(BOMBPrice)*4;_context36.next=18;return this.BSHARE.balanceOf(Boardroom.address);case 18:boardroomtShareBalanceOf=_context36.sent;boardroomTVL=Number(getDisplayBalance(boardroomtShareBalanceOf,this.BSHARE.decimal))*Number(BSHAREPrice);realAPR=amountOfRewardsPerDay*100/boardroomTVL*365;return _context36.abrupt(\"return\",realAPR);case 22:case\"end\":return _context36.stop();}},_callee36,this);}));function getBoardroomAPR(){return _getBoardroomAPR.apply(this,arguments);}return getBoardroomAPR;}()},{key:\"getBombStakeAPR\",value:function(){var _getBombStakeAPR=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37(){var Boardroom,latestSnapshotIndex,lastHistory,lastRewardsReceived,BOMBPrice,epochRewardsPerShare,amountOfRewardsPerDay,xBombBombBalanceOf,bombTVL,realAPR;return _regeneratorRuntime().wrap(function _callee37$(_context37){while(1)switch(_context37.prev=_context37.next){case 0:Boardroom=this.currentBoardroom();_context37.next=3;return Boardroom.latestSnapshotIndex();case 3:latestSnapshotIndex=_context37.sent;_context37.next=6;return Boardroom.boardroomHistory(latestSnapshotIndex);case 6:lastHistory=_context37.sent;lastRewardsReceived=lastHistory[1];_context37.next=10;return this.getBombStat();case 10:BOMBPrice=_context37.sent.priceInDollars;epochRewardsPerShare=lastRewardsReceived/1e18;//Mgod formula\namountOfRewardsPerDay=epochRewardsPerShare*Number(BOMBPrice)*4;_context37.next=15;return this.BOMB.balanceOf(this.XBOMB.address);case 15:xBombBombBalanceOf=_context37.sent;bombTVL=Number(getDisplayBalance(xBombBombBalanceOf,this.XBOMB.decimal))*Number(BOMBPrice);realAPR=amountOfRewardsPerDay*100*0.2/bombTVL*365;return _context37.abrupt(\"return\",realAPR);case 19:case\"end\":return _context37.stop();}},_callee37,this);}));function getBombStakeAPR(){return _getBombStakeAPR.apply(this,arguments);}return getBombStakeAPR;}()/**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */},{key:\"canUserClaimRewardFromBoardroom\",value:function(){var _canUserClaimRewardFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38(){var Boardroom;return _regeneratorRuntime().wrap(function _callee38$(_context38){while(1)switch(_context38.prev=_context38.next){case 0:Boardroom=this.currentBoardroom();_context38.next=3;return Boardroom.canClaimReward(this.myAccount);case 3:return _context38.abrupt(\"return\",_context38.sent);case 4:case\"end\":return _context38.stop();}},_callee38,this);}));function canUserClaimRewardFromBoardroom(){return _canUserClaimRewardFromBoardroom.apply(this,arguments);}return canUserClaimRewardFromBoardroom;}()/**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */},{key:\"canUserUnstakeFromBoardroom\",value:function(){var _canUserUnstakeFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39(){var Boardroom,canWithdraw,stakedAmount,notStaked,result;return _regeneratorRuntime().wrap(function _callee39$(_context39){while(1)switch(_context39.prev=_context39.next){case 0:Boardroom=this.currentBoardroom();_context39.next=3;return Boardroom.canWithdraw(this.myAccount);case 3:canWithdraw=_context39.sent;_context39.next=6;return this.getStakedSharesOnBoardroom();case 6:stakedAmount=_context39.sent;notStaked=Number(getDisplayBalance(stakedAmount,this.BSHARE.decimal))===0;result=notStaked?true:canWithdraw;return _context39.abrupt(\"return\",result);case 10:case\"end\":return _context39.stop();}},_callee39,this);}));function canUserUnstakeFromBoardroom(){return _canUserUnstakeFromBoardroom.apply(this,arguments);}return canUserUnstakeFromBoardroom;}()},{key:\"timeUntilClaimRewardFromBoardroom\",value:function(){var _timeUntilClaimRewardFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee40(){return _regeneratorRuntime().wrap(function _callee40$(_context40){while(1)switch(_context40.prev=_context40.next){case 0:return _context40.abrupt(\"return\",BigNumber.from(0));case 1:case\"end\":return _context40.stop();}},_callee40);}));function timeUntilClaimRewardFromBoardroom(){return _timeUntilClaimRewardFromBoardroom.apply(this,arguments);}return timeUntilClaimRewardFromBoardroom;}()},{key:\"getTotalStakedInBoardroom\",value:function(){var _getTotalStakedInBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee41(){var Boardroom;return _regeneratorRuntime().wrap(function _callee41$(_context41){while(1)switch(_context41.prev=_context41.next){case 0:Boardroom=this.currentBoardroom();_context41.next=3;return Boardroom.totalSupply();case 3:return _context41.abrupt(\"return\",_context41.sent);case 4:case\"end\":return _context41.stop();}},_callee41,this);}));function getTotalStakedInBoardroom(){return _getTotalStakedInBoardroom.apply(this,arguments);}return getTotalStakedInBoardroom;}()},{key:\"stakeShareToBoardroom\",value:function(){var _stakeShareToBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee42(amount){var Boardroom;return _regeneratorRuntime().wrap(function _callee42$(_context42){while(1)switch(_context42.prev=_context42.next){case 0:if(!this.isOldBoardroomMember()){_context42.next=2;break;}throw new Error(\"you're using old boardroom. please withdraw and deposit the BSHARE again.\");case 2:Boardroom=this.currentBoardroom();_context42.next=5;return Boardroom.stake(decimalToBalance(amount));case 5:return _context42.abrupt(\"return\",_context42.sent);case 6:case\"end\":return _context42.stop();}},_callee42,this);}));function stakeShareToBoardroom(_x38){return _stakeShareToBoardroom.apply(this,arguments);}return stakeShareToBoardroom;}()},{key:\"stakeToBomb\",value:function(){var _stakeToBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee43(amount){var Xbomb;return _regeneratorRuntime().wrap(function _callee43$(_context43){while(1)switch(_context43.prev=_context43.next){case 0:Xbomb=this.contracts.xBOMB;_context43.next=3;return Xbomb.enter(decimalToBalance(amount));case 3:return _context43.abrupt(\"return\",_context43.sent);case 4:case\"end\":return _context43.stop();}},_callee43,this);}));function stakeToBomb(_x39){return _stakeToBomb.apply(this,arguments);}return stakeToBomb;}()},{key:\"redeemFromBomb\",value:function(){var _redeemFromBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee44(amount){var BombRouter,expiry;return _regeneratorRuntime().wrap(function _callee44$(_context44){while(1)switch(_context44.prev=_context44.next){case 0:BombRouter=this.contracts.BombRouter;expiry=new Date(Date.now()+2880);_context44.next=4;return BombRouter.redeem(this.BBOMB_BOMB.address,decimalToBalance(amount),this.myAccount,expiry.getTime(),'0x');case 4:return _context44.abrupt(\"return\",_context44.sent);case 5:case\"end\":return _context44.stop();}},_callee44,this);}));function redeemFromBomb(_x40){return _redeemFromBomb.apply(this,arguments);}return redeemFromBomb;}()},{key:\"redeemFromBtcb\",value:function(){var _redeemFromBtcb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee45(amount){var BombRouter,expiry;return _regeneratorRuntime().wrap(function _callee45$(_context45){while(1)switch(_context45.prev=_context45.next){case 0:BombRouter=this.contracts.BombRouter;expiry=new Date(Date.now()+2880);_context45.next=4;return BombRouter.redeem(this.BBOMB_BTCB.address,decimalToBalance(amount),this.myAccount,expiry.getTime(),'0x');case 4:return _context45.abrupt(\"return\",_context45.sent);case 5:case\"end\":return _context45.stop();}},_callee45,this);}));function redeemFromBtcb(_x41){return _redeemFromBtcb.apply(this,arguments);}return redeemFromBtcb;}()},{key:\"supplyToBtcb\",value:function(){var _supplyToBtcb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee46(amount){var BombRouter,expiry;return _regeneratorRuntime().wrap(function _callee46$(_context46){while(1)switch(_context46.prev=_context46.next){case 0:BombRouter=this.contracts.BombRouter;expiry=new Date(Date.now()+2880);_context46.next=4;return BombRouter.mint(this.BBOMB_BTCB.address,decimalToBalance(amount),this.myAccount,expiry.getTime());case 4:return _context46.abrupt(\"return\",_context46.sent);case 5:case\"end\":return _context46.stop();}},_callee46,this);}));function supplyToBtcb(_x42){return _supplyToBtcb.apply(this,arguments);}return supplyToBtcb;}()},{key:\"supplyToBomb\",value:function(){var _supplyToBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee47(amount){var BombRouter,expiry;return _regeneratorRuntime().wrap(function _callee47$(_context47){while(1)switch(_context47.prev=_context47.next){case 0:BombRouter=this.contracts.BombRouter;expiry=new Date(Date.now()+2880);_context47.next=4;return BombRouter.mint(this.BBOMB_BOMB.address,decimalToBalance(amount),this.myAccount,expiry.getTime());case 4:return _context47.abrupt(\"return\",_context47.sent);case 5:case\"end\":return _context47.stop();}},_callee47,this);}));function supplyToBomb(_x43){return _supplyToBomb.apply(this,arguments);}return supplyToBomb;}()},{key:\"getStakedSharesOnBoardroom\",value:function(){var _getStakedSharesOnBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee48(){var Boardroom;return _regeneratorRuntime().wrap(function _callee48$(_context48){while(1)switch(_context48.prev=_context48.next){case 0:Boardroom=this.currentBoardroom();if(!(this.boardroomVersionOfUser==='v1')){_context48.next=5;break;}_context48.next=4;return Boardroom.getShareOf(this.myAccount);case 4:return _context48.abrupt(\"return\",_context48.sent);case 5:_context48.next=7;return Boardroom.balanceOf(this.myAccount);case 7:return _context48.abrupt(\"return\",_context48.sent);case 8:case\"end\":return _context48.stop();}},_callee48,this);}));function getStakedSharesOnBoardroom(){return _getStakedSharesOnBoardroom.apply(this,arguments);}return getStakedSharesOnBoardroom;}()},{key:\"getStakedBomb\",value:function(){var _getStakedBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee49(){var Xbomb;return _regeneratorRuntime().wrap(function _callee49$(_context49){while(1)switch(_context49.prev=_context49.next){case 0:Xbomb=this.contracts.xBOMB;_context49.next=3;return Xbomb.balanceOf(this.myAccount);case 3:return _context49.abrupt(\"return\",_context49.sent);case 4:case\"end\":return _context49.stop();}},_callee49,this);}));function getStakedBomb(){return _getStakedBomb.apply(this,arguments);}return getStakedBomb;}()},{key:\"getTotalStakedBomb\",value:function(){var _getTotalStakedBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee50(){var Xbomb,bomb;return _regeneratorRuntime().wrap(function _callee50$(_context50){while(1)switch(_context50.prev=_context50.next){case 0:Xbomb=this.contracts.xBOMB;bomb=this.BOMB;_context50.next=4;return bomb.balanceOf(Xbomb.address);case 4:return _context50.abrupt(\"return\",_context50.sent);case 5:case\"end\":return _context50.stop();}},_callee50,this);}));function getTotalStakedBomb(){return _getTotalStakedBomb.apply(this,arguments);}return getTotalStakedBomb;}()},{key:\"getTotalSuppliedBomb\",value:function(){var _getTotalSuppliedBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee51(){var bbombBomb,totalBomb;return _regeneratorRuntime().wrap(function _callee51$(_context51){while(1)switch(_context51.prev=_context51.next){case 0:bbombBomb=this.BOMB_BORROWABLE;// const bomb = this.BOMB;\n_context51.next=3;return bbombBomb.totalBalance();case 3:totalBomb=_context51.sent;return _context51.abrupt(\"return\",totalBomb);case 5:case\"end\":return _context51.stop();}},_callee51,this);}));function getTotalSuppliedBomb(){return _getTotalSuppliedBomb.apply(this,arguments);}return getTotalSuppliedBomb;}()},{key:\"getTotalSuppliedBtcb\",value:function(){var _getTotalSuppliedBtcb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee52(){var bbombBomb,totalBtcb;return _regeneratorRuntime().wrap(function _callee52$(_context52){while(1)switch(_context52.prev=_context52.next){case 0:bbombBomb=this.BTCB_BORROWABLE;// const bomb = this.BOMB;\n_context52.next=3;return bbombBomb.totalBalance();case 3:totalBtcb=_context52.sent;return _context52.abrupt(\"return\",totalBtcb);case 5:case\"end\":return _context52.stop();}},_callee52,this);}));function getTotalSuppliedBtcb(){return _getTotalSuppliedBtcb.apply(this,arguments);}return getTotalSuppliedBtcb;}()},{key:\"getXbombExchange\",value:function(){var _getXbombExchange=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee53(){var Xbomb,XbombExchange,xBombPerBomb,xBombRate;return _regeneratorRuntime().wrap(function _callee53$(_context53){while(1)switch(_context53.prev=_context53.next){case 0:Xbomb=this.contracts.xBOMB;_context53.next=3;return Xbomb.getExchangeRate();case 3:XbombExchange=_context53.sent;xBombPerBomb=parseFloat(XbombExchange)/1000000000000000000;xBombRate=xBombPerBomb.toString();return _context53.abrupt(\"return\",parseUnits(xBombRate,18));case 7:case\"end\":return _context53.stop();}},_callee53,this);}));function getXbombExchange(){return _getXbombExchange.apply(this,arguments);}return getXbombExchange;}()},{key:\"withdrawFromBomb\",value:function(){var _withdrawFromBomb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee54(amount){var Xbomb;return _regeneratorRuntime().wrap(function _callee54$(_context54){while(1)switch(_context54.prev=_context54.next){case 0:Xbomb=this.contracts.xBOMB;_context54.next=3;return Xbomb.leave(decimalToBalance(amount));case 3:return _context54.abrupt(\"return\",_context54.sent);case 4:case\"end\":return _context54.stop();}},_callee54,this);}));function withdrawFromBomb(_x44){return _withdrawFromBomb.apply(this,arguments);}return withdrawFromBomb;}()},{key:\"getEarningsOnBoardroom\",value:function(){var _getEarningsOnBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee55(){var Boardroom;return _regeneratorRuntime().wrap(function _callee55$(_context55){while(1)switch(_context55.prev=_context55.next){case 0:Boardroom=this.currentBoardroom();if(!(this.boardroomVersionOfUser==='v1')){_context55.next=5;break;}_context55.next=4;return Boardroom.getCashEarningsOf(this.myAccount);case 4:return _context55.abrupt(\"return\",_context55.sent);case 5:_context55.next=7;return Boardroom.earned(this.myAccount);case 7:return _context55.abrupt(\"return\",_context55.sent);case 8:case\"end\":return _context55.stop();}},_callee55,this);}));function getEarningsOnBoardroom(){return _getEarningsOnBoardroom.apply(this,arguments);}return getEarningsOnBoardroom;}()},{key:\"withdrawShareFromBoardroom\",value:function(){var _withdrawShareFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee56(amount){var Boardroom;return _regeneratorRuntime().wrap(function _callee56$(_context56){while(1)switch(_context56.prev=_context56.next){case 0:Boardroom=this.currentBoardroom();_context56.next=3;return Boardroom.withdraw(decimalToBalance(amount));case 3:return _context56.abrupt(\"return\",_context56.sent);case 4:case\"end\":return _context56.stop();}},_callee56,this);}));function withdrawShareFromBoardroom(_x45){return _withdrawShareFromBoardroom.apply(this,arguments);}return withdrawShareFromBoardroom;}()},{key:\"harvestCashFromBoardroom\",value:function(){var _harvestCashFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee57(){var Boardroom;return _regeneratorRuntime().wrap(function _callee57$(_context57){while(1)switch(_context57.prev=_context57.next){case 0:Boardroom=this.currentBoardroom();if(!(this.boardroomVersionOfUser==='v1')){_context57.next=5;break;}_context57.next=4;return Boardroom.claimDividends();case 4:return _context57.abrupt(\"return\",_context57.sent);case 5:_context57.next=7;return Boardroom.claimReward();case 7:return _context57.abrupt(\"return\",_context57.sent);case 8:case\"end\":return _context57.stop();}},_callee57,this);}));function harvestCashFromBoardroom(){return _harvestCashFromBoardroom.apply(this,arguments);}return harvestCashFromBoardroom;}()},{key:\"exitFromBoardroom\",value:function(){var _exitFromBoardroom=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee58(){var Boardroom;return _regeneratorRuntime().wrap(function _callee58$(_context58){while(1)switch(_context58.prev=_context58.next){case 0:Boardroom=this.currentBoardroom();_context58.next=3;return Boardroom.exit();case 3:return _context58.abrupt(\"return\",_context58.sent);case 4:case\"end\":return _context58.stop();}},_callee58,this);}));function exitFromBoardroom(){return _exitFromBoardroom.apply(this,arguments);}return exitFromBoardroom;}()},{key:\"getTreasuryNextAllocationTime\",value:function(){var _getTreasuryNextAllocationTime=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee59(){var Treasury,nextEpochTimestamp,nextAllocation,prevAllocation;return _regeneratorRuntime().wrap(function _callee59$(_context59){while(1)switch(_context59.prev=_context59.next){case 0:Treasury=this.contracts.Treasury;_context59.next=3;return Treasury.nextEpochPoint();case 3:nextEpochTimestamp=_context59.sent;nextAllocation=new Date(nextEpochTimestamp.mul(1000).toNumber());prevAllocation=new Date(Date.now());return _context59.abrupt(\"return\",{from:prevAllocation,to:nextAllocation});case 7:case\"end\":return _context59.stop();}},_callee59,this);}));function getTreasuryNextAllocationTime(){return _getTreasuryNextAllocationTime.apply(this,arguments);}return getTreasuryNextAllocationTime;}()/**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */},{key:\"getUserClaimRewardTime\",value:function(){var _getUserClaimRewardTime=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee60(){var _this$contracts3,Boardroom,Treasury,nextEpochTimestamp,currentEpoch,mason,startTimeEpoch,period,periodInHours,rewardLockupEpochs,targetEpochForClaimUnlock,fromDate,toDate,_toDate,delta,endDate;return _regeneratorRuntime().wrap(function _callee60$(_context60){while(1)switch(_context60.prev=_context60.next){case 0:_this$contracts3=this.contracts,Boardroom=_this$contracts3.Boardroom,Treasury=_this$contracts3.Treasury;_context60.next=3;return Boardroom.nextEpochPoint();case 3:nextEpochTimestamp=_context60.sent;_context60.next=6;return Boardroom.epoch();case 6:currentEpoch=_context60.sent;_context60.next=9;return Boardroom.members(this.myAccount);case 9:mason=_context60.sent;startTimeEpoch=mason.epochTimerStart;_context60.next=13;return Treasury.PERIOD();case 13:period=_context60.sent;periodInHours=period/60/60;// 6 hours, period is displayed in seconds which is 21600\n_context60.next=17;return Boardroom.rewardLockupEpochs();case 17:rewardLockupEpochs=_context60.sent;targetEpochForClaimUnlock=Number(startTimeEpoch)+Number(rewardLockupEpochs);fromDate=new Date(Date.now());if(!(targetEpochForClaimUnlock-currentEpoch<=0)){_context60.next=24;break;}return _context60.abrupt(\"return\",{from:fromDate,to:fromDate});case 24:if(!(targetEpochForClaimUnlock-currentEpoch===1)){_context60.next=29;break;}toDate=new Date(nextEpochTimestamp*1000);return _context60.abrupt(\"return\",{from:fromDate,to:toDate});case 29:_toDate=new Date(nextEpochTimestamp*1000);delta=targetEpochForClaimUnlock-currentEpoch-1;endDate=moment(_toDate).add(delta*periodInHours,'hours').toDate();return _context60.abrupt(\"return\",{from:fromDate,to:endDate});case 33:case\"end\":return _context60.stop();}},_callee60,this);}));function getUserClaimRewardTime(){return _getUserClaimRewardTime.apply(this,arguments);}return getUserClaimRewardTime;}()/**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */},{key:\"getUserUnstakeTime\",value:function(){var _getUserUnstakeTime=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee61(){var _this$contracts4,Boardroom,Treasury,nextEpochTimestamp,currentEpoch,mason,startTimeEpoch,period,PeriodInHours,withdrawLockupEpochs,fromDate,targetEpochForClaimUnlock,stakedAmount,toDate,_toDate2,delta,endDate;return _regeneratorRuntime().wrap(function _callee61$(_context61){while(1)switch(_context61.prev=_context61.next){case 0:_this$contracts4=this.contracts,Boardroom=_this$contracts4.Boardroom,Treasury=_this$contracts4.Treasury;_context61.next=3;return Boardroom.nextEpochPoint();case 3:nextEpochTimestamp=_context61.sent;_context61.next=6;return Boardroom.epoch();case 6:currentEpoch=_context61.sent;_context61.next=9;return Boardroom.members(this.myAccount);case 9:mason=_context61.sent;startTimeEpoch=mason.epochTimerStart;_context61.next=13;return Treasury.PERIOD();case 13:period=_context61.sent;PeriodInHours=period/60/60;_context61.next=17;return Boardroom.withdrawLockupEpochs();case 17:withdrawLockupEpochs=_context61.sent;fromDate=new Date(Date.now());targetEpochForClaimUnlock=Number(startTimeEpoch)+Number(withdrawLockupEpochs);_context61.next=22;return this.getStakedSharesOnBoardroom();case 22:stakedAmount=_context61.sent;if(!(currentEpoch<=targetEpochForClaimUnlock&&Number(stakedAmount)===0)){_context61.next=27;break;}return _context61.abrupt(\"return\",{from:fromDate,to:fromDate});case 27:if(!(targetEpochForClaimUnlock-currentEpoch===1)){_context61.next=32;break;}toDate=new Date(nextEpochTimestamp*1000);return _context61.abrupt(\"return\",{from:fromDate,to:toDate});case 32:_toDate2=new Date(nextEpochTimestamp*1000);delta=targetEpochForClaimUnlock-Number(currentEpoch)-1;endDate=moment(_toDate2).add(delta*PeriodInHours,'hours').toDate();return _context61.abrupt(\"return\",{from:fromDate,to:endDate});case 36:case\"end\":return _context61.stop();}},_callee61,this);}));function getUserUnstakeTime(){return _getUserUnstakeTime.apply(this,arguments);}return getUserUnstakeTime;}()},{key:\"watchAssetInMetamask\",value:function(){var _watchAssetInMetamask=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee62(assetName){var _ref,ethereum,asset,assetUrl;return _regeneratorRuntime().wrap(function _callee62$(_context62){while(1)switch(_context62.prev=_context62.next){case 0:_ref=window,ethereum=_ref.ethereum;if(!(ethereum&&ethereum.networkVersion===config.chainId.toString())){_context62.next=5;break;}if(assetName==='BOMB'){asset=this.BOMB;assetUrl='https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png';}else if(assetName==='BSHARE'){asset=this.BSHARE;assetUrl='https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bshare-512.png';}else if(assetName==='BBOND'){asset=this.BBOND;assetUrl='https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bbond-512.png';}else if(assetName==='XBOMB'){asset=this.XBOMB;assetUrl='https://raw.githubusercontent.com/bombmoney/bomb-assets/master/xbomb-512.png';}else if(assetName==='BTCB'){asset=this.BTC;assetUrl='https://bscscan.com/token/images/btcb_32.png';}_context62.next=5;return ethereum.request({method:'wallet_watchAsset',params:{type:'ERC20',options:{address:asset.address,symbol:asset.symbol,decimals:18,image:assetUrl}}});case 5:return _context62.abrupt(\"return\",true);case 6:case\"end\":return _context62.stop();}},_callee62,this);}));function watchAssetInMetamask(_x46){return _watchAssetInMetamask.apply(this,arguments);}return watchAssetInMetamask;}()},{key:\"provideBombFtmLP\",value:function(){var _provideBombFtmLP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee63(ftmAmount,bombAmount){var TaxOffice,overrides;return _regeneratorRuntime().wrap(function _callee63$(_context63){while(1)switch(_context63.prev=_context63.next){case 0:TaxOffice=this.contracts.TaxOffice;overrides={value:parseUnits(ftmAmount,18)};_context63.next=4;return TaxOffice.addLiquidityETHTaxFree(bombAmount,bombAmount.mul(992).div(1000),parseUnits(ftmAmount,18).mul(992).div(1000),overrides);case 4:return _context63.abrupt(\"return\",_context63.sent);case 5:case\"end\":return _context63.stop();}},_callee63,this);}));function provideBombFtmLP(_x47,_x48){return _provideBombFtmLP.apply(this,arguments);}return provideBombFtmLP;}()},{key:\"quoteFromSpooky\",value:function(){var _quoteFromSpooky=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee64(tokenAmount,tokenName){var SpookyRouter,_yield$this$BOMBBTCB_,_reserve0,_reserve1,quote;return _regeneratorRuntime().wrap(function _callee64$(_context64){while(1)switch(_context64.prev=_context64.next){case 0:SpookyRouter=this.contracts.SpookyRouter;_context64.next=3;return this.BOMBBTCB_LP.getReserves();case 3:_yield$this$BOMBBTCB_=_context64.sent;_reserve0=_yield$this$BOMBBTCB_._reserve0;_reserve1=_yield$this$BOMBBTCB_._reserve1;if(!(tokenName==='BOMB')){_context64.next=12;break;}_context64.next=9;return SpookyRouter.quote(parseUnits(tokenAmount),_reserve0,_reserve1);case 9:quote=_context64.sent;_context64.next=15;break;case 12:_context64.next=14;return SpookyRouter.quote(parseUnits(tokenAmount),_reserve1,_reserve0);case 14:quote=_context64.sent;case 15:return _context64.abrupt(\"return\",(quote/1e18).toString());case 16:case\"end\":return _context64.stop();}},_callee64,this);}));function quoteFromSpooky(_x49,_x50){return _quoteFromSpooky.apply(this,arguments);}return quoteFromSpooky;}()/**\n   * @returns an array of the regulation events till the most up to date epoch\n   */},{key:\"listenForRegulationsEvents\",value:function(){var _listenForRegulationsEvents=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee66(){var _this2=this;var Treasury,treasuryDaoFundedFilter,treasuryDevFundedFilter,treasuryBoardroomFundedFilter,boughtBondsFilter,redeemBondsFilter,epochBlocksRanges,boardroomFundEvents,events,DEVFundEvents,DAOFundEvents;return _regeneratorRuntime().wrap(function _callee66$(_context66){while(1)switch(_context66.prev=_context66.next){case 0:Treasury=this.contracts.Treasury;treasuryDaoFundedFilter=Treasury.filters.DaoFundFunded();treasuryDevFundedFilter=Treasury.filters.DevFundFunded();treasuryBoardroomFundedFilter=Treasury.filters.BoardroomFunded();boughtBondsFilter=Treasury.filters.BoughtBonds();redeemBondsFilter=Treasury.filters.RedeemedBonds();epochBlocksRanges=[];_context66.next=9;return Treasury.queryFilter(treasuryBoardroomFundedFilter);case 9:boardroomFundEvents=_context66.sent;events=[];boardroomFundEvents.forEach(function callback(value,index){events.push({epoch:index+1});events[index].boardroomFund=getDisplayBalance(value.args[1]);if(index===0){epochBlocksRanges.push({index:index,startBlock:value.blockNumber,boughBonds:0,redeemedBonds:0});}if(index>0){epochBlocksRanges.push({index:index,startBlock:value.blockNumber,boughBonds:0,redeemedBonds:0});epochBlocksRanges[index-1].endBlock=value.blockNumber;}});epochBlocksRanges.forEach(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee65(value,index){return _regeneratorRuntime().wrap(function _callee65$(_context65){while(1)switch(_context65.prev=_context65.next){case 0:_context65.next=2;return _this2.getBondsWithFilterForPeriod(boughtBondsFilter,value.startBlock,value.endBlock);case 2:events[index].bondsBought=_context65.sent;_context65.next=5;return _this2.getBondsWithFilterForPeriod(redeemBondsFilter,value.startBlock,value.endBlock);case 5:events[index].bondsRedeemed=_context65.sent;case 6:case\"end\":return _context65.stop();}},_callee65);}));return function(_x51,_x52){return _ref2.apply(this,arguments);};}());_context66.next=15;return Treasury.queryFilter(treasuryDevFundedFilter);case 15:DEVFundEvents=_context66.sent;DEVFundEvents.forEach(function callback(value,index){events[index].devFund=getDisplayBalance(value.args[1]);});_context66.next=19;return Treasury.queryFilter(treasuryDaoFundedFilter);case 19:DAOFundEvents=_context66.sent;DAOFundEvents.forEach(function callback(value,index){events[index].daoFund=getDisplayBalance(value.args[1]);});return _context66.abrupt(\"return\",events);case 22:case\"end\":return _context66.stop();}},_callee66,this);}));function listenForRegulationsEvents(){return _listenForRegulationsEvents.apply(this,arguments);}return listenForRegulationsEvents;}()/**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */},{key:\"getBondsWithFilterForPeriod\",value:function(){var _getBondsWithFilterForPeriod=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee67(filter,from,to){var Treasury,bondsAmount;return _regeneratorRuntime().wrap(function _callee67$(_context67){while(1)switch(_context67.prev=_context67.next){case 0:Treasury=this.contracts.Treasury;_context67.next=3;return Treasury.queryFilter(filter,from,to);case 3:bondsAmount=_context67.sent;return _context67.abrupt(\"return\",bondsAmount.length);case 5:case\"end\":return _context67.stop();}},_callee67,this);}));function getBondsWithFilterForPeriod(_x53,_x54,_x55){return _getBondsWithFilterForPeriod.apply(this,arguments);}return getBondsWithFilterForPeriod;}()},{key:\"estimateZapIn\",value:function(){var _estimateZapIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee68(tokenName,lpName,amount){var zapper,lpToken,estimate,token;return _regeneratorRuntime().wrap(function _callee68$(_context68){while(1)switch(_context68.prev=_context68.next){case 0:zapper=this.contracts.zapper;lpToken=this.externalTokens[lpName];if(!(tokenName===BNB_TICKER)){_context68.next=8;break;}_context68.next=5;return zapper.estimateZapIn(lpToken.address,SPOOKY_ROUTER_ADDR,parseUnits(amount,18));case 5:estimate=_context68.sent;_context68.next=12;break;case 8:token=tokenName===BOMB_TICKER?this.BOMB:this.BSHARE;_context68.next=11;return zapper.estimateZapInToken(token.address,lpToken.address,SPOOKY_ROUTER_ADDR,parseUnits(amount,18));case 11:estimate=_context68.sent;case 12:return _context68.abrupt(\"return\",[estimate[0]/1e18,estimate[1]/1e18]);case 13:case\"end\":return _context68.stop();}},_callee68,this);}));function estimateZapIn(_x56,_x57,_x58){return _estimateZapIn.apply(this,arguments);}return estimateZapIn;}()},{key:\"zapIn\",value:function(){var _zapIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee69(tokenName,lpName,amount){var zapper,lpToken,overrides,token;return _regeneratorRuntime().wrap(function _callee69$(_context69){while(1)switch(_context69.prev=_context69.next){case 0:zapper=this.contracts.zapper;lpToken=this.externalTokens[lpName];if(!(tokenName===BNB_TICKER)){_context69.next=9;break;}overrides={value:parseUnits(amount,18)};_context69.next=6;return zapper.zapIn(lpToken.address,SPOOKY_ROUTER_ADDR,this.myAccount,overrides);case 6:return _context69.abrupt(\"return\",_context69.sent);case 9:token=tokenName===BOMB_TICKER?this.BOMB:this.BSHARE;_context69.next=12;return zapper.zapInToken(token.address,parseUnits(amount,18),lpToken.address,SPOOKY_ROUTER_ADDR,this.myAccount);case 12:return _context69.abrupt(\"return\",_context69.sent);case 13:case\"end\":return _context69.stop();}},_callee69,this);}));function zapIn(_x59,_x60,_x61){return _zapIn.apply(this,arguments);}return zapIn;}()},{key:\"swapBBondToBShare\",value:function(){var _swapBBondToBShare=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee70(bbondAmount){var BShareSwapper;return _regeneratorRuntime().wrap(function _callee70$(_context70){while(1)switch(_context70.prev=_context70.next){case 0:BShareSwapper=this.contracts.BShareSwapper;_context70.next=3;return BShareSwapper.swapBBondToBShare(bbondAmount);case 3:return _context70.abrupt(\"return\",_context70.sent);case 4:case\"end\":return _context70.stop();}},_callee70,this);}));function swapBBondToBShare(_x62){return _swapBBondToBShare.apply(this,arguments);}return swapBBondToBShare;}()},{key:\"estimateAmountOfBShare\",value:function(){var _estimateAmountOfBShare=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee71(bbondAmount){var BShareSwapper,estimateBN;return _regeneratorRuntime().wrap(function _callee71$(_context71){while(1)switch(_context71.prev=_context71.next){case 0:BShareSwapper=this.contracts.BShareSwapper;_context71.prev=1;_context71.next=4;return BShareSwapper.estimateAmountOfBShare(parseUnits(bbondAmount,18));case 4:estimateBN=_context71.sent;return _context71.abrupt(\"return\",getDisplayBalance(estimateBN,18,6));case 8:_context71.prev=8;_context71.t0=_context71[\"catch\"](1);console.error(\"Failed to fetch estimate bshare amount: \".concat(_context71.t0));case 11:case\"end\":return _context71.stop();}},_callee71,this,[[1,8]]);}));function estimateAmountOfBShare(_x63){return _estimateAmountOfBShare.apply(this,arguments);}return estimateAmountOfBShare;}()},{key:\"getBShareSwapperStat\",value:function(){var _getBShareSwapperStat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee72(address){var BShareSwapper,bshareBalanceBN,bbondBalanceBN,rateBSharePerBombBN,bshareBalance,bbondBalance;return _regeneratorRuntime().wrap(function _callee72$(_context72){while(1)switch(_context72.prev=_context72.next){case 0:BShareSwapper=this.contracts.BShareSwapper;_context72.next=3;return BShareSwapper.getBShareBalance();case 3:bshareBalanceBN=_context72.sent;_context72.next=6;return BShareSwapper.getBBondBalance(address);case 6:bbondBalanceBN=_context72.sent;_context72.next=9;return BShareSwapper.getBShareAmountPerBomb();case 9:rateBSharePerBombBN=_context72.sent;bshareBalance=getDisplayBalance(bshareBalanceBN,18,5);bbondBalance=getDisplayBalance(bbondBalanceBN,18,5);return _context72.abrupt(\"return\",{bshareBalance:bshareBalance.toString(),bbondBalance:bbondBalance.toString(),// bombPrice: bombPriceBN.toString(),\n// bsharePrice: bsharePriceBN.toString(),\nrateBSharePerBomb:rateBSharePerBombBN.toString()});case 13:case\"end\":return _context72.stop();}},_callee72,this);}));function getBShareSwapperStat(_x64){return _getBShareSwapperStat.apply(this,arguments);}return getBShareSwapperStat;}()}]);return BombFinance;}();","map":{"version":3,"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","Fetcher","Route","Token","BigNumber","Contract","ethers","decimalToBalance","ERC20","getFullDisplayBalance","getDisplayBalance","getDefaultProvider","IUniswapV2PairABI","IBombBorrowableABI","config","bankDefinitions","moment","parseUnits","BNB_TICKER","SPOOKY_ROUTER_ADDR","BOMB_TICKER","bombMaxi","BombFinance","cfg","_classCallCheck","myAccount","provider","signer","contracts","externalTokens","boardroomVersionOfUser","BOMBBTCB_LP","BOMB","BUSD","BSHARE","BBOND","XBOMB","BNB","BTC","BOMB_BORROWABLE","BTCB_BORROWABLE","BBOMB_BOMB","BBOMB_BTCB","BBOMBBOMB","BBOMBBTCB","BUSMBUSD_LP","BUSM","BOMB_MAXI","BSHARE_MAXI","deployments","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","deployment","address","abi","_i2","_Object$entries2","_Object$entries2$_i","symbol","_Object$entries2$_i$","decimal","Bomb","BShare","BBond","xBOMB","BombBorrowable","BtcbBorrowable","BombMaxiLPBShareRewardPool","BshareMaxiLPBShareRewardPool","_createClass","unlockWallet","account","_this","newProvider","providers","Web3Provider","chainId","getSigner","_i3","_Object$entries3","_Object$entries3$_i","contract","connect","tokens","concat","_toConsumableArray","_iterator","_createForOfIteratorHelper","_step","s","n","token","e","f","console","log","fetchBoardroomVersionOfUser","version","stack","get","_getBombStat","_asyncToGenerator","_callee","_this$contracts","BombRewardPool","BombGenesisRewardPool","supply","bombRewardPoolSupply","bombRewardPoolSupply2","bombCirculatingSupply","priceInBTC","priceOfOneBTC","priceOfBombInDollars","_callee$","_context","totalSupply","balanceOf","sub","getTokenPriceFromPancakeswapBTC","getBTCBPriceFromPancakeswap","Number","toFixed","tokenInFtm","toString","priceInDollars","circulatingSupply","getBombStat","apply","arguments","_getBTCPriceUSD","_callee2","_callee2$","_context2","getBTCPriceUSD","_getLPStat","_callee3","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","isBomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","lpTokenPrice","lpTokenPriceFixed","liquidity","_callee3$","_context3","startsWith","getLPTokenPrice","priceOfOne","totalLiquidity","getLPStat","_x","_getLPStatBTC","_callee4","btcAmountBN","btcAmount","_callee4$","_context4","getLPStatBTC","_x2","_getBondStat","_callee5","Treasury","bombStat","bondBombRatioBN","modifier","bondPriceInBNB","priceOfBBondInDollars","_callee5$","_context5","getBondPremiumRate","displayedTotalSupply","getBondStat","_getShareStat","_callee6","BShareRewardPool","priceInBNB","tShareCirculatingSupply","priceOfOneBNB","priceOfSharesInDollars","_callee6$","_context6","getTokenPriceFromPancakeswap","getWBNBPriceFromPancakeswap","getShareStat","_getBombStatInEstimatedTWAP","_callee7","_this$contracts2","Oracle","expectedPrice","_callee7$","_context7","twap","utils","parseEther","getBombStatInEstimatedTWAP","_getBombPriceInLastTWAP","_callee8","_callee8$","_context8","getBombUpdatedPrice","getBombPriceInLastTWAP","_getBondsPurchasable","_callee9","_callee9$","_context9","getBurnableBombLeft","getBondsPurchasable","_getBombMaxiStats","_callee10","poolId","BombMaxi","_callee10$","_context10","totalShares","data","pool","getBombMaxiStats","_x3","_getPoolAPRs","_callee11","bank","depositToken","poolContract","depositTokenValue","depositTokenPrice","stakeInPool","TVL","stat","tokenPerSecond","tokenPerHour","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","_callee11$","_context11","depositTokenName","getDepositTokenPriceInDollars","earnTokenName","t0","getTokenPerSecond","mul","getPoolAPRs","_x4","_getXbombAPR","_callee12","bombToken","xbombToken","xbombExchange","xbombPercent","xbombPercentTotal","startDate","nowDate","difference","days","aprPerDay","_callee12$","_context12","getXbombExchange","Date","now","getTime","getXbombAPR","_getTokenPerSecond","_callee13","contractName","_rewardPerSecond","poolStartTime","startDateTime","FOUR_DAYS","rewardPerSecond","_callee13$","_context13","endsWith","tSharePerSecond","div","toNumber","epochBombPerSecond","_x5","_x6","_x7","_x8","_getDepositTokenPriceInDollars","_callee14","tokenName","tokenPrice","priceOfOneFtmInDollars","_callee14$","_context14","getBusdLPTokenPrice","getMaxiLPTokenPrice","_x9","_x10","_getCurrentEpoch","_callee15","_callee15$","_context15","epoch","getCurrentEpoch","_getBondOraclePriceInLastTWAP","_callee16","_callee16$","_context16","getBondOraclePriceInLastTWAP","_buyBonds","_callee17","amount","treasuryBombPrice","_callee17$","_context17","getBombPrice","buyBonds","_x11","_redeemBonds","_callee18","priceForBomb","_callee18$","_context18","redeemBonds","_x12","_getTotalValueLocked","_callee19","totalValue","_i4","_Object$values","bankInfo","tokenAmountInPool","poolValue","BSHAREPrice","BOMBPrice","boardroomtShareBalanceOf","bombStakeBalanceOf","boardroomTVL","bombTVL","_callee19$","_context19","currentBoardroom","getTotalValueLocked","_getLPTokenPrice","_callee20","tokenSupply","priceOfToken","tokenInLP","_callee20$","_context20","t1","t2","t3","t4","t5","t6","_x13","_x14","_x15","_getBusdLPTokenPrice","_callee21","priceToken","_callee21$","_context21","getTokenPriceFromPancakeswapBUSD","_x16","_x17","_x18","_getMaxiLPTokenPrice","_callee22","maxiPool","bombmaxi","_callee22$","_context22","_x19","_earnedFromBank","_callee23","poolName","_args23","_callee23$","_context23","pendingBOMB","pendingShare","from","earnedFromBank","_x20","_x21","_x22","_stakedBalanceOnBank","_callee24","userInfo","_args24","_callee24$","_context24","stakedBalanceOnBank","_x23","_x24","_stake","_callee25","_callee25$","_context25","deposit","stake","_x25","_x26","_x27","_unstake","_callee26","_callee26$","_context26","withdraw","unstake","_x28","_x29","_x30","_harvest","_callee27","_callee27$","_context27","harvest","_x31","_x32","_exit","_callee28","_args28","_callee28$","_context28","exit","_x33","_x34","_fetchBoardroomVersionOfUser","_callee29","_callee29$","_context29","Boardroom","isOldBoardroomMember","_getTokenPriceFromPancakeswap","_callee30","tokenContract","ready","WBNB","wftm","wftmToToken","priceInBUSD","_callee30$","_context30","fetchPairData","midPrice","_x35","_getTokenPriceFromPancakeswapBUSD","_callee31","_callee31$","_context31","_x36","_getTokenPriceFromPancakeswapBTC","_callee32","btcb","priceForPeg","_callee32$","_context32","_x37","_getTokenPriceFromPancakeswapBOMBUSD","_callee33","_callee33$","_context33","getTokenPriceFromPancakeswapBOMBUSD","_getWBNBPriceFromPancakeswap","_callee34","_this$externalTokens","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","_callee34$","_context34","_getBTCBPriceFromPancakeswap","_callee35","BTCB","btcPriceInBNB","wbnbPrice","btcprice","_callee35$","_context35","_getBoardroomAPR","_callee36","latestSnapshotIndex","lastHistory","lastRewardsReceived","epochRewardsPerShare","amountOfRewardsPerDay","realAPR","_callee36$","_context36","boardroomHistory","getBoardroomAPR","_getBombStakeAPR","_callee37","xBombBombBalanceOf","_callee37$","_context37","getBombStakeAPR","_canUserClaimRewardFromBoardroom","_callee38","_callee38$","_context38","canClaimReward","canUserClaimRewardFromBoardroom","_canUserUnstakeFromBoardroom","_callee39","canWithdraw","stakedAmount","notStaked","_callee39$","_context39","getStakedSharesOnBoardroom","canUserUnstakeFromBoardroom","_timeUntilClaimRewardFromBoardroom","_callee40","_callee40$","_context40","timeUntilClaimRewardFromBoardroom","_getTotalStakedInBoardroom","_callee41","_callee41$","_context41","getTotalStakedInBoardroom","_stakeShareToBoardroom","_callee42","_callee42$","_context42","stakeShareToBoardroom","_x38","_stakeToBomb","_callee43","Xbomb","_callee43$","_context43","enter","stakeToBomb","_x39","_redeemFromBomb","_callee44","BombRouter","expiry","_callee44$","_context44","redeem","redeemFromBomb","_x40","_redeemFromBtcb","_callee45","_callee45$","_context45","redeemFromBtcb","_x41","_supplyToBtcb","_callee46","_callee46$","_context46","mint","supplyToBtcb","_x42","_supplyToBomb","_callee47","_callee47$","_context47","supplyToBomb","_x43","_getStakedSharesOnBoardroom","_callee48","_callee48$","_context48","getShareOf","_getStakedBomb","_callee49","_callee49$","_context49","getStakedBomb","_getTotalStakedBomb","_callee50","bomb","_callee50$","_context50","getTotalStakedBomb","_getTotalSuppliedBomb","_callee51","bbombBomb","totalBomb","_callee51$","_context51","totalBalance","getTotalSuppliedBomb","_getTotalSuppliedBtcb","_callee52","totalBtcb","_callee52$","_context52","getTotalSuppliedBtcb","_getXbombExchange","_callee53","XbombExchange","xBombPerBomb","xBombRate","_callee53$","_context53","getExchangeRate","parseFloat","_withdrawFromBomb","_callee54","_callee54$","_context54","leave","withdrawFromBomb","_x44","_getEarningsOnBoardroom","_callee55","_callee55$","_context55","getCashEarningsOf","earned","getEarningsOnBoardroom","_withdrawShareFromBoardroom","_callee56","_callee56$","_context56","withdrawShareFromBoardroom","_x45","_harvestCashFromBoardroom","_callee57","_callee57$","_context57","claimDividends","claimReward","harvestCashFromBoardroom","_exitFromBoardroom","_callee58","_callee58$","_context58","exitFromBoardroom","_getTreasuryNextAllocationTime","_callee59","nextEpochTimestamp","nextAllocation","prevAllocation","_callee59$","_context59","nextEpochPoint","to","getTreasuryNextAllocationTime","_getUserClaimRewardTime","_callee60","_this$contracts3","currentEpoch","mason","startTimeEpoch","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","_toDate","delta","endDate","_callee60$","_context60","members","epochTimerStart","PERIOD","add","getUserClaimRewardTime","_getUserUnstakeTime","_callee61","_this$contracts4","PeriodInHours","withdrawLockupEpochs","_toDate2","_callee61$","_context61","getUserUnstakeTime","_watchAssetInMetamask","_callee62","assetName","_ref","ethereum","asset","assetUrl","_callee62$","_context62","window","networkVersion","request","params","options","decimals","image","watchAssetInMetamask","_x46","_provideBombFtmLP","_callee63","bombAmount","TaxOffice","overrides","_callee63$","_context63","addLiquidityETHTaxFree","provideBombFtmLP","_x47","_x48","_quoteFromSpooky","_callee64","SpookyRouter","_yield$this$BOMBBTCB_","_reserve0","_reserve1","quote","_callee64$","_context64","getReserves","quoteFromSpooky","_x49","_x50","_listenForRegulationsEvents","_callee66","_this2","treasuryDaoFundedFilter","treasuryDevFundedFilter","treasuryBoardroomFundedFilter","boughtBondsFilter","redeemBondsFilter","epochBlocksRanges","boardroomFundEvents","events","DEVFundEvents","DAOFundEvents","_callee66$","_context66","filters","DaoFundFunded","DevFundFunded","BoardroomFunded","BoughtBonds","RedeemedBonds","queryFilter","callback","index","boardroomFund","args","startBlock","blockNumber","boughBonds","redeemedBonds","endBlock","_ref2","_callee65","_callee65$","_context65","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","_x51","_x52","devFund","daoFund","listenForRegulationsEvents","_getBondsWithFilterForPeriod","_callee67","filter","bondsAmount","_callee67$","_context67","_x53","_x54","_x55","_estimateZapIn","_callee68","lpName","zapper","estimate","_callee68$","_context68","estimateZapIn","estimateZapInToken","_x56","_x57","_x58","_zapIn","_callee69","_callee69$","_context69","zapIn","zapInToken","_x59","_x60","_x61","_swapBBondToBShare","_callee70","bbondAmount","BShareSwapper","_callee70$","_context70","swapBBondToBShare","_x62","_estimateAmountOfBShare","_callee71","estimateBN","_callee71$","_context71","estimateAmountOfBShare","_x63","_getBShareSwapperStat","_callee72","bshareBalanceBN","bbondBalanceBN","rateBSharePerBombBN","bshareBalance","bbondBalance","_callee72$","_context72","getBShareBalance","getBBondBalance","getBShareAmountPerBomb","rateBSharePerBomb","getBShareSwapperStat","_x64"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/bomb-finance/BombFinance.ts"],"sourcesContent":["// import { Fetcher, Route, Token } from '@uniswap/sdk';\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@pancakeswap/sdk';\nimport { Configuration } from './config';\nimport { MaxiInfo, ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, BShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport IBombBorrowableABI from './IBombBorrowable.abi.json';\n\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { BNB_TICKER, SPOOKY_ROUTER_ADDR, BOMB_TICKER } from '../utils/constants';\nimport { bombMaxi } from '../services/graph';\n\n/**\n * An API module of Bomb Money contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n\n  BOMBBTCB_LP: Contract;\n  BOMB: ERC20;\n  BUSD: ERC20;\n  BSHARE: ERC20;\n  BBOND: ERC20;\n  XBOMB: ERC20;\n  BNB: ERC20;\n  BTC: ERC20;\n  BOMB_BORROWABLE: Contract;\n  BTCB_BORROWABLE: Contract;\n  BBOMB_BOMB: ERC20;\n  BBOMB_BTCB: ERC20;\n  BBOMBBOMB: ERC20;\n  BBOMBBTCB: ERC20;\n  BUSMBUSD_LP: Contract;\n  BUSM: ERC20;\n  BOMB_MAXI: ERC20;\n  BSHARE_MAXI: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.BOMB = new ERC20(deployments.Bomb.address, provider, 'BOMB');\n    this.BSHARE = new ERC20(deployments.BShare.address, provider, 'BSHARE');\n    this.BBOND = new ERC20(deployments.BBond.address, provider, 'BBOND');\n    this.BNB = this.externalTokens['WBNB'];\n    this.BTC = this.externalTokens['BTCB'];\n    this.XBOMB = new ERC20(deployments.xBOMB.address, provider, 'XBOMB');\n    this.BUSM = this.externalTokens['BUSM'];\n    this.BUSD = this.externalTokens['BUSD'];\n\n    // this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    // this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n\n    // this.BBOMB_BOMB = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    // this.BBOMB_BTCB = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n    this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    this.BBOMBBOMB = this.externalTokens['BBOMB-BOMB'];\n    this.BBOMBBTCB = this.externalTokens['BBOMB-BTCB'];\n\n    this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n    this.BOMB_BORROWABLE = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    this.BTCB_BORROWABLE = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n\n    this.BOMB_MAXI = new ERC20(deployments.BombMaxiLPBShareRewardPool.address, provider, '80BOMB-20BTCB-LP');\n    this.BSHARE_MAXI = new ERC20(deployments.BshareMaxiLPBShareRewardPool.address, provider, '80BSHARE-20WBNB-LP');\n\n    // Uniswap V2 Pair\n\n    this.BOMBBTCB_LP = new Contract(externalTokens['BOMB-BTCB-LP'][0], IUniswapV2PairABI, provider);\n    this.BUSMBUSD_LP = new Contract(externalTokens['BUSM-BUSD-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.BOMB, this.BSHARE, this.BBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.BOMBBTCB_LP = this.BOMBBTCB_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM APE TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getBombStat(): Promise<TokenStat> {\n    const { BombRewardPool, BombGenesisRewardPool } = this.contracts;\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombGenesisRewardPool.address);\n    const bombRewardPoolSupply2 = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply).sub(bombRewardPoolSupply2);\n    //  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BOMB);\n    //const priceInBNBstring = priceInBNB.toString();\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.BOMB);\n    // const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    //const priceInDollars = await this.getTokenPriceFromPancakeswapBOMBUSD();\n    const priceOfBombInDollars = ((Number(priceInBTC) * Number(priceOfOneBTC)) / 10000).toFixed(2);\n    //console.log('priceOfBombInDollars', priceOfBombInDollars);\n\n    return {\n      //  tokenInFtm: (Number(priceInBNB) * 100).toString(),\n      tokenInFtm: priceInBTC.toString(),\n      priceInDollars: priceOfBombInDollars,\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBTCPriceUSD(): Promise<Number> {\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    return Number(priceOfOneBTC);\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    // console.log('NAME', name);\n\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    // console.log('NAME', name);\n\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.BNB.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  async getLPStatBTC(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const btcAmountBN = await this.BTC.balanceOf(lpToken.address);\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(5).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n  /**\n   * Use this method to get price for Bomb\n   * @returns TokenStat for BBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const bombStat = await this.getBombStat();\n    const bondBombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondBombRatioBN / 1e14 > 1 ? bondBombRatioBN / 1e14 : 1;\n    const bondPriceInBNB = (Number(bombStat.tokenInFtm) * modifier).toFixed(4);\n    const priceOfBBondInDollars = (Number(bombStat.priceInDollars) * modifier).toFixed(4);\n    const supply = await this.BBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInBNB,\n      priceInDollars: priceOfBBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for BSHARE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { BShareRewardPool } = this.contracts;\n\n    const supply = await this.BSHARE.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BSHARE);\n    const bombRewardPoolSupply = await this.BSHARE.balanceOf(BShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInBNB) * Number(priceOfOneBNB)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInBNB,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.BSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.BSHARE.decimal, 0),\n    };\n  }\n\n  async getBombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { Oracle, BombRewardPool } = this.contracts;\n    const expectedPrice = await Oracle.twap(this.BOMB.address, ethers.utils.parseEther('10000'));\n\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBombUpdatedPrice();\n  }\n\n  // async getBombPegTWAP(): Promise<any> {\n  //   const { Treasury } = this.contracts;\n  //   const updatedPrice = Treasury.getBombUpdatedPrice();\n  //   const updatedPrice2 = updatedPrice * 10000;\n  //   return updatedPrice2;\n  // }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    // const burnableBomb = (Number(Treasury.getBurnableBombLeft()) * 1000).toFixed(2).toString();\n    return Treasury.getBurnableBombLeft();\n  }\n\n  async getBombMaxiStats(poolId: string): Promise<MaxiInfo> {\n    const BombMaxi = await bombMaxi(poolId);\n    return {\n      totalShares: BombMaxi.data.pool.totalShares.toString(),\n      totalLiquidity: BombMaxi.data.pool.totalLiquidity.toString(),\n\n      // tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      // ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      // priceOfOne: lpTokenPriceFixed,\n      // totalLiquidity: liquidity,\n      // totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    let depositToken = bank.depositToken;\n    // if (depositToken.symbol === '80BOMB-20BTCB-LP' || depositToken.symbol === '80BSHARE-20WBNB-LP') {\n    //   const temp = 'TBD';\n    //   return {\n    //     dailyAPR: temp,\n    //     yearlyAPR: temp,\n    //     TVL: temp,\n    //   };\n    // }\n    const poolContract = this.contracts[bank.contract];\n    let depositTokenValue: ERC20\n    if (bank.depositTokenName === \"BBOND\") {\n      depositTokenValue = this.BOMB\n    } else {\n      depositTokenValue = depositToken\n    }\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositTokenValue);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BOMB' ? await this.getBombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  async getXbombAPR(): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const bombToken = this.BOMB;\n    const xbombToken = this.XBOMB;\n\n    const xbombExchange = await this.getXbombExchange();\n    const xbombPercent = await xbombExchange;\n    const xbombPercentTotal = (Number(xbombPercent) / 1000000000000000000) * 100 - 100;\n\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bombToken.symbol, bombToken);\n\n    const stakeInPool = await bombToken.balanceOf(xbombToken.address);\n\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, bombToken.decimal));\n\n    const startDate = new Date('January 24, 2022');\n    const nowDate = new Date(Date.now());\n    const difference = nowDate.getTime() - startDate.getTime();\n    const days = difference / 60 / 60 / 24 / 1000;\n    const aprPerDay = xbombPercentTotal / days;\n\n    // Determine days between now and a date\n\n    // const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    // const totalRewardPricePerYear =\n    //   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    // const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    // const totalStakingTokenInPool =\n    //   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    // const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    // const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n\n    const dailyAPR = aprPerDay;\n    const yearlyAPR = aprPerDay * 365;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'BOMB') {\n      if (!contractName.endsWith('BombRewardPool')) {\n        const rewardPerSecond = await poolContract.tSharePerSecond();\n        if (depositTokenName === 'WBNB') {\n          return rewardPerSecond.mul(6000).div(11000).div(24);\n        } else if (depositTokenName === 'CAKE') {\n          return rewardPerSecond.mul(2500).div(11000).div(24);\n        } else if (depositTokenName === 'SUSD') {\n          return rewardPerSecond.mul(1000).div(11000).div(24);\n        } else if (depositTokenName === 'SVL') {\n          return rewardPerSecond.mul(1500).div(11000).div(24);\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochBombPerSecond(1);\n      }\n      return await poolContract.epochBombPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('BOMB-BTCB')) {\n      return rewardPerSecond.mul(400).div(1000);\n    } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BOMB')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BBOND')) {\n      return rewardPerSecond.mul(150).div(1000);\n    } else if (depositTokenName.startsWith('BUSM-BUSD')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else if (depositTokenName.startsWith('80BOMB')) {\n      return rewardPerSecond.mul(200).div(1000);\n    } else if (depositTokenName.startsWith('80BSHARE')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else {\n      return rewardPerSecond.mul(150).div(1000);\n    }\n    // if (depositTokenName.startsWith('BOMB-BTCB')) {\n    //   return rewardPerSecond.mul(41650).div(10000);\n    // } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n    //   return rewardPerSecond.mul(0).div(119000);\n    // } else if (depositTokenName.startsWith('BOMB')) {\n    //   return rewardPerSecond.mul(59500).div(10000);\n    // } else {\n    //   return rewardPerSecond.mul(17850).div(10000);\n    // }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n    if (tokenName === 'WBNB') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'BOMB-BTCB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n      } else if (tokenName === 'BSHARE-BNB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BOMB-BSHARE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n        // } else if (tokenName === 'BSHARE-BNB-APELP') {\n        //   tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BUSM-BUSD-LP') {\n        tokenPrice = await this.getBusdLPTokenPrice(token, this.BUSM, true);\n      } else if (tokenName === '80BOMB-20BTCB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028',\n        );\n      } else if (tokenName === '80BSHARE-20WBNB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0x2c374ed1575e5c2c02c569f627299e902a1972cb000200000000000000000027',\n        );\n      }\n      else if (tokenName === 'BBOND') {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(this.BOMB);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n\n\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    //console.log({ tokenPrice });\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryBombPrice = await Treasury.getBombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryBombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForBomb = await Treasury.getBombPrice();\n\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForBomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(this.currentBoardroom().address);\n    const bombStakeBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const bombTVL = Number(getDisplayBalance(bombStakeBalanceOf, this.BOMB.decimal)) * Number(BOMBPrice);\n\n    return totalValue + boardroomTVL + bombTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getBusdLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceToken = await this.getTokenPriceFromPancakeswapBUSD(this.BUSM);\n    const priceOfToken = Number(priceToken);\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async getMaxiLPTokenPrice(maxiPool: string): Promise<string> {\n    const bombmaxi = await this.getBombMaxiStats(maxiPool);\n    const totalShares = await bombmaxi.totalShares;\n    //Get amount of tokenA\n    const totalLiquidity = await bombmaxi.totalLiquidity;\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n\n    const tokenInLP = Number(totalLiquidity) / Number(totalShares);\n    const tokenPrice = tokenInLP //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'BOMB') {\n        return await pool.pendingBOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Boardroom;\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { WBNB } = this.config.externalTokens;\n\n    const wftm = new Token(56, WBNB[0], WBNB[1], 'WBNB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBUSD(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const wftm = new Token(56, BUSD[0], BUSD[1], 'BUSD');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    // const {WBNB} = this.config.externalTokens;\n\n    // const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      //   console.log('priceInBUSDBTC', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBOMBUSD(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    //const {WBNB} = this.config.externalTokens;\n\n    //  const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, this.BOMB.address, this.BOMB.decimal, this.BOMB.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      // console.log('test', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${this.BOMB.symbol}: ${err}`);\n    }\n  }\n\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { chainId } = this.config;\n\n  //   const { WBNB } = this.externalTokens;\n\n  //   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n  //   try {\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n  //     const liquidityToken = wftmToToken.liquidityToken;\n  //     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\n  //     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\n  //     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n  //     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n  //     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n  //     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n  //     return priceOfShiba.toString();\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n  //   }\n  // }\n\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WBNB, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-BNB-LP'];\n      let ftm_amount_BN = await WBNB.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WBNB.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WBNB: ${err}`);\n    }\n  }\n\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { BTCB } = this.externalTokens;\n    try {\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BTCB);\n\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\n\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\n      //console.log('btcprice', btcprice);\n      return btcprice;\n    } catch (err) {\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\n    }\n  }\n\n  // async getBTCBPriceFromPancakeswap(): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { BTCB, FUSDT } = this.externalTokens;\n  //   try {\n  //     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\n  //     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\n  //     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n  //     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\n  //     return (fusdt_amount / ftm_amount).toString();\n  //     console.log('BTCB price');\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of BTCB: ${err}`);\n  //   }\n  // }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getBoardroomAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(Boardroom.address);\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\n    return realAPR;\n  }\n\n  async getBombStakeAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const xBombBombBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n    const bombTVL = Number(getDisplayBalance(xBombBombBalanceOf, this.XBOMB.decimal)) * Number(BOMBPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100 * 0.2) / bombTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.BSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\n    // const Boardroom = this.currentBoardroom();\n    // const mason = await Boardroom.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.totalSupply();\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the BSHARE again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async stakeToBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.enter(decimalToBalance(amount));\n  }\n\n  async redeemFromBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BOMB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n\n  async redeemFromBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BTCB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n  async supplyToBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BTCB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async supplyToBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BOMB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.balanceOf(this.myAccount);\n  }\n\n  async getTotalStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const bomb = this.BOMB;\n    return await bomb.balanceOf(Xbomb.address);\n  }\n\n  async getTotalSuppliedBomb(): Promise<BigNumber> {\n    const bbombBomb = this.BOMB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBomb = await bbombBomb.totalBalance();\n    //  const borrowBomb = await bbombBomb.totalBorrows();\n    // const totalSupplied = totalBomb + borrowBomb;\n    return totalBomb;\n  }\n\n  async getTotalSuppliedBtcb(): Promise<BigNumber> {\n    const bbombBomb = this.BTCB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBtcb = await bbombBomb.totalBalance();\n    //const borrowBtcb = await bbombBomb.totalBorrows();\n    //  const totalSupplied = totalBtcb + borrowBtcb;\n    return totalBtcb;\n  }\n\n  async getXbombExchange(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const XbombExchange = await Xbomb.getExchangeRate();\n\n    const xBombPerBomb = parseFloat(XbombExchange) / 1000000000000000000;\n    const xBombRate = xBombPerBomb.toString();\n    return parseUnits(xBombRate, 18);\n  }\n\n  async withdrawFromBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.leave(decimalToBalance(amount));\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'BOMB') {\n        asset = this.BOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png';\n      } else if (assetName === 'BSHARE') {\n        asset = this.BSHARE;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bshare-512.png';\n      } else if (assetName === 'BBOND') {\n        asset = this.BBOND;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bbond-512.png';\n      } else if (assetName === 'XBOMB') {\n        asset = this.XBOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/xbomb-512.png';\n      } else if (assetName === 'BTCB') {\n        asset = this.BTC;\n        assetUrl = 'https://bscscan.com/token/images/btcb_32.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideBombFtmLP(ftmAmount: string, bombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(\n      bombAmount,\n      bombAmount.mul(992).div(1000),\n      parseUnits(ftmAmount, 18).mul(992).div(1000),\n      overrides,\n    );\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.BOMBBTCB_LP.getReserves();\n    let quote;\n    if (tokenName === 'BOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\n    var events: any[] = [];\n    boardroomFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === BNB_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === BNB_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapBBondToBShare(bbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { BShareSwapper } = this.contracts;\n    return await BShareSwapper.swapBBondToBShare(bbondAmount);\n  }\n  async estimateAmountOfBShare(bbondAmount: string): Promise<string> {\n    const { BShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await BShareSwapper.estimateAmountOfBShare(parseUnits(bbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate bshare amount: ${err}`);\n    }\n  }\n\n  async getBShareSwapperStat(address: string): Promise<BShareSwapperStat> {\n    const { BShareSwapper } = this.contracts;\n    const bshareBalanceBN = await BShareSwapper.getBShareBalance();\n    const bbondBalanceBN = await BShareSwapper.getBBondBalance(address);\n    // const bombPriceBN = await BShareSwapper.getBombPrice();\n    // const bsharePriceBN = await BShareSwapper.getBSharePrice();\n    const rateBSharePerBombBN = await BShareSwapper.getBShareAmountPerBomb();\n    const bshareBalance = getDisplayBalance(bshareBalanceBN, 18, 5);\n    const bbondBalance = getDisplayBalance(bbondBalanceBN, 18, 5);\n    return {\n      bshareBalance: bshareBalance.toString(),\n      bbondBalance: bbondBalance.toString(),\n      // bombPrice: bombPriceBN.toString(),\n      // bsharePrice: bsharePriceBN.toString(),\n      rateBSharePerBomb: rateBSharePerBombBN.toString(),\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}