{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src';\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar LedgerConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(LedgerConnector, _AbstractConnector);\n  function LedgerConnector(_ref) {\n    var _this;\n    var chainId = _ref.chainId,\n      url = _ref.url,\n      pollingInterval = _ref.pollingInterval,\n      requestTimeoutMs = _ref.requestTimeoutMs,\n      accountFetchingConfigs = _ref.accountFetchingConfigs,\n      baseDerivationPath = _ref.baseDerivationPath;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.accountFetchingConfigs = accountFetchingConfigs;\n    _this.baseDerivationPath = baseDerivationPath;\n    return _this;\n  }\n  var _proto = LedgerConnector.prototype;\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n      if (!_this3.provider) {\n        var engine = new Web3ProviderEngine({\n          pollingInterval: _this3.pollingInterval\n        });\n        engine.addProvider(new LedgerSubprovider({\n          networkId: _this3.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: _this3.accountFetchingConfigs,\n          baseDerivationPath: _this3.baseDerivationPath\n        }));\n        engine.addProvider(new CacheSubprovider());\n        engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n        _this3.provider = engine;\n      }\n      _this3.provider.start();\n      return Promise.resolve({\n        provider: _this3.provider,\n        chainId: _this3.chainId\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n  return LedgerConnector;\n}(AbstractConnector);\nexport { LedgerConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["LedgerConnector","AbstractConnector","chainId","url","pollingInterval","requestTimeoutMs","accountFetchingConfigs","baseDerivationPath","supportedChainIds","activate","provider","engine","Web3ProviderEngine","addProvider","LedgerSubprovider","networkId","ledgerEthereumClientFactoryAsync","ledgerEthereumBrowserClientFactoryAsync","CacheSubprovider","RPCSubprovider","start","getProvider","getChainId","getAccount","_providers","getAccountsAsync","then","accounts","deactivate","stop"],"mappings":";;;;;;;;;;;;;;;;;;IAiBaA,eAAb,GAAA,aAAA,UAAA,kBAAA,EAAA;EAAA,cAAA,CAAA,eAAA,EAAA,kBAAA,CAAA;EAUE,SAAA,eAAA,CAAA,IAAA,EAAA;;QACEE,OAAAA,GAAAA,IAAAA,CAAAA,OAAAA;MACAC,GAAAA,GAAAA,IAAAA,CAAAA,GAAAA;MACAC,eAAAA,GAAAA,IAAAA,CAAAA,eAAAA;MACAC,gBAAAA,GAAAA,IAAAA,CAAAA,gBAAAA;MACAC,sBAAAA,GAAAA,IAAAA,CAAAA,sBAAAA;MACAC,kBAAAA,GAAAA,IAAAA,CAAAA,kBAAAA;IAEA,KAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MAAEC,iBAAiB,EAAE,CAACN,OAAD;IAArB,CAAN,CAAA,IAAA,IAAA;IAEA,KAAA,CAAKA,OAAL,GAAeA,OAAf;IACA,KAAA,CAAKC,GAAL,GAAWA,GAAX;IACA,KAAA,CAAKC,eAAL,GAAuBA,eAAvB;IACA,KAAA,CAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAA,CAAKC,sBAAL,GAA8BA,sBAA9B;IACA,KAAA,CAAKC,kBAAL,GAA0BA,kBAA1B;;EACD;EA1BH,IAAA,MAAA,GAAA,eAAA,CAAA,SAAA;EAAA,MAAA,CA4BeE,QA5Bf,GAAA,SAAA,QAAA,CAAA,EAAA;IAAA,IAAA;mBA6BS,IAAA;MAAL,IAAI,CAAC,MAAA,CAAKC,QAAV,EAAoB;QAClB,IAAMC,MAAM,GAAG,IAAIC,kBAAJ,CAAuB;UAAER,eAAe,EAAE,MAAA,CAAKA;QAAxB,CAAvB,CAAf;QACAO,MAAM,CAACE,WAAPF,CACE,IAAIG,iBAAJ,CAAsB;UACpBC,SAAS,EAAE,MAAA,CAAKb,OADI;UAEpBc,gCAAgC,EAAEC,uCAFd;UAGpBX,sBAAsB,EAAE,MAAA,CAAKA,sBAHT;UAIpBC,kBAAkB,EAAE,MAAA,CAAKA;QAJL,CAAtB,CADFI,CAAAA;QAQAA,MAAM,CAACE,WAAPF,CAAmB,IAAIO,gBAAJ,EAAnBP,CAAAA;QACAA,MAAM,CAACE,WAAPF,CAAmB,IAAIQ,cAAJ,CAAmB,MAAA,CAAKhB,GAAxB,EAA6B,MAAA,CAAKE,gBAAlC,CAAnBM,CAAAA;QACA,MAAA,CAAKD,QAAL,GAAgBC,MAAhB;MACD;MAED,MAAA,CAAKD,QAAL,CAAcU,KAAd,EAAA;MAEA,OAAA,OAAA,CAAA,OAAA,CAAO;QAAEV,QAAQ,EAAE,MAAA,CAAKA,QAAjB;QAA2BR,OAAO,EAAE,MAAA,CAAKA;MAAzC,CAAP,CAAA;IACD,CA/CH,CAAA,OAAA,CAAA,EAAA;MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAAA;EAAA,CAAA;EAAA,MAAA,CAiDemB,WAjDf,GAAA,SAAA,WAAA,CAAA,EAAA;IAAA,IAAA;mBAkDW,IAAA;MAAP,OAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKX,QAAZ,CAAA;IACD,CAnDH,CAAA,OAAA,CAAA,EAAA;MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAAA;EAAA,CAAA;EAAA,MAAA,CAqDeY,UArDf,GAAA,SAAA,UAAA,CAAA,EAAA;IAAA,IAAA;mBAsDW,IAAA;MAAP,OAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKpB,OAAZ,CAAA;IACD,CAvDH,CAAA,OAAA,CAAA,EAAA;MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAAA;EAAA,CAAA;EAAA,MAAA,CAyDeqB,UAzDf,GAAA,SAAA,UAAA,CAAA,EAAA;IAAA,IAAA;mBA0DW,IAAA;MAAP,OAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKb,QAAL,CAAcc,UAAd,CAAyB,CAAzB,CAAA,CAA4BC,gBAA5B,CAA6C,CAA7C,CAAA,CAAgDC,IAAhD,CAAqD,UAACC,QAAD,EAAA;QAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;MAAA,CAArD,CAAP,CAAA;IACD,CA3DH,CAAA,OAAA,CAAA,EAAA;MAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IAAA;EAAA,CAAA;EAAA,MAAA,CA6DSC,UA7DT,GA6DSA,SAAAA,UAAAA,CAAAA,EAAAA;IACL,IAAA,CAAKlB,QAAL,CAAcmB,IAAd,EAAA;EACD,CA/DH;EAAA,OAAA,eAAA;AAAA,CAAA,CAAqC5B,iBAArC,CAAA","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface LedgerConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  accountFetchingConfigs?: any\n  baseDerivationPath?: string\n}\n\nexport class LedgerConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly accountFetchingConfigs?: any\n  private readonly baseDerivationPath?: string\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n    accountFetchingConfigs,\n    baseDerivationPath\n  }: LedgerConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.accountFetchingConfigs = accountFetchingConfigs\n    this.baseDerivationPath = baseDerivationPath\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(\n        new LedgerSubprovider({\n          networkId: this.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: this.accountFetchingConfigs,\n          baseDerivationPath: this.baseDerivationPath\n        })\n      )\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}