{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCachedUrl = exports.storeCachedURI = void 0;\n// 24 hour TTL\nvar DEFAULT_CACHE_TTL = 60 * 60 * 24 * 1000;\nvar getCache = function getCache() {\n  var cache = window.localStorage.getItem('davatar/cache');\n  if (!cache) {\n    window.localStorage.setItem('davatar/cache', '{}');\n    return {};\n  }\n  return JSON.parse(cache);\n};\nvar saveCache = function saveCache(cache) {\n  return window.localStorage.setItem('davatar/cache', JSON.stringify(cache));\n};\nvar storeCachedURI = function storeCachedURI(address, resolvedUrl, ttl) {\n  var cache = getCache();\n  var normalizedAddress = address.toLowerCase();\n  var item = cache[normalizedAddress];\n  if (!item || new Date(item.expiresAt) > new Date()) {\n    var expireDate = new Date(new Date().getTime() + (ttl || DEFAULT_CACHE_TTL));\n    cache[normalizedAddress] = {\n      url: resolvedUrl,\n      expiresAt: expireDate.toString()\n    };\n    saveCache(cache);\n  }\n};\nexports.storeCachedURI = storeCachedURI;\n/**\n * Get cached resolved url from local storage\n *\n * @param key - an ethereum address or an avatar URI\n */\nvar getCachedUrl = function getCachedUrl(key) {\n  var cache = getCache();\n  var normalizedKey = key.toLowerCase();\n  var item = cache[normalizedKey];\n  if (item) {\n    if (new Date(item.expiresAt) > new Date()) {\n      return item.url;\n    }\n  }\n  return null;\n};\nexports.getCachedUrl = getCachedUrl;","map":{"version":3,"sources":["../src/cache.ts"],"names":[],"mappings":";;;;;;AAAA;AACA,IAAM,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAM7C,IAAM,QAAQ,GAAG,SAAX,QAAQ,CAAA,EAAsB;EAClC,IAAM,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC;EAC1D,IAAI,CAAC,KAAK,EAAE;IACV,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;IAClD,OAAO,CAAA,CAAE;EACV;EAED,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;AAC1B,CAAC;AAED,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,KAAmB;EAAA,OAAK,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAAA;AAEvG,IAAM,cAAc,GAAG,SAAjB,cAAc,CAAI,OAAe,EAAE,WAAmB,EAAE,GAAY,EAAI;EACnF,IAAM,KAAK,GAAG,QAAQ,EAAE;EACxB,IAAM,iBAAiB,GAAG,OAAO,CAAC,WAAW,EAAE;EAC/C,IAAM,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC;EAErC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,EAAE;IAClD,IAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,GAAG,IAAI,iBAAiB,CAAC,CAAC;IAE9E,KAAK,CAAC,iBAAiB,CAAC,GAAG;MAAE,GAAG,EAAE,WAAW;MAAE,SAAS,EAAE,UAAU,CAAC,QAAQ;IAAE,CAAE;IACjF,SAAS,CAAC,KAAK,CAAC;EACjB;AACH,CAAC;AAXY,OAAA,CAAA,cAAc,GAAA,cAAA;AAa3B;;;;AAIG;AACI,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,GAAW,EAAI;EAC1C,IAAM,KAAK,GAAG,QAAQ,EAAE;EACxB,IAAM,aAAa,GAAG,GAAG,CAAC,WAAW,EAAE;EACvC,IAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC;EAEjC,IAAI,IAAI,EAAE;IACR,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,EAAE;MACzC,OAAO,IAAI,CAAC,GAAG;IAChB;EACF;EAED,OAAO,IAAI;AACb,CAAC;AAZY,OAAA,CAAA,YAAY,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCachedUrl = exports.storeCachedURI = void 0;\n// 24 hour TTL\nconst DEFAULT_CACHE_TTL = 60 * 60 * 24 * 1000;\nconst getCache = () => {\n    const cache = window.localStorage.getItem('davatar/cache');\n    if (!cache) {\n        window.localStorage.setItem('davatar/cache', '{}');\n        return {};\n    }\n    return JSON.parse(cache);\n};\nconst saveCache = (cache) => window.localStorage.setItem('davatar/cache', JSON.stringify(cache));\nconst storeCachedURI = (address, resolvedUrl, ttl) => {\n    const cache = getCache();\n    const normalizedAddress = address.toLowerCase();\n    const item = cache[normalizedAddress];\n    if (!item || new Date(item.expiresAt) > new Date()) {\n        const expireDate = new Date(new Date().getTime() + (ttl || DEFAULT_CACHE_TTL));\n        cache[normalizedAddress] = { url: resolvedUrl, expiresAt: expireDate.toString() };\n        saveCache(cache);\n    }\n};\nexports.storeCachedURI = storeCachedURI;\n/**\n * Get cached resolved url from local storage\n *\n * @param key - an ethereum address or an avatar URI\n */\nconst getCachedUrl = (key) => {\n    const cache = getCache();\n    const normalizedKey = key.toLowerCase();\n    const item = cache[normalizedKey];\n    if (item) {\n        if (new Date(item.expiresAt) > new Date()) {\n            return item.url;\n        }\n    }\n    return null;\n};\nexports.getCachedUrl = getCachedUrl;\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"script"}