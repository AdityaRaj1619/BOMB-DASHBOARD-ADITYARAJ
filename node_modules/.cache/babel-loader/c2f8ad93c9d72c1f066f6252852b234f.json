{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var execOptionsRef = useRef();\n  var optionsRef = useRef();\n  var queryRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  optionsRef.current = merged;\n  queryRef.current = document;\n  var internalState = useInternalState(useApolloClient(options && options.client), document);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function _loop_1(key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = internalState.executeQuery(__assign(__assign({}, options), {\n      skip: false\n    })).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const optionsRef = useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = useRef<DocumentNode | TypedDocumentNode<TData, TVariables>>();\n  const merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute` \n  // function remains referentially stable between renders.\n  optionsRef.current = merged;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const options = mergeOptions(optionsRef.current, {\n      query: queryRef.current,\n      ...execOptionsRef.current,\n    })\n\n    const promise = internalState\n      .executeQuery({ ...options, skip: false }) \n      .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}