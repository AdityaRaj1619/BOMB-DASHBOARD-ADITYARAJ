{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\src\\\\contexts\\\\Banks\\\\Banks.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport config, { bankDefinitions } from '../../config';\nconst Banks = _ref => {\n  let {\n    children\n  } = _ref;\n  const [banks, setBanks] = useState([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchPools = useCallback(async () => {\n    const banks = [];\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await bombFinance.stakedBalanceOnBank(bankInfo.contract, bankInfo.poolId, bombFinance.myAccount);\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE\n      });\n    }\n    banks.sort((a, b) => a.sort > b.sort ? 1 : -1);\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch(err => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      banks\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport default Banks;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Context","useBombFinance","config","bankDefinitions","Banks","_ref","children","banks","setBanks","bombFinance","isUnlocked","fetchPools","bankInfo","Object","values","finished","balance","stakedBalanceOnBank","contract","poolId","myAccount","lte","push","address","deployments","depositToken","externalTokens","depositTokenName","earnToken","earnTokenName","BOMB","BSHARE","sort","a","b","catch","err","console","error","stack","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/contexts/Banks/Banks.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport {Bank} from '../../bomb-finance';\nimport config, {bankDefinitions} from '../../config';\n\nconst Banks: React.FC = ({children}) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await bombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          bombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC7D,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,cAAc,MAAM,4BAA4B;AAEvD,OAAOC,MAAM,IAAGC,eAAe,QAAO,cAAc;AAEpD,MAAMC,KAAe,GAAGC,IAAA,IAAgB;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAD,IAAA;EACjC,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAMU,WAAW,GAAGR,cAAc,EAAE;EACpC,MAAMS,UAAU,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,UAAU;EAE1C,MAAMC,UAAU,GAAGd,WAAW,CAAC,YAAY;IACzC,MAAMU,KAAa,GAAG,EAAE;IAExB,KAAK,MAAMK,QAAQ,IAAIC,MAAM,CAACC,MAAM,CAACX,eAAe,CAAC,EAAE;MACrD,IAAIS,QAAQ,CAACG,QAAQ,EAAE;QACrB,IAAI,CAACN,WAAW,CAACC,UAAU,EAAE;;QAE7B;QACA,MAAMM,OAAO,GAAG,MAAMP,WAAW,CAACQ,mBAAmB,CACnDL,QAAQ,CAACM,QAAQ,EACjBN,QAAQ,CAACO,MAAM,EACfV,WAAW,CAACW,SAAS,CACtB;QACD,IAAIJ,OAAO,CAACK,GAAG,CAAC,CAAC,CAAC,EAAE;UAClB;QACF;MACF;MACAd,KAAK,CAACe,IAAI,CAAC;QACT,GAAGV,QAAQ;QACXW,OAAO,EAAErB,MAAM,CAACsB,WAAW,CAACZ,QAAQ,CAACM,QAAQ,CAAC,CAACK,OAAO;QACtDE,YAAY,EAAEhB,WAAW,CAACiB,cAAc,CAACd,QAAQ,CAACe,gBAAgB,CAAC;QACnEC,SAAS,EAAEhB,QAAQ,CAACiB,aAAa,KAAK,MAAM,GAAGpB,WAAW,CAACqB,IAAI,GAAGrB,WAAW,CAACsB;MAChF,CAAC,CAAC;IACJ;IACAxB,KAAK,CAACyB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACD,IAAI,GAAGE,CAAC,CAACF,IAAI,GAAG,CAAC,GAAG,CAAC,CAAE,CAAC;IAChDxB,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC,EAAE,CAACE,WAAW,EAAED,QAAQ,CAAC,CAAC;EAE3BV,SAAS,CAAC,MAAM;IACd,IAAIW,WAAW,EAAE;MACfE,UAAU,EAAE,CAACwB,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAE,0BAAyBF,GAAG,CAACG,KAAM,EAAC,CAAC,CAAC;IACnF;EACF,CAAC,EAAE,CAAC7B,UAAU,EAAED,WAAW,EAAEE,UAAU,CAAC,CAAC;EAEzC,oBAAOf,KAAA,CAAA4C,aAAA,CAACxC,OAAO,CAACyC,QAAQ;IAACC,KAAK,EAAE;MAACnC;IAAK,CAAE;IAAAoC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAE1C,QAAQ,CAAoB;AACxE,CAAC;AAED,eAAeF,KAAK"},"metadata":{},"sourceType":"module"}