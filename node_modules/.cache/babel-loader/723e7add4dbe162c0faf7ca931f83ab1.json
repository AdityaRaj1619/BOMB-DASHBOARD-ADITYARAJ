{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\nconst useStakedTokenPriceInDollars = (stakedTokenName, stakedToken) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, bombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, bombFinance, fetchBalance]);\n  return stakedTokenPriceInDollars;\n};\nexport default useStakedTokenPriceInDollars;","map":{"version":3,"names":["useCallback","useEffect","useState","useBombFinance","config","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","bombFinance","isUnlocked","fetchBalance","balance","getDepositTokenPriceInDollars","catch","err","console","error","stack","refreshStakedTokenPriceInDollars","setInterval","refreshInterval","clearInterval"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useStakedTokenPriceInDollars.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\n\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\nimport ERC20 from '../bomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, bombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, bombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEtD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,MAAM,MAAM,WAAW;AAG9B,MAAMC,4BAA4B,GAAGA,CAACC,eAAuB,EAAEC,WAAkB,KAAK;EACpF,MAAM,CAACC,yBAAyB,EAAEC,4BAA4B,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;EAC/E,MAAMQ,WAAW,GAAGP,cAAc,EAAE;EACpC,MAAMQ,UAAU,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,UAAU;EAE1C,MAAMC,YAAY,GAAGZ,WAAW,CAAC,YAAY;IAC3C,MAAMa,OAAO,GAAG,MAAMH,WAAW,CAACI,6BAA6B,CAACR,eAAe,EAAEC,WAAW,CAAC;IAC7FE,4BAA4B,CAACI,OAAO,CAAC;EACvC,CAAC,EAAE,CAACN,WAAW,EAAED,eAAe,EAAEI,WAAW,CAAC,CAAC;EAE/CT,SAAS,CAAC,MAAM;IACd,IAAIU,UAAU,EAAE;MACdC,YAAY,EAAE,CAACG,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC;MAEvD,MAAMC,gCAAgC,GAAGC,WAAW,CAACT,YAAY,EAAER,MAAM,CAACkB,eAAe,CAAC;MAC1F,OAAO,MAAMC,aAAa,CAACH,gCAAgC,CAAC;IAC9D;EACF,CAAC,EAAE,CAACT,UAAU,EAAEF,4BAA4B,EAAEC,WAAW,EAAEE,YAAY,CAAC,CAAC;EAEzE,OAAOJ,yBAAyB;AAClC,CAAC;AAED,eAAeH,4BAA4B"},"metadata":{},"sourceType":"module"}