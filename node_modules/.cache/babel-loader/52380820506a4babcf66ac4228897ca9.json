{"ast":null,"code":"import{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useWallet}from'use-wallet';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';import{getDefaultProvider}from'../../utils/provider';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;var blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;var minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}export default function Updater(){var _state$chainId;var _useWallet=useWallet(),chainId=_useWallet.chainId,ethereum=_useWallet.ethereum;var lastBlockNumber=useBlockNumber();var dispatch=useDispatch();var state=useSelector(function(state){return state.transactions;});var transactions=chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};// show popup on confirm\nvar addPopup=useAddPopup();useEffect(function(){if(!chainId||!ethereum||!lastBlockNumber){return;}var provider=getDefaultProvider();Object.keys(transactions).filter(function(hash){return shouldCheck(lastBlockNumber,transactions[hash]);}).forEach(function(hash){provider.getTransactionReceipt(hash).then(function(receipt){if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId:chainId,hash:hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash:hash,success:receipt.status===1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);}else{dispatch(checkedTransaction({chainId:chainId,hash:hash,blockNumber:lastBlockNumber}));}}).catch(function(error){console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,ethereum,transactions,lastBlockNumber,dispatch,addPopup]);return null;}","map":{"version":3,"names":["useEffect","useDispatch","useSelector","useWallet","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","getDefaultProvider","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","_state$chainId","_useWallet","chainId","ethereum","dispatch","state","transactions","addPopup","provider","Object","keys","filter","hash","forEach","getTransactionReceipt","then","_transactions$hash","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console","concat"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/state/transactions/updater.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}