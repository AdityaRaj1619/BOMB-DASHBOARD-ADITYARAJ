{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _ = require(\"lodash\");\nvar signature_parser_1 = require(\"./utils/signature_parser\");\nvar address_1 = require(\"./evm_data_types/address\");\nvar array_1 = require(\"./evm_data_types/array\");\nvar bool_1 = require(\"./evm_data_types/bool\");\nvar dynamic_bytes_1 = require(\"./evm_data_types/dynamic_bytes\");\nvar int_1 = require(\"./evm_data_types/int\");\nvar method_1 = require(\"./evm_data_types/method\");\nvar pointer_1 = require(\"./evm_data_types/pointer\");\nvar static_bytes_1 = require(\"./evm_data_types/static_bytes\");\nvar string_1 = require(\"./evm_data_types/string\");\nvar tuple_1 = require(\"./evm_data_types/tuple\");\nvar uint_1 = require(\"./evm_data_types/uint\");\nvar Address = /** @class */function (_super) {\n  __extends(Address, _super);\n  function Address(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Address;\n}(address_1.AddressDataType);\nexports.Address = Address;\nvar Bool = /** @class */function (_super) {\n  __extends(Bool, _super);\n  function Bool(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Bool;\n}(bool_1.BoolDataType);\nexports.Bool = Bool;\nvar Int = /** @class */function (_super) {\n  __extends(Int, _super);\n  function Int(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Int;\n}(int_1.IntDataType);\nexports.Int = Int;\nvar UInt = /** @class */function (_super) {\n  __extends(UInt, _super);\n  function UInt(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return UInt;\n}(uint_1.UIntDataType);\nexports.UInt = UInt;\nvar StaticBytes = /** @class */function (_super) {\n  __extends(StaticBytes, _super);\n  function StaticBytes(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return StaticBytes;\n}(static_bytes_1.StaticBytesDataType);\nexports.StaticBytes = StaticBytes;\nvar DynamicBytes = /** @class */function (_super) {\n  __extends(DynamicBytes, _super);\n  function DynamicBytes(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return DynamicBytes;\n}(dynamic_bytes_1.DynamicBytesDataType);\nexports.DynamicBytes = DynamicBytes;\nvar String = /** @class */function (_super) {\n  __extends(String, _super);\n  function String(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return String;\n}(string_1.StringDataType);\nexports.String = String;\nvar Pointer = /** @class */function (_super) {\n  __extends(Pointer, _super);\n  function Pointer(destDataType, parentDataType) {\n    return _super.call(this, destDataType, parentDataType, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Pointer;\n}(pointer_1.PointerDataType);\nexports.Pointer = Pointer;\nvar Tuple = /** @class */function (_super) {\n  __extends(Tuple, _super);\n  function Tuple(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Tuple;\n}(tuple_1.TupleDataType);\nexports.Tuple = Tuple;\nvar Array = /** @class */function (_super) {\n  __extends(Array, _super);\n  function Array(dataItem) {\n    return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Array;\n}(array_1.ArrayDataType);\nexports.Array = Array;\nvar Method = /** @class */function (_super) {\n  __extends(Method, _super);\n  function Method(abi) {\n    return _super.call(this, abi, EvmDataTypeFactory.getInstance()) || this;\n  }\n  return Method;\n}(method_1.MethodDataType);\nexports.Method = Method;\n/* tslint:disable no-construct */\nvar EvmDataTypeFactory = /** @class */function () {\n  /* tslint:enable prefer-function-over-method */\n  function EvmDataTypeFactory() {}\n  EvmDataTypeFactory.getInstance = function () {\n    if (!EvmDataTypeFactory._instance) {\n      EvmDataTypeFactory._instance = new EvmDataTypeFactory();\n    }\n    return EvmDataTypeFactory._instance;\n  };\n  /* tslint:disable prefer-function-over-method */\n  EvmDataTypeFactory.prototype.create = function (dataItem, parentDataType) {\n    // Create data type\n    var dataType;\n    if (Array.matchType(dataItem.type)) {\n      dataType = new Array(dataItem);\n    } else if (Address.matchType(dataItem.type)) {\n      dataType = new Address(dataItem);\n    } else if (Bool.matchType(dataItem.type)) {\n      dataType = new Bool(dataItem);\n    } else if (Int.matchType(dataItem.type)) {\n      dataType = new Int(dataItem);\n    } else if (UInt.matchType(dataItem.type)) {\n      dataType = new UInt(dataItem);\n    } else if (StaticBytes.matchType(dataItem.type)) {\n      dataType = new StaticBytes(dataItem);\n    } else if (Tuple.matchType(dataItem.type)) {\n      dataType = new Tuple(dataItem);\n    } else if (DynamicBytes.matchType(dataItem.type)) {\n      dataType = new DynamicBytes(dataItem);\n    } else if (String.matchType(dataItem.type)) {\n      dataType = new String(dataItem);\n    }\n    // @TODO: DataTypeement Fixed/UFixed types\n    if (dataType === undefined) {\n      throw new Error(\"Unrecognized data type: '\" + dataItem.type + \"'\");\n    } else if (parentDataType !== undefined && !dataType.isStatic()) {\n      var pointerToDataType = new Pointer(dataType, parentDataType);\n      return pointerToDataType;\n    }\n    return dataType;\n  };\n  return EvmDataTypeFactory;\n}();\nexports.EvmDataTypeFactory = EvmDataTypeFactory;\n/**\n * Convenience function for creating a DataType from different inputs.\n * @param input A single or set of DataItem or a signature for an EVM data type.\n * @return DataType corresponding to input.\n */\nfunction create(input) {\n  var dataItem = consolidateDataItemsIntoSingle(input);\n  var dataType = EvmDataTypeFactory.getInstance().create(dataItem);\n  return dataType;\n}\nexports.create = create;\n/**\n * Convenience function to aggregate a single input or a set of inputs into a single DataItem.\n * An array of data items is grouped into a single tuple.\n * @param input A single data item; a set of data items; a signature.\n * @return A single data item corresponding to input.\n */\nfunction consolidateDataItemsIntoSingle(input) {\n  var dataItem;\n  if (_.isArray(input)) {\n    var dataItems = input;\n    dataItem = {\n      name: '',\n      type: 'tuple',\n      components: dataItems\n    };\n  } else {\n    dataItem = _.isString(input) ? signature_parser_1.generateDataItemFromSignature(input) : input;\n  }\n  return dataItem;\n}\n/**\n * Convenience function for creating a Method encoder from different inputs.\n * @param methodName name of method.\n * @param input A single data item; a set of data items; a signature; or an array of signatures (optional).\n * @param output A single data item; a set of data items; a signature; or an array of signatures (optional).\n * @return Method corresponding to input.\n */\nfunction createMethod(methodName, input, output) {\n  var methodInput = input === undefined ? [] : consolidateDataItemsIntoArray(input);\n  var methodOutput = output === undefined ? [] : consolidateDataItemsIntoArray(output);\n  var methodAbi = {\n    name: methodName,\n    inputs: methodInput,\n    outputs: methodOutput,\n    type: 'function',\n    // default fields not used by ABI\n    constant: false,\n    payable: false,\n    stateMutability: 'nonpayable'\n  };\n  var dataType = new Method(methodAbi);\n  return dataType;\n}\nexports.createMethod = createMethod;\n/**\n * Convenience function that aggregates a single input or a set of inputs into an array of DataItems.\n * @param input A single data item; a set of data items; a signature; or an array of signatures.\n * @return Array of data items corresponding to input.\n */\nfunction consolidateDataItemsIntoArray(input) {\n  var dataItems;\n  if (_.isArray(input) && _.isEmpty(input)) {\n    dataItems = [];\n  } else if (_.isArray(input) && _.isString(input[0])) {\n    dataItems = [];\n    _.each(input, function (signature) {\n      var dataItem = signature_parser_1.generateDataItemFromSignature(signature);\n      dataItems.push(dataItem);\n    });\n  } else if (_.isArray(input)) {\n    dataItems = input;\n  } else if (typeof input === 'string') {\n    var dataItem = signature_parser_1.generateDataItemFromSignature(input);\n    dataItems = [dataItem];\n  } else {\n    dataItems = [input];\n  }\n  return dataItems;\n}\n/* tslint:enable no-construct */","map":{"version":3,"sources":["../../../src/abi_encoder/evm_data_type_factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"lodash\");\nvar signature_parser_1 = require(\"./utils/signature_parser\");\nvar address_1 = require(\"./evm_data_types/address\");\nvar array_1 = require(\"./evm_data_types/array\");\nvar bool_1 = require(\"./evm_data_types/bool\");\nvar dynamic_bytes_1 = require(\"./evm_data_types/dynamic_bytes\");\nvar int_1 = require(\"./evm_data_types/int\");\nvar method_1 = require(\"./evm_data_types/method\");\nvar pointer_1 = require(\"./evm_data_types/pointer\");\nvar static_bytes_1 = require(\"./evm_data_types/static_bytes\");\nvar string_1 = require(\"./evm_data_types/string\");\nvar tuple_1 = require(\"./evm_data_types/tuple\");\nvar uint_1 = require(\"./evm_data_types/uint\");\nvar Address = /** @class */ (function (_super) {\n    __extends(Address, _super);\n    function Address(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Address;\n}(address_1.AddressDataType));\nexports.Address = Address;\nvar Bool = /** @class */ (function (_super) {\n    __extends(Bool, _super);\n    function Bool(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Bool;\n}(bool_1.BoolDataType));\nexports.Bool = Bool;\nvar Int = /** @class */ (function (_super) {\n    __extends(Int, _super);\n    function Int(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Int;\n}(int_1.IntDataType));\nexports.Int = Int;\nvar UInt = /** @class */ (function (_super) {\n    __extends(UInt, _super);\n    function UInt(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return UInt;\n}(uint_1.UIntDataType));\nexports.UInt = UInt;\nvar StaticBytes = /** @class */ (function (_super) {\n    __extends(StaticBytes, _super);\n    function StaticBytes(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return StaticBytes;\n}(static_bytes_1.StaticBytesDataType));\nexports.StaticBytes = StaticBytes;\nvar DynamicBytes = /** @class */ (function (_super) {\n    __extends(DynamicBytes, _super);\n    function DynamicBytes(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return DynamicBytes;\n}(dynamic_bytes_1.DynamicBytesDataType));\nexports.DynamicBytes = DynamicBytes;\nvar String = /** @class */ (function (_super) {\n    __extends(String, _super);\n    function String(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return String;\n}(string_1.StringDataType));\nexports.String = String;\nvar Pointer = /** @class */ (function (_super) {\n    __extends(Pointer, _super);\n    function Pointer(destDataType, parentDataType) {\n        return _super.call(this, destDataType, parentDataType, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Pointer;\n}(pointer_1.PointerDataType));\nexports.Pointer = Pointer;\nvar Tuple = /** @class */ (function (_super) {\n    __extends(Tuple, _super);\n    function Tuple(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Tuple;\n}(tuple_1.TupleDataType));\nexports.Tuple = Tuple;\nvar Array = /** @class */ (function (_super) {\n    __extends(Array, _super);\n    function Array(dataItem) {\n        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Array;\n}(array_1.ArrayDataType));\nexports.Array = Array;\nvar Method = /** @class */ (function (_super) {\n    __extends(Method, _super);\n    function Method(abi) {\n        return _super.call(this, abi, EvmDataTypeFactory.getInstance()) || this;\n    }\n    return Method;\n}(method_1.MethodDataType));\nexports.Method = Method;\n/* tslint:disable no-construct */\nvar EvmDataTypeFactory = /** @class */ (function () {\n    /* tslint:enable prefer-function-over-method */\n    function EvmDataTypeFactory() {\n    }\n    EvmDataTypeFactory.getInstance = function () {\n        if (!EvmDataTypeFactory._instance) {\n            EvmDataTypeFactory._instance = new EvmDataTypeFactory();\n        }\n        return EvmDataTypeFactory._instance;\n    };\n    /* tslint:disable prefer-function-over-method */\n    EvmDataTypeFactory.prototype.create = function (dataItem, parentDataType) {\n        // Create data type\n        var dataType;\n        if (Array.matchType(dataItem.type)) {\n            dataType = new Array(dataItem);\n        }\n        else if (Address.matchType(dataItem.type)) {\n            dataType = new Address(dataItem);\n        }\n        else if (Bool.matchType(dataItem.type)) {\n            dataType = new Bool(dataItem);\n        }\n        else if (Int.matchType(dataItem.type)) {\n            dataType = new Int(dataItem);\n        }\n        else if (UInt.matchType(dataItem.type)) {\n            dataType = new UInt(dataItem);\n        }\n        else if (StaticBytes.matchType(dataItem.type)) {\n            dataType = new StaticBytes(dataItem);\n        }\n        else if (Tuple.matchType(dataItem.type)) {\n            dataType = new Tuple(dataItem);\n        }\n        else if (DynamicBytes.matchType(dataItem.type)) {\n            dataType = new DynamicBytes(dataItem);\n        }\n        else if (String.matchType(dataItem.type)) {\n            dataType = new String(dataItem);\n        }\n        // @TODO: DataTypeement Fixed/UFixed types\n        if (dataType === undefined) {\n            throw new Error(\"Unrecognized data type: '\" + dataItem.type + \"'\");\n        }\n        else if (parentDataType !== undefined && !dataType.isStatic()) {\n            var pointerToDataType = new Pointer(dataType, parentDataType);\n            return pointerToDataType;\n        }\n        return dataType;\n    };\n    return EvmDataTypeFactory;\n}());\nexports.EvmDataTypeFactory = EvmDataTypeFactory;\n/**\n * Convenience function for creating a DataType from different inputs.\n * @param input A single or set of DataItem or a signature for an EVM data type.\n * @return DataType corresponding to input.\n */\nfunction create(input) {\n    var dataItem = consolidateDataItemsIntoSingle(input);\n    var dataType = EvmDataTypeFactory.getInstance().create(dataItem);\n    return dataType;\n}\nexports.create = create;\n/**\n * Convenience function to aggregate a single input or a set of inputs into a single DataItem.\n * An array of data items is grouped into a single tuple.\n * @param input A single data item; a set of data items; a signature.\n * @return A single data item corresponding to input.\n */\nfunction consolidateDataItemsIntoSingle(input) {\n    var dataItem;\n    if (_.isArray(input)) {\n        var dataItems = input;\n        dataItem = {\n            name: '',\n            type: 'tuple',\n            components: dataItems,\n        };\n    }\n    else {\n        dataItem = _.isString(input) ? signature_parser_1.generateDataItemFromSignature(input) : input;\n    }\n    return dataItem;\n}\n/**\n * Convenience function for creating a Method encoder from different inputs.\n * @param methodName name of method.\n * @param input A single data item; a set of data items; a signature; or an array of signatures (optional).\n * @param output A single data item; a set of data items; a signature; or an array of signatures (optional).\n * @return Method corresponding to input.\n */\nfunction createMethod(methodName, input, output) {\n    var methodInput = input === undefined ? [] : consolidateDataItemsIntoArray(input);\n    var methodOutput = output === undefined ? [] : consolidateDataItemsIntoArray(output);\n    var methodAbi = {\n        name: methodName,\n        inputs: methodInput,\n        outputs: methodOutput,\n        type: 'function',\n        // default fields not used by ABI\n        constant: false,\n        payable: false,\n        stateMutability: 'nonpayable',\n    };\n    var dataType = new Method(methodAbi);\n    return dataType;\n}\nexports.createMethod = createMethod;\n/**\n * Convenience function that aggregates a single input or a set of inputs into an array of DataItems.\n * @param input A single data item; a set of data items; a signature; or an array of signatures.\n * @return Array of data items corresponding to input.\n */\nfunction consolidateDataItemsIntoArray(input) {\n    var dataItems;\n    if (_.isArray(input) && _.isEmpty(input)) {\n        dataItems = [];\n    }\n    else if (_.isArray(input) && _.isString(input[0])) {\n        dataItems = [];\n        _.each(input, function (signature) {\n            var dataItem = signature_parser_1.generateDataItemFromSignature(signature);\n            dataItems.push(dataItem);\n        });\n    }\n    else if (_.isArray(input)) {\n        dataItems = input;\n    }\n    else if (typeof input === 'string') {\n        var dataItem = signature_parser_1.generateDataItemFromSignature(input);\n        dataItems = [dataItem];\n    }\n    else {\n        dataItems = [input];\n    }\n    return dataItems;\n}\n/* tslint:enable no-construct */\n//# sourceMappingURL=evm_data_type_factory.js.map"]},"metadata":{},"sourceType":"script"}