{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chalk_1 = require(\"chalk\");\nvar _ = require(\"lodash\");\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n  log: function log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    console.log.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n\n  header: function header(text, padStr) {\n    if (padStr === void 0) {\n      padStr = '=';\n    }\n    var padLength = TERMINAL_WIDTH - text.length;\n    var padLengthEnd = (padLength + 1) / 2;\n    var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n    var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n    console.log(padded); // tslint:disable-line:no-console\n  },\n\n  warn: function warn() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n\n  table: function table(columnarData) {\n    var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n      return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n    });\n    console.table(formattedColumnarData); // tslint:disable-line:no-console\n  },\n\n  logWithTime: function logWithTime(arg) {\n    exports.logUtils.log(\"[\" + chalk_1.default.gray(new Date().toLocaleTimeString()) + \"] \" + arg);\n  }\n};","map":{"version":3,"sources":["../../src/log_utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA,IAAM,sBAAsB,GAAG,EAAE;AACjC,IAAM,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAgB,CAAC,IAAI,sBAAsB;AAEpE,OAAA,CAAA,QAAQ,GAAG;EACpB,GAAG,EAAH,SAAA,IAAA,EAAA;IAAI,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACA,OAAO,CAAC,GAAG,CAAA,KAAA,CAAX,OAAO,EAAA,QAAA,CAAQ,IAAI,CAAA,CAAA,CAAE,CAAC;EAC1B,CAAC;;EACD,MAAM,EAAN,SAAA,OAAO,IAAY,EAAE,MAAoB,EAAA;IAApB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,GAAoB;IAAA;IACrC,IAAM,SAAS,GAAG,cAAc,GAAG,IAAI,CAAC,MAAM;IAC9C,IAAM,YAAY,GAAG,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC;IACxC,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,YAAY,EAAE,MAAM,CAAC;IACvE,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC;IACxD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;EACzB,CAAC;;EACD,IAAI,EAAJ,SAAA,KAAA,EAAA;IAAK,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACD,OAAO,CAAC,IAAI,CAAA,KAAA,CAAZ,OAAO,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAE,CAAC;EAC3B,CAAC;;EACD,KAAK,EAAL,SAAA,MAAM,YAAwC,EAAA;IAC1C,IAAM,qBAAqB,GAAG,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,UAAC,eAAoB,EAAE,QAAgB,EAAA;MAC3F,OAAA,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC,cAAc,EAAE,GAAG,eAAe;IAAhF,CAAgF,CACnF;IACD,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC1C,CAAC;;EACD,WAAW,EAAX,SAAA,YAAY,GAAW,EAAA;IACnB,OAAA,CAAA,QAAQ,CAAC,GAAG,CAAC,GAAA,GAAI,OAAA,CAAA,OAAK,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC,GAAA,IAAA,GAAK,GAAK,CAAC;EAC3E;CACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk_1 = require(\"chalk\");\nvar _ = require(\"lodash\");\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n    log: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.log.apply(console, __spread(args)); // tslint:disable-line:no-console\n    },\n    header: function (text, padStr) {\n        if (padStr === void 0) { padStr = '='; }\n        var padLength = TERMINAL_WIDTH - text.length;\n        var padLengthEnd = (padLength + 1) / 2;\n        var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n        var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n        console.log(padded); // tslint:disable-line:no-console\n    },\n    warn: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console\n    },\n    table: function (columnarData) {\n        var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n            return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n        });\n        console.table(formattedColumnarData); // tslint:disable-line:no-console\n    },\n    logWithTime: function (arg) {\n        exports.logUtils.log(\"[\" + chalk_1.default.gray(new Date().toLocaleTimeString()) + \"] \" + arg);\n    },\n};\n//# sourceMappingURL=log_utils.js.map"]},"metadata":{},"sourceType":"script"}