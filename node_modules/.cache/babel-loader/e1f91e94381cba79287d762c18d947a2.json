{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAltStatusMessage = exports.StatusCodes = exports.TransportStatusError = exports.TransportError = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _events2 = require(\"events\");\nvar _events3 = _interopRequireDefault(_events2);\nvar _errors = require(\"@ledgerhq/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n      return step(\"next\");\n    });\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nexports.TransportError = _errors.TransportError;\nexports.TransportStatusError = _errors.TransportStatusError;\nexports.StatusCodes = _errors.StatusCodes;\nexports.getAltStatusMessage = _errors.getAltStatusMessage;\n\n/**\n */\n\n/**\n */\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\n\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nvar Transport = function () {\n  function Transport() {\n    var _this = this;\n    _classCallCheck(this, Transport);\n    this.exchangeTimeout = 30000;\n    this._events = new _events3.default();\n    this.send = function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cla, ins, p1, p2) {\n        var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Buffer.alloc(0);\n        var statusList = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [_errors.StatusCodes.OK];\n        var response, sw;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(data.length >= 256)) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new _errors.TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n              case 2:\n                _context.next = 4;\n                return _this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n              case 4:\n                response = _context.sent;\n                sw = response.readUInt16BE(response.length - 2);\n                if (statusList.some(function (s) {\n                  return s === sw;\n                })) {\n                  _context.next = 8;\n                  break;\n                }\n                throw new _errors.TransportStatusError(sw);\n              case 8:\n                return _context.abrupt(\"return\", response);\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, _this);\n      }));\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.exchangeAtomicImpl = function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(f) {\n        var resolveBusy, busyPromise, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!_this.exchangeBusyPromise) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new _errors.TransportError(\"Transport race condition\", \"RaceCondition\");\n              case 2:\n                resolveBusy = void 0;\n                busyPromise = new Promise(function (r) {\n                  resolveBusy = r;\n                });\n                _this.exchangeBusyPromise = busyPromise;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return f();\n              case 8:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n              case 10:\n                _context2.prev = 10;\n                if (resolveBusy) resolveBusy();\n                _this.exchangeBusyPromise = null;\n                return _context2.finish(10);\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, _this, [[5,, 10, 14]]);\n      }));\n      return function (_x7) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this._appAPIlock = null;\n  }\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\n  const sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n  })\n   */\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\n  TransportFoo.open(descriptor).then(transport => ...)\n   */\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n  _createClass(Transport, [{\n    key: \"on\",\n    /**\n     * Listen to an event on an instance of transport.\n     * Transport implementation can have specific events. Here is the common events:\n     * * `\"disconnect\"` : triggered if Transport is disconnected\n     */\n    value: function on(eventName, cb) {\n      this._events.on(eventName, cb);\n    }\n\n    /**\n     * Stop listening to an event on an instance of transport.\n     */\n  }, {\n    key: \"off\",\n    value: function off(eventName, cb) {\n      this._events.removeListener(eventName, cb);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _events;\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      (_events = this._events).emit.apply(_events, [event].concat(_toConsumableArray(args)));\n    }\n\n    /**\n     * Enable or not logs of the binary exchange\n     */\n  }, {\n    key: \"setDebugMode\",\n    value: function setDebugMode() {\n      console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    }\n\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */\n  }, {\n    key: \"setExchangeTimeout\",\n    value: function setExchangeTimeout(exchangeTimeout) {\n      this.exchangeTimeout = exchangeTimeout;\n    }\n\n    /**\n     * wrapper on top of exchange to simplify work of the implementation.\n     * @param cla\n     * @param ins\n     * @param p1\n     * @param p2\n     * @param data\n     * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n     * @return a Promise of response buffer\n     */\n  }, {\n    key: \"decorateAppAPIMethods\",\n    value: function decorateAppAPIMethods(self, methods, scrambleKey) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var methodName = _step.value;\n          self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"decorateAppAPIMethod\",\n    value: function decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n      var _this2 = this;\n      return function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n          var _appAPIlock;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _appAPIlock = _this2._appAPIlock;\n                  if (!_appAPIlock) {\n                    _context3.next = 3;\n                    break;\n                  }\n                  return _context3.abrupt(\"return\", Promise.reject(new _errors.TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\")));\n                case 3:\n                  _context3.prev = 3;\n                  _this2._appAPIlock = methodName;\n                  _this2.setScrambleKey(scrambleKey);\n                  _context3.next = 8;\n                  return f.apply(ctx, args);\n                case 8:\n                  return _context3.abrupt(\"return\", _context3.sent);\n                case 9:\n                  _context3.prev = 9;\n                  _this2._appAPIlock = null;\n                  return _context3.finish(9);\n                case 12:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, _this2, [[3,, 9, 12]]);\n        }));\n        return function () {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n  }], [{\n    key: \"create\",\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */\n    value: function create() {\n      var _this3 = this;\n      var openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n      var listenTimeout = arguments[1];\n      return new Promise(function (resolve, reject) {\n        var found = false;\n        var sub = _this3.listen({\n          next: function next(e) {\n            found = true;\n            if (sub) sub.unsubscribe();\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n            _this3.open(e.descriptor, openTimeout).then(resolve, reject);\n          },\n          error: function error(e) {\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n            reject(e);\n          },\n          complete: function complete() {\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n            if (!found) {\n              reject(new _errors.TransportError(_this3.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n            }\n          }\n        });\n        var listenTimeoutId = listenTimeout ? setTimeout(function () {\n          sub.unsubscribe();\n          reject(new _errors.TransportError(_this3.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n        }, listenTimeout) : null;\n      });\n    }\n\n    // $FlowFixMe\n  }]);\n\n  return Transport;\n}();\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\nexports.default = Transport;","map":{"version":3,"sources":["../src/Transport.js"],"names":["TransportError","TransportStatusError","StatusCodes","getAltStatusMessage","Transport","exchangeTimeout","_events","eventName","cb","on","removeListener","event","args","emit","console","warn","send","cla","ins","p1","p2","data","Buffer","alloc","statusList","OK","length","response","exchange","concat","from","sw","readUInt16BE","some","s","openTimeout","listenTimeout","Promise","resolve","reject","found","sub","listen","next","unsubscribe","listenTimeoutId","clearTimeout","open","e","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","ErrorMessage_ListenTimeout","exchangeAtomicImpl","f","exchangeBusyPromise","resolveBusy","busyPromise","r","res","self","methods","scrambleKey","methodName","decorateAppAPIMethod","_appAPIlock","ctx","setScrambleKey","apply"],"mappings":"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","sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  +exchange: (apdu: Buffer) => Promise<Buffer>;\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  +setScrambleKey: (key: string) => void;\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  +close: () => Promise<void>;\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some(s => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async f => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportError(\"Transport race condition\", \"RaceCondition\");\n    }\n    let resolveBusy;\n    const busyPromise = new Promise(r => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    try {\n      const res = await f();\n      return res;\n    } finally {\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"]},"metadata":{},"sourceType":"script"}