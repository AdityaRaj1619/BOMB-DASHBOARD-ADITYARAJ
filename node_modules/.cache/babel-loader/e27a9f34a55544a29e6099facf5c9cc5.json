{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\nconst useStakedBalance = (poolName, poolId) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.stakedBalanceOnBank(poolName, poolId, bombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, bombFinance]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(err.stack));\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, bombFinance, fetchBalance]);\n  return balance;\n};\nexport default useStakedBalance;","map":{"version":3,"names":["useCallback","useEffect","useState","BigNumber","useBombFinance","config","useStakedBalance","poolName","poolId","balance","setBalance","from","bombFinance","isUnlocked","fetchBalance","stakedBalanceOnBank","myAccount","catch","err","console","error","stack","refreshBalance","setInterval","refreshInterval","clearInterval"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useStakedBalance.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\n\nimport {BigNumber} from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport {ContractName} from '../bomb-finance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await bombFinance.stakedBalanceOnBank(poolName, poolId, bombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, bombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, bombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEtD,SAAQC,SAAS,QAAO,QAAQ;AAChC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,gBAAgB,GAAGA,CAACC,QAAsB,EAAEC,MAAc,KAAK;EACnE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;EACzD,MAAMC,WAAW,GAAGR,cAAc,EAAE;EACpC,MAAMS,UAAU,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,UAAU;EAE1C,MAAMC,YAAY,GAAGd,WAAW,CAAC,YAAY;IAC3C,MAAMS,OAAO,GAAG,MAAMG,WAAW,CAACG,mBAAmB,CAACR,QAAQ,EAAEC,MAAM,EAAEI,WAAW,CAACI,SAAS,CAAC;IAC9FN,UAAU,CAACD,OAAO,CAAC;EACrB,CAAC,EAAE,CAACF,QAAQ,EAAEC,MAAM,EAAEI,WAAW,CAAC,CAAC;EAEnCX,SAAS,CAAC,MAAM;IACd,IAAIY,UAAU,EAAE;MACdC,YAAY,EAAE,CAACG,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC;MAEvD,MAAMC,cAAc,GAAGC,WAAW,CAACT,YAAY,EAAET,MAAM,CAACmB,eAAe,CAAC;MACxE,OAAO,MAAMC,aAAa,CAACH,cAAc,CAAC;IAC5C;EACF,CAAC,EAAE,CAACT,UAAU,EAAEN,QAAQ,EAAEG,UAAU,EAAEE,WAAW,EAAEE,YAAY,CAAC,CAAC;EAEjE,OAAOL,OAAO;AAChB,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module"}