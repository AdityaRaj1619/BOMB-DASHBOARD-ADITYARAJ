{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar json_schemas_1 = require(\"@0x/json-schemas\");\nvar utils_1 = require(\"@0x/utils\");\nvar _ = require(\"lodash\");\nvar validUrl = require(\"valid-url\");\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n  isBigNumber: function (variableName, value) {\n    var isBigNumber = utils_1.BigNumber.isBigNumber(value);\n    exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));\n  },\n  isValidBaseUnitAmount: function (variableName, value) {\n    exports.assert.isBigNumber(variableName, value);\n    var isNegative = value.isLessThan(0);\n    exports.assert.assert(!isNegative, variableName + \" cannot be a negative number, found value: \" + value.toNumber());\n    var hasDecimals = value.decimalPlaces() !== 0;\n    exports.assert.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n  },\n  isString: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n  },\n  isFunction: function (variableName, value) {\n    exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));\n  },\n  isHexString: function (variableName, value) {\n    exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));\n  },\n  isETHAddressHex: function (variableName, value) {\n    exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n    exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n  },\n  doesBelongToStringEnum: function (variableName, value, stringEnum /* There is no base type for every string enum */) {\n    var enumValues = _.values(stringEnum);\n    var doesBelongToStringEnum = _.includes(enumValues, value);\n    var enumValuesAsStrings = _.map(enumValues, function (enumValue) {\n      return \"'\" + enumValue + \"'\";\n    });\n    var enumValuesAsString = enumValuesAsStrings.join(', ');\n    exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n  },\n  hasAtMostOneUniqueValue: function (value, errMsg) {\n    exports.assert.assert(_.uniq(value).length <= 1, errMsg);\n  },\n  isNumber: function (variableName, value) {\n    exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));\n  },\n  isNumberOrBigNumber: function (variableName, value) {\n    if (_.isFinite(value)) {\n      return;\n    } else {\n      exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));\n    }\n  },\n  isBoolean: function (variableName, value) {\n    exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));\n  },\n  isWeb3Provider: function (variableName, value) {\n    utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');\n    var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n    exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));\n  },\n  doesConformToSchema: function (variableName, value, schema, subSchemas) {\n    if (value === undefined) {\n      throw new Error(variableName + \" can't be undefined\");\n    }\n    var schemaValidator = new json_schemas_1.SchemaValidator();\n    if (subSchemas !== undefined) {\n      _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));\n    }\n    var validationResult = schemaValidator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n    var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n    exports.assert.assert(!hasValidationErrors, msg);\n  },\n  isWebUri: function (variableName, value) {\n    var isValidUrl = validUrl.isWebUri(value) !== undefined;\n    exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));\n  },\n  isUri: function (variableName, value) {\n    var isValidUri = validUrl.isUri(value) !== undefined;\n    exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));\n  },\n  isBlockParam: function (variableName, value) {\n    if (Number.isInteger(value) && value >= 0) {\n      return;\n    }\n    if (value === 'earliest' || value === 'latest' || value === 'pending') {\n      return;\n    }\n    throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));\n  },\n  isArray: function (variableName, value) {\n    if (!Array.isArray(value)) {\n      throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));\n    }\n  },\n  assert: function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  },\n  typeAssertionMessage: function (variableName, type, value) {\n    return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n  }\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_schemas_1 = require(\"@0x/json-schemas\");\nvar utils_1 = require(\"@0x/utils\");\nvar _ = require(\"lodash\");\nvar validUrl = require(\"valid-url\");\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n    isBigNumber: function (variableName, value) {\n        var isBigNumber = utils_1.BigNumber.isBigNumber(value);\n        exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));\n    },\n    isValidBaseUnitAmount: function (variableName, value) {\n        exports.assert.isBigNumber(variableName, value);\n        var isNegative = value.isLessThan(0);\n        exports.assert.assert(!isNegative, variableName + \" cannot be a negative number, found value: \" + value.toNumber());\n        var hasDecimals = value.decimalPlaces() !== 0;\n        exports.assert.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n    },\n    isString: function (variableName, value) {\n        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n    },\n    isFunction: function (variableName, value) {\n        exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));\n    },\n    isHexString: function (variableName, value) {\n        exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));\n    },\n    isETHAddressHex: function (variableName, value) {\n        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));\n        exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n    },\n    doesBelongToStringEnum: function (variableName, value, stringEnum /* There is no base type for every string enum */) {\n        var enumValues = _.values(stringEnum);\n        var doesBelongToStringEnum = _.includes(enumValues, value);\n        var enumValuesAsStrings = _.map(enumValues, function (enumValue) { return \"'\" + enumValue + \"'\"; });\n        var enumValuesAsString = enumValuesAsStrings.join(', ');\n        exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n    },\n    hasAtMostOneUniqueValue: function (value, errMsg) {\n        exports.assert.assert(_.uniq(value).length <= 1, errMsg);\n    },\n    isNumber: function (variableName, value) {\n        exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));\n    },\n    isNumberOrBigNumber: function (variableName, value) {\n        if (_.isFinite(value)) {\n            return;\n        }\n        else {\n            exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));\n        }\n    },\n    isBoolean: function (variableName, value) {\n        exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));\n    },\n    isWeb3Provider: function (variableName, value) {\n        utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');\n        var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n        exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));\n    },\n    doesConformToSchema: function (variableName, value, schema, subSchemas) {\n        if (value === undefined) {\n            throw new Error(variableName + \" can't be undefined\");\n        }\n        var schemaValidator = new json_schemas_1.SchemaValidator();\n        if (subSchemas !== undefined) {\n            _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));\n        }\n        var validationResult = schemaValidator.validate(value, schema);\n        var hasValidationErrors = validationResult.errors.length > 0;\n        var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n        exports.assert.assert(!hasValidationErrors, msg);\n    },\n    isWebUri: function (variableName, value) {\n        var isValidUrl = validUrl.isWebUri(value) !== undefined;\n        exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));\n    },\n    isUri: function (variableName, value) {\n        var isValidUri = validUrl.isUri(value) !== undefined;\n        exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));\n    },\n    isBlockParam: function (variableName, value) {\n        if (Number.isInteger(value) && value >= 0) {\n            return;\n        }\n        if (value === 'earliest' || value === 'latest' || value === 'pending') {\n            return;\n        }\n        throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));\n    },\n    isArray: function (variableName, value) {\n        if (!Array.isArray(value)) {\n            throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));\n        }\n    },\n    assert: function (condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    },\n    typeAssertionMessage: function (variableName, type, value) {\n        return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n    },\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}