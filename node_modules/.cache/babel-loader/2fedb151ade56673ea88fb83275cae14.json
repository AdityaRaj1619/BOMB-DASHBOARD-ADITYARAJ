{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\nvar createHash = require('create-hash');\nvar _pbkdf2 = require('pbkdf2');\nvar pbkdf2 = _pbkdf2.pbkdf2Sync;\nvar pbkdf2Async = _pbkdf2.pbkdf2;\nvar randomBytes = require('randombytes');\n\n// use unorm until String.prototype.normalize gets better browser support\nvar unorm = require('unorm');\nvar CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json');\nvar CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json');\nvar ENGLISH_WORDLIST = require('./wordlists/english.json');\nvar FRENCH_WORDLIST = require('./wordlists/french.json');\nvar ITALIAN_WORDLIST = require('./wordlists/italian.json');\nvar JAPANESE_WORDLIST = require('./wordlists/japanese.json');\nvar KOREAN_WORDLIST = require('./wordlists/korean.json');\nvar SPANISH_WORDLIST = require('./wordlists/spanish.json');\nvar DEFAULT_WORDLIST = ENGLISH_WORDLIST;\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nfunction lpad(str, padString, length) {\n  while (str.length < length) str = padString + str;\n  return str;\n}\nfunction binaryToByte(bin) {\n  return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8);\n  }).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n  var ENT = entropyBuffer.length * 8;\n  var CS = ENT / 32;\n  var hash = createHash('sha256').update(entropyBuffer).digest();\n  return bytesToBinary([].slice.call(hash)).slice(0, CS);\n}\nfunction salt(password) {\n  return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeed(mnemonic, password) {\n  var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8');\n  var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8');\n  return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nfunction mnemonicToSeedHex(mnemonic, password) {\n  return mnemonicToSeed(mnemonic, password).toString('hex');\n}\nfunction mnemonicToSeedAsync(mnemonic, password) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8');\n      var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8');\n    } catch (error) {\n      return reject(error);\n    }\n    pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {\n      if (err) return reject(err);else return resolve(data);\n    });\n  });\n}\nfunction mnemonicToSeedHexAsync(mnemonic, password) {\n  return mnemonicToSeedAsync(mnemonic, password).then(function (buf) {\n    return buf.toString('hex');\n  });\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = wordlist || DEFAULT_WORDLIST;\n  var words = unorm.nfkd(mnemonic).split(' ');\n  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC);\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word);\n    if (index === -1) throw new Error(INVALID_MNEMONIC);\n    return lpad(index.toString(2), '0', 11);\n  }).join('');\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32;\n  var entropyBits = bits.slice(0, dividerIndex);\n  var checksumBits = bits.slice(dividerIndex);\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);\n  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);\n  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);\n  var entropy = Buffer.from(entropyBytes);\n  var newChecksum = deriveChecksumBits(entropy);\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);\n  return entropy.toString('hex');\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex');\n  wordlist = wordlist || DEFAULT_WORDLIST;\n\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);\n  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n  var entropyBits = bytesToBinary([].slice.call(entropy));\n  var checksumBits = deriveChecksumBits(entropy);\n  var bits = entropyBits + checksumBits;\n  var chunks = bits.match(/(.{1,11})/g);\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary);\n    return wordlist[index];\n  });\n  return wordlist === JAPANESE_WORDLIST ? words.join('\\u3000') : words.join(' ');\n}\nfunction generateMnemonic(strength, rng, wordlist) {\n  strength = strength || 128;\n  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);\n  rng = rng || randomBytes;\n  return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nfunction validateMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nmodule.exports = {\n  mnemonicToSeed: mnemonicToSeed,\n  mnemonicToSeedAsync: mnemonicToSeedAsync,\n  mnemonicToSeedHex: mnemonicToSeedHex,\n  mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,\n  mnemonicToEntropy: mnemonicToEntropy,\n  entropyToMnemonic: entropyToMnemonic,\n  generateMnemonic: generateMnemonic,\n  validateMnemonic: validateMnemonic,\n  wordlists: {\n    EN: ENGLISH_WORDLIST,\n    JA: JAPANESE_WORDLIST,\n    chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,\n    chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,\n    english: ENGLISH_WORDLIST,\n    french: FRENCH_WORDLIST,\n    italian: ITALIAN_WORDLIST,\n    japanese: JAPANESE_WORDLIST,\n    korean: KOREAN_WORDLIST,\n    spanish: SPANISH_WORDLIST\n  }\n};","map":{"version":3,"names":["Buffer","require","createHash","_pbkdf2","pbkdf2","pbkdf2Sync","pbkdf2Async","randomBytes","unorm","CHINESE_SIMPLIFIED_WORDLIST","CHINESE_TRADITIONAL_WORDLIST","ENGLISH_WORDLIST","FRENCH_WORDLIST","ITALIAN_WORDLIST","JAPANESE_WORDLIST","KOREAN_WORDLIST","SPANISH_WORDLIST","DEFAULT_WORDLIST","INVALID_MNEMONIC","INVALID_ENTROPY","INVALID_CHECKSUM","lpad","str","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","ENT","CS","hash","update","digest","slice","call","salt","password","mnemonicToSeed","mnemonic","mnemonicBuffer","from","nfkd","saltBuffer","mnemonicToSeedHex","mnemonicToSeedAsync","Promise","resolve","reject","error","err","data","mnemonicToSeedHexAsync","then","buf","mnemonicToEntropy","wordlist","words","split","Error","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","newChecksum","entropyToMnemonic","isBuffer","TypeError","chunks","binary","generateMnemonic","strength","rng","validateMnemonic","e","module","exports","wordlists","EN","JA","chinese_simplified","chinese_traditional","english","french","italian","japanese","korean","spanish"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/bip39/index.js"],"sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar _pbkdf2 = require('pbkdf2')\nvar pbkdf2 = _pbkdf2.pbkdf2Sync\nvar pbkdf2Async = _pbkdf2.pbkdf2\nvar randomBytes = require('randombytes')\n\n// use unorm until String.prototype.normalize gets better browser support\nvar unorm = require('unorm')\n\nvar CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json')\nvar CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json')\nvar ENGLISH_WORDLIST = require('./wordlists/english.json')\nvar FRENCH_WORDLIST = require('./wordlists/french.json')\nvar ITALIAN_WORDLIST = require('./wordlists/italian.json')\nvar JAPANESE_WORDLIST = require('./wordlists/japanese.json')\nvar KOREAN_WORDLIST = require('./wordlists/korean.json')\nvar SPANISH_WORDLIST = require('./wordlists/spanish.json')\nvar DEFAULT_WORDLIST = ENGLISH_WORDLIST\n\nvar INVALID_MNEMONIC = 'Invalid mnemonic'\nvar INVALID_ENTROPY = 'Invalid entropy'\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum'\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nfunction mnemonicToSeed (mnemonic, password) {\n  var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')\n  var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')\n\n  return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')\n}\n\nfunction mnemonicToSeedHex (mnemonic, password) {\n  return mnemonicToSeed(mnemonic, password).toString('hex')\n}\n\nfunction mnemonicToSeedAsync (mnemonic, password) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')\n      var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')\n    } catch (error) {\n      return reject(error)\n    }\n\n    pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {\n      if (err) return reject(err)\n      else return resolve(data)\n    })\n  })\n}\n\nfunction mnemonicToSeedHexAsync (mnemonic, password) {\n  return mnemonicToSeedAsync(mnemonic, password)\n    .then(function (buf) { return buf.toString('hex') })\n}\n\nfunction mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n\nfunction entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === JAPANESE_WORDLIST ? words.join('\\u3000') : words.join(' ')\n}\n\nfunction generateMnemonic (strength, rng, wordlist) {\n  strength = strength || 128\n  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)\n  rng = rng || randomBytes\n\n  return entropyToMnemonic(rng(strength / 8), wordlist)\n}\n\nfunction validateMnemonic (mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist)\n  } catch (e) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = {\n  mnemonicToSeed: mnemonicToSeed,\n  mnemonicToSeedAsync: mnemonicToSeedAsync,\n  mnemonicToSeedHex: mnemonicToSeedHex,\n  mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,\n  mnemonicToEntropy: mnemonicToEntropy,\n  entropyToMnemonic: entropyToMnemonic,\n  generateMnemonic: generateMnemonic,\n  validateMnemonic: validateMnemonic,\n  wordlists: {\n    EN: ENGLISH_WORDLIST,\n    JA: JAPANESE_WORDLIST,\n\n    chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,\n    chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,\n    english: ENGLISH_WORDLIST,\n    french: FRENCH_WORDLIST,\n    italian: ITALIAN_WORDLIST,\n    japanese: JAPANESE_WORDLIST,\n    korean: KOREAN_WORDLIST,\n    spanish: SPANISH_WORDLIST\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}