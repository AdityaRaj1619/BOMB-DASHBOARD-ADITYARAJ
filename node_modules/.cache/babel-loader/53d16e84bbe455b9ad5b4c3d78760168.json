{"ast":null,"code":"const EventEmitter = require('events');\nconst uuid = require('uuid/v4');\nconst dev = process.env.NODE_ENV === 'development';\nlet XHR;\nclass HTTPConnection extends EventEmitter {\n  constructor(_XHR, url, options) {\n    super();\n    XHR = _XHR;\n    this.connected = false;\n    this.subscriptions = false;\n    this.status = 'loading';\n    this.url = url;\n    this.pollId = uuid();\n    setTimeout(() => this.create(), 0);\n  }\n  create() {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'));\n    this.on('error', () => {\n      if (this.connected) this.close();\n    });\n    this.init();\n  }\n  init() {\n    this.send({\n      jsonrpc: '2.0',\n      method: 'eth_syncing',\n      params: [],\n      id: 1\n    }, (err, response) => {\n      if (err) return this.emit('error', err);\n      this.send({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_pollSubscriptions',\n        params: [this.pollId, 'immediate']\n      }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true;\n          this.pollSubscriptions();\n        }\n        this.connected = true;\n        this.emit('connect');\n      });\n    });\n  }\n  pollSubscriptions() {\n    this.send({\n      jsonrpc: '2.0',\n      id: 1,\n      method: 'eth_pollSubscriptions',\n      params: [this.pollId]\n    }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000);\n        return this.emit('error', err);\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions();\n        if (result) {\n          result.map(p => {\n            let parse;\n            try {\n              parse = JSON.parse(p);\n            } catch (e) {\n              parse = false;\n            }\n            return parse;\n          }).filter(n => n).forEach(p => this.emit('payload', p));\n        }\n      }\n    });\n  }\n  close() {\n    if (dev) console.log('Closing HTTP connection');\n    this.closed = true;\n    this.emit('close');\n    clearTimeout(this.subscriptionTimeout);\n    this.removeAllListeners();\n  }\n  filterStatus(res) {\n    if (res.status >= 200 && res.status < 300) return res;\n    const error = new Error(res.statusText);\n    error.res = res;\n    throw error.message;\n  }\n  error(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n  send(payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected');\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId;\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint');\n      }\n    }\n    const xhr = new XHR();\n    let responded = false;\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort();\n        responded = true;\n        if (internal) {\n          internal(err, result);\n        } else {\n          const {\n            id,\n            jsonrpc\n          } = payload;\n          const load = err ? {\n            id,\n            jsonrpc,\n            error: {\n              message: err.message,\n              code: err.code\n            }\n          } : {\n            id,\n            jsonrpc,\n            result\n          };\n          this.emit('payload', load);\n        }\n      }\n    };\n    xhr.open('POST', this.url, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.timeout = 60 * 1000;\n    xhr.onerror = res;\n    xhr.ontimeout = res;\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText);\n          res(response.error, response.result);\n        } catch (e) {\n          res(e);\n        }\n      }\n    };\n    xhr.send(JSON.stringify(payload));\n  }\n}\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options);","map":{"version":3,"names":["EventEmitter","require","uuid","dev","process","env","NODE_ENV","XHR","HTTPConnection","constructor","_XHR","url","options","connected","subscriptions","status","pollId","setTimeout","create","emit","Error","on","close","init","send","jsonrpc","method","params","id","err","response","pollSubscriptions","result","subscriptionTimeout","closed","map","p","parse","JSON","e","filter","n","forEach","console","log","clearTimeout","removeAllListeners","filterStatus","res","error","statusText","message","payload","code","arguments","length","undefined","internal","xhr","responded","abort","load","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","responseText","stringify","module","exports"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/eth-provider/connections/http.js"],"sourcesContent":["const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}