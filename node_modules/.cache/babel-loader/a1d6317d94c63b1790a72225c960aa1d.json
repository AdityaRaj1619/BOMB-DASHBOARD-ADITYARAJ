{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utils_1 = require(\"@0x/utils\");\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\nexports.marshaller = {\n  /**\n   * Unmarshall block without transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block without transaction data\n   */\n  unmarshalIntoBlockWithoutTransactionData: function unmarshalIntoBlockWithoutTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)\n    });\n    return block;\n  },\n  /**\n   * Unmarshall block with transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block with transaction data\n   */\n  unmarshalIntoBlockWithTransactionData: function unmarshalIntoBlockWithTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),\n      transactions: []\n    });\n    block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n      var transaction = exports.marshaller.unmarshalTransaction(tx);\n      return transaction;\n    });\n    return block;\n  },\n  /**\n   * Unmarshall transaction\n   * @param txRpc transaction to unmarshall\n   * @return unmarshalled transaction\n   */\n  unmarshalTransaction: function unmarshalTransaction(txRpc) {\n    var tx = __assign({}, txRpc, {\n      blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,\n      transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,\n      nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),\n      gas: utils_2.utils.convertHexToNumber(txRpc.gas),\n      gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice),\n      value: utils_2.utils.convertAmountToBigNumber(txRpc.value)\n    });\n    return tx;\n  },\n  /**\n   * Unmarshall transaction receipt\n   * @param txReceiptRpc transaction receipt to unmarshall\n   * @return unmarshalled transaction receipt\n   */\n  unmarshalTransactionReceipt: function unmarshalTransactionReceipt(txReceiptRpc) {\n    var txReceipt = __assign({}, txReceiptRpc, {\n      blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),\n      cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),\n      gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),\n      logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))\n    });\n    return txReceipt;\n  },\n  /**\n   * Unmarshall transaction data\n   * @param txDataRpc transaction data to unmarshall\n   * @return unmarshalled transaction data\n   */\n  unmarshalTxData: function unmarshalTxData(txDataRpc) {\n    if (txDataRpc.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n    var txData = __assign({}, txDataRpc, {\n      value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n      gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n      gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n      nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined\n    });\n    return txData;\n  },\n  /**\n   * Marshall transaction data\n   * @param txData transaction data to marshall\n   * @return marshalled transaction data\n   */\n  marshalTxData: function marshalTxData(txData) {\n    if (txData.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n    var callTxDataBase = __assign({}, txData);\n    delete callTxDataBase.from;\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n    var txDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: exports.marshaller.marshalAddress(txData.from)\n    });\n    var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n    _.each(txDataRPC, function (value, key) {\n      if (value === undefined && _.includes(prunableIfUndefined, key)) {\n        delete txDataRPC[key];\n      }\n    });\n    return txDataRPC;\n  },\n  /**\n   * Marshall call data\n   * @param callData call data to marshall\n   * @return marshalled call data\n   */\n  marshalCallData: function marshalCallData(callData) {\n    var callTxDataBase = __assign({}, callData);\n    delete callTxDataBase.from;\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n    var callDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)\n    });\n    return callDataRPC;\n  },\n  /**\n   * Marshall address\n   * @param address address to marshall\n   * @return marshalled address\n   */\n  marshalAddress: function marshalAddress(address) {\n    if (utils_1.addressUtils.isAddress(address)) {\n      return ethUtil.addHexPrefix(address);\n    }\n    throw new Error(\"Invalid address encountered: \" + address);\n  },\n  /**\n   * Marshall block param\n   * @param blockParam block param to marshall\n   * @return marshalled block param\n   */\n  marshalBlockParam: function marshalBlockParam(blockParam) {\n    if (blockParam === undefined) {\n      return ethereum_types_1.BlockParamLiteral.Latest;\n    }\n    var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n    return encodedBlockParam;\n  },\n  /**\n   * Unmarshall log\n   * @param rawLog log to unmarshall\n   * @return unmarshalled log\n   */\n  unmarshalLog: function unmarshalLog(rawLog) {\n    var formattedLog = __assign({}, rawLog, {\n      logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),\n      blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)\n    });\n    return formattedLog;\n  },\n  _marshalCallTxDataBase: function _marshalCallTxDataBase(callTxDataBase) {\n    var callTxDataBaseRPC = __assign({}, callTxDataBase, {\n      to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n      gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n      gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n      value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n      nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce)\n    });\n    return callTxDataBaseRPC;\n  }\n};","map":{"version":3,"sources":["../../src/marshaller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAaA,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAYA;;AAEG;AACU,OAAA,CAAA,UAAU,GAAG;EACtB;;;;AAIG;EACH,wCAAwC,EAAxC,SAAA,yCACI,kBAAkD,EAAA;IAElD,IAAM,KAAK,GAAA,QAAA,CAAA,CAAA,CAAA,EACJ,kBAAkB,EAAA;MACrB,QAAQ,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,CAAC;MAC/D,OAAO,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC;MAC7D,IAAI,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC;MACvD,SAAS,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC;MACjE,MAAM,EAAE,kBAAkB,CAAC,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,CAAC;MACvG,UAAU,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,UAAU,CAAC;MACzE,eAAe,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,eAAe;IAAC,CAAA,CACtF;IACD,OAAO,KAAK;EAChB,CAAC;EACD;;;;AAIG;EACH,qCAAqC,EAArC,SAAA,sCAAsC,kBAA+C,EAAA;IACjF,IAAM,KAAK,GAAA,QAAA,CAAA,CAAA,CAAA,EACJ,kBAAkB,EAAA;MACrB,QAAQ,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,CAAC;MAC/D,OAAO,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC;MAC7D,IAAI,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC;MACvD,SAAS,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC;MACjE,MAAM,EAAE,kBAAkB,CAAC,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,CAAC;MACvG,UAAU,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,UAAU,CAAC;MACzE,eAAe,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,eAAe,CAAC;MACnF,YAAY,EAAE;IAAmB,CAAA,CACpC;IACD,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,YAAY,EAAE,UAAC,EAAkB,EAAA;MAC3E,IAAM,WAAW,GAAG,OAAA,CAAA,UAAU,CAAC,oBAAoB,CAAC,EAAE,CAAC;MACvD,OAAO,WAAW;IACtB,CAAC,CAAC;IACF,OAAO,KAAK;EAChB,CAAC;EACD;;;;AAIG;EACH,oBAAoB,EAApB,SAAA,qBAAqB,KAAqB,EAAA;IACtC,IAAM,EAAE,GAAA,QAAA,CAAA,CAAA,CAAA,EACD,KAAK,EAAA;MACR,WAAW,EAAE,KAAK,CAAC,WAAW,KAAK,IAAI,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI;MAC5F,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,KAAK,IAAI,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,IAAI;MAC3G,KAAK,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC;MAC5C,GAAG,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC;MACxC,QAAQ,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC;MACxD,KAAK,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK;IAAC,CAAA,CACrD;IACD,OAAO,EAAE;EACb,CAAC;EACD;;;;AAIG;EACH,2BAA2B,EAA3B,SAAA,4BAA4B,YAAmC,EAAA;IAC3D,IAAM,SAAS,GAAA,QAAA,CAAA,CAAA,CAAA,EACR,YAAY,EAAA;MACf,WAAW,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,WAAW,CAAC;MAC/D,gBAAgB,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,gBAAgB,CAAC;MACzE,iBAAiB,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC;MAC3E,OAAO,EAAE,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,OAAO,CAAC;MACvD,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,OAAA,CAAA,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,OAAA,CAAA,UAAU,CAAC;IAAC,CAAA,CAC3E;IACD,OAAO,SAAS;EACpB,CAAC;EACD;;;;AAIG;EACH,eAAe,EAAf,SAAA,gBAAgB,SAAoB,EAAA;IAChC,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,EAAE;MAC9B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;IAC7D;IACD,IAAM,MAAM,GAAA,QAAA,CAAA,CAAA,CAAA,EACL,SAAS,EAAA;MACZ,KAAK,EAAE,SAAS,CAAC,KAAK,KAAK,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS;MAClG,GAAG,EAAE,SAAS,CAAC,GAAG,KAAK,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,SAAS;MACtF,QAAQ,EAAE,SAAS,CAAC,QAAQ,KAAK,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,SAAS;MAC3G,KAAK,EAAE,SAAS,CAAC,KAAK,KAAK,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG;IAAS,CAAA,CAC/F;IACD,OAAO,MAAM;EACjB,CAAC;EACD;;;;AAIG;EACH,aAAa,EAAb,SAAA,cAAc,MAAuB,EAAA;IACjC,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;MAC3B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;IAC7D;IACD,IAAM,cAAc,GAAA,QAAA,CAAA,CAAA,CAAA,EACb,MAAM,CACZ;IACD,OAAO,cAAc,CAAC,IAAI;IAC1B,IAAM,iBAAiB,GAAG,OAAA,CAAA,UAAU,CAAC,sBAAsB,CAAC,cAAc,CAAC;IAC3E,IAAM,SAAS,GAAA,QAAA,CAAA,CAAA,CAAA,EACR,iBAAiB,EAAA;MACpB,IAAI,EAAE,OAAA,CAAA,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI;IAAC,CAAA,CAC/C;IACD,IAAM,mBAAmB,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;IACjE,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,KAAU,EAAE,GAAW,EAAA;MACtC,IAAI,KAAK,KAAK,SAAS,IAAI,CAAC,CAAC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE;QAC7D,OAAQ,SAAiB,CAAC,GAAG,CAAC;MACjC;IACL,CAAC,CAAC;IACF,OAAO,SAAS;EACpB,CAAC;EACD;;;;AAIG;EACH,eAAe,EAAf,SAAA,gBAAgB,QAA2B,EAAA;IACvC,IAAM,cAAc,GAAA,QAAA,CAAA,CAAA,CAAA,EACb,QAAQ,CACd;IACD,OAAO,cAAc,CAAC,IAAI;IAC1B,IAAM,iBAAiB,GAAG,OAAA,CAAA,UAAU,CAAC,sBAAsB,CAAC,cAAc,CAAC;IAC3E,IAAM,WAAW,GAAA,QAAA,CAAA,CAAA,CAAA,EACV,iBAAiB,EAAA;MACpB,IAAI,EAAE,QAAQ,CAAC,IAAI,KAAK,SAAS,GAAG,SAAS,GAAG,OAAA,CAAA,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI;IAAC,CAAA,CAC3F;IACD,OAAO,WAAW;EACtB,CAAC;EACD;;;;AAIG;EACH,cAAc,EAAd,SAAA,eAAe,OAAe,EAAA;IAC1B,IAAI,OAAA,CAAA,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;MACjC,OAAO,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC;IACvC;IACD,MAAM,IAAI,KAAK,CAAC,+BAAA,GAAgC,OAAS,CAAC;EAC9D,CAAC;EACD;;;;AAIG;EACH,iBAAiB,EAAjB,SAAA,kBAAkB,UAAoD,EAAA;IAClE,IAAI,UAAU,KAAK,SAAS,EAAE;MAC1B,OAAO,gBAAA,CAAA,iBAAiB,CAAC,MAAM;IAClC;IACD,IAAM,iBAAiB,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAA,CAAA,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,UAAU;IAC7F,OAAO,iBAAiB;EAC5B,CAAC;EACD;;;;AAIG;EACH,YAAY,EAAZ,SAAA,aAAa,MAAmB,EAAA;IAC5B,IAAM,YAAY,GAAA,QAAA,CAAA,CAAA,CAAA,EACX,MAAM,EAAA;MACT,QAAQ,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,QAAQ,CAAC;MACzD,WAAW,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,CAAC;MAC/D,gBAAgB,EAAE,OAAA,CAAA,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,gBAAgB;IAAC,CAAA,CAC5E;IACD,OAAO,YAAY;EACvB,CAAC;EACD,sBAAsB,EAAtB,SAAA,uBAAuB,cAAuC,EAAA;IAC1D,IAAM,iBAAiB,GAAA,QAAA,CAAA,CAAA,CAAA,EAChB,cAAc,EAAA;MACjB,EAAE,EAAE,cAAc,CAAC,EAAE,KAAK,SAAS,GAAG,SAAS,GAAG,OAAA,CAAA,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC;MAC9F,QAAQ,EACJ,cAAc,CAAC,QAAQ,KAAK,SAAS,GAC/B,SAAS,GACT,OAAA,CAAA,KAAK,CAAC,uBAAuB,CAAC,cAAc,CAAC,QAAQ,CAAC;MAChE,GAAG,EAAE,cAAc,CAAC,GAAG,KAAK,SAAS,GAAG,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,uBAAuB,CAAC,cAAc,CAAC,GAAG,CAAC;MACrG,KAAK,EAAE,cAAc,CAAC,KAAK,KAAK,SAAS,GAAG,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,uBAAuB,CAAC,cAAc,CAAC,KAAK,CAAC;MAC3G,KAAK,EAAE,cAAc,CAAC,KAAK,KAAK,SAAS,GAAG,SAAS,GAAG,OAAA,CAAA,KAAK,CAAC,uBAAuB,CAAC,cAAc,CAAC,KAAK;IAAC,CAAA,CAC9G;IAED,OAAO,iBAAiB;EAC5B;CACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@0x/utils\");\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\nexports.marshaller = {\n    /**\n     * Unmarshall block without transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block without transaction data\n     */\n    unmarshalIntoBlockWithoutTransactionData: function (blockWithHexValues) {\n        var block = __assign({}, blockWithHexValues, { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty) });\n        return block;\n    },\n    /**\n     * Unmarshall block with transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block with transaction data\n     */\n    unmarshalIntoBlockWithTransactionData: function (blockWithHexValues) {\n        var block = __assign({}, blockWithHexValues, { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty), transactions: [] });\n        block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n            var transaction = exports.marshaller.unmarshalTransaction(tx);\n            return transaction;\n        });\n        return block;\n    },\n    /**\n     * Unmarshall transaction\n     * @param txRpc transaction to unmarshall\n     * @return unmarshalled transaction\n     */\n    unmarshalTransaction: function (txRpc) {\n        var tx = __assign({}, txRpc, { blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null, transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null, nonce: utils_2.utils.convertHexToNumber(txRpc.nonce), gas: utils_2.utils.convertHexToNumber(txRpc.gas), gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice), value: utils_2.utils.convertAmountToBigNumber(txRpc.value) });\n        return tx;\n    },\n    /**\n     * Unmarshall transaction receipt\n     * @param txReceiptRpc transaction receipt to unmarshall\n     * @return unmarshalled transaction receipt\n     */\n    unmarshalTransactionReceipt: function (txReceiptRpc) {\n        var txReceipt = __assign({}, txReceiptRpc, { blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber), transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex), cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed), gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed), logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller)) });\n        return txReceipt;\n    },\n    /**\n     * Unmarshall transaction data\n     * @param txDataRpc transaction data to unmarshall\n     * @return unmarshalled transaction data\n     */\n    unmarshalTxData: function (txDataRpc) {\n        if (txDataRpc.from === undefined) {\n            throw new Error(\"txData must include valid 'from' value.\");\n        }\n        var txData = __assign({}, txDataRpc, { value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined, gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined, gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined, nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined });\n        return txData;\n    },\n    /**\n     * Marshall transaction data\n     * @param txData transaction data to marshall\n     * @return marshalled transaction data\n     */\n    marshalTxData: function (txData) {\n        if (txData.from === undefined) {\n            throw new Error(\"txData must include valid 'from' value.\");\n        }\n        var callTxDataBase = __assign({}, txData);\n        delete callTxDataBase.from;\n        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        var txDataRPC = __assign({}, callTxDataBaseRPC, { from: exports.marshaller.marshalAddress(txData.from) });\n        var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n        _.each(txDataRPC, function (value, key) {\n            if (value === undefined && _.includes(prunableIfUndefined, key)) {\n                delete txDataRPC[key];\n            }\n        });\n        return txDataRPC;\n    },\n    /**\n     * Marshall call data\n     * @param callData call data to marshall\n     * @return marshalled call data\n     */\n    marshalCallData: function (callData) {\n        var callTxDataBase = __assign({}, callData);\n        delete callTxDataBase.from;\n        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        var callDataRPC = __assign({}, callTxDataBaseRPC, { from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from) });\n        return callDataRPC;\n    },\n    /**\n     * Marshall address\n     * @param address address to marshall\n     * @return marshalled address\n     */\n    marshalAddress: function (address) {\n        if (utils_1.addressUtils.isAddress(address)) {\n            return ethUtil.addHexPrefix(address);\n        }\n        throw new Error(\"Invalid address encountered: \" + address);\n    },\n    /**\n     * Marshall block param\n     * @param blockParam block param to marshall\n     * @return marshalled block param\n     */\n    marshalBlockParam: function (blockParam) {\n        if (blockParam === undefined) {\n            return ethereum_types_1.BlockParamLiteral.Latest;\n        }\n        var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n        return encodedBlockParam;\n    },\n    /**\n     * Unmarshall log\n     * @param rawLog log to unmarshall\n     * @return unmarshalled log\n     */\n    unmarshalLog: function (rawLog) {\n        var formattedLog = __assign({}, rawLog, { logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex), blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber), transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex) });\n        return formattedLog;\n    },\n    _marshalCallTxDataBase: function (callTxDataBase) {\n        var callTxDataBaseRPC = __assign({}, callTxDataBase, { to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to), gasPrice: callTxDataBase.gasPrice === undefined\n                ? undefined\n                : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice), gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas), value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value), nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce) });\n        return callTxDataBaseRPC;\n    },\n};\n//# sourceMappingURL=marshaller.js.map"]},"metadata":{},"sourceType":"script"}