{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nvar apiKey = \"torus-default\";\nvar embedHost = \"\";\n// #region API Keys\nvar gatewayAuthHeader = \"x-api-key\";\nvar gatewayEmbedHostHeader = \"x-embed-host\";\nvar sentry = null;\nvar tracingOrigins = [];\nvar tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push.apply(tracingOrigins, _toConsumableArray(_tracingOrigins));\n  tracingPaths.push.apply(tracingPaths, _toConsumableArray(_tracingPaths));\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nfunction fetchAndTrace(_x, _x2) {\n  return _fetchAndTrace.apply(this, arguments);\n}\nfunction _fetchAndTrace() {\n  _fetchAndTrace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(url, init) {\n    var _url, transaction, span, response;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _url = null;\n          try {\n            _url = new URL(url);\n          } catch (error) {}\n          if (!(sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname)))) {\n            _context5.next = 11;\n            break;\n          }\n          transaction = sentry.startTransaction({\n            name: url\n          });\n          span = transaction.startChild({\n            op: \"http\"\n          }); // This function returns a Span\n          _context5.next = 7;\n          return fetch(url, init);\n        case 7:\n          response = _context5.sent;\n          span.finish(); // Remember that only finished spans will be sent with the transaction\n          transaction.finish(); // Finishing the transaction will send it to Sentry\n          return _context5.abrupt(\"return\", response);\n        case 11:\n          return _context5.abrupt(\"return\", fetch(url, init));\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _fetchAndTrace.apply(this, arguments);\n}\nfunction getApiKeyHeaders() {\n  var headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\nvar promiseTimeout = function promiseTimeout(ms, promise) {\n  var timeout = new Promise(function (resolve, reject) {\n    var id = setTimeout(function () {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options_ = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          customOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n          defaultOptions = {\n            mode: \"cors\",\n            headers: {}\n          };\n          if (customOptions.useAPIKey) {\n            defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n          }\n          options = merge(defaultOptions, options_, {\n            method: \"GET\"\n          });\n          _context.next = 7;\n          return fetchAndTrace(url, options);\n        case 7:\n          response = _context.sent;\n          if (!response.ok) {\n            _context.next = 10;\n            break;\n          }\n          return _context.abrupt(\"return\", response.json());\n        case 10:\n          debugLogResponse(response);\n          throw response;\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function get(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  var options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nvar patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n          options_ = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n          customOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n          defaultOptions = {\n            mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n          }; // for multipart request browser/client will add multipart content type\n          // along with multipart boundary , so for multipart request send\n          // content-type: undefined or send with multipart boundary if already known\n          if (customOptions.useAPIKey) {\n            defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n          }\n          options = merge(defaultOptions, options_, {\n            method: \"PATCH\"\n          }); // deep merge changes the structure of form data and url encoded data ,\n          // so we should not deepmerge body data\n          if (customOptions.isUrlEncodedData) {\n            // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            options.body = data;\n            // If url encoded data, this must not be the content type\n            if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n          } else {\n            options.body = JSON.stringify(data);\n          }\n          _context2.next = 9;\n          return fetchAndTrace(url, options);\n        case 9:\n          response = _context2.sent;\n          if (!response.ok) {\n            _context2.next = 12;\n            break;\n          }\n          return _context2.abrupt(\"return\", response.json());\n        case 12:\n          debugLogResponse(response);\n          throw response;\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function patch(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar put = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n          options_ = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n          customOptions = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n          defaultOptions = {\n            mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n          }; // for multipart request browser/client will add multipart content type\n          // along with multipart boundary , so for multipart request send\n          // content-type: undefined or send with multipart boundary if already known\n          if (customOptions.useAPIKey) {\n            defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n          }\n          options = merge(defaultOptions, options_, {\n            method: \"PUT\"\n          }); // deep merge changes the structure of form data and url encoded data ,\n          // so we should not deepmerge body data\n          if (customOptions.isUrlEncodedData) {\n            // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            options.body = data;\n            // If url encoded data, this must not be the content type\n            if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n          } else {\n            options.body = JSON.stringify(data);\n          }\n          _context3.next = 9;\n          return fetchAndTrace(url, options);\n        case 9:\n          response = _context3.sent;\n          if (!response.ok) {\n            _context3.next = 12;\n            break;\n          }\n          return _context3.abrupt(\"return\", response.json());\n        case 12:\n          debugLogResponse(response);\n          throw response;\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function put(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar remove = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n          options_ = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n          customOptions = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n          defaultOptions = {\n            mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n          }; // for multipart request browser/client will add multipart content type\n          // along with multipart boundary , so for multipart request send\n          // content-type: undefined or send with multipart boundary if already known\n          if (customOptions.useAPIKey) {\n            defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n          }\n          options = merge(defaultOptions, options_, {\n            method: \"DELETE\"\n          });\n          if (customOptions.isUrlEncodedData) {\n            // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            options.body = data;\n            // If url encoded data, this must not be the content type\n            if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n          } else {\n            options.body = JSON.stringify(data);\n          }\n          _context4.next = 9;\n          return fetchAndTrace(url, options);\n        case 9:\n          response = _context4.sent;\n          if (!response.ok) {\n            _context4.next = 12;\n            break;\n          }\n          return _context4.abrupt(\"return\", response.json());\n        case 12:\n          debugLogResponse(response);\n          throw response;\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function remove(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar generateJsonRPCObject = function generateJsonRPCObject(method, parameters) {\n  return {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 10,\n    params: parameters\n  };\n};\nvar promiseRace = function promiseRace(url, options) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}