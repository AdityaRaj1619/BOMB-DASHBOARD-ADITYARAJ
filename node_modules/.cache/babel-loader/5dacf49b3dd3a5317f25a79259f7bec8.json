{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar getProtocol = function getProtocol(location) {\n  if (location === 'injected') return 'injected';\n  if (location.endsWith('.ipc')) return 'ipc';\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws';\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http';\n  return '';\n};\nmodule.exports = function (targets, presets) {\n  var _ref;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray([].concat(targets).map(function (provider) {\n    if (presets[provider]) {\n      return presets[provider].map(function (location) {\n        return {\n          type: provider,\n          location: location,\n          protocol: getProtocol(location)\n        };\n      });\n    } else {\n      return {\n        type: 'custom',\n        location: provider,\n        protocol: getProtocol(provider)\n      };\n    }\n  }))).filter(function (provider) {\n    if (provider.protocol || provider.type === 'injected') {\n      return true;\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"');\n      return false;\n    }\n  });\n};","map":{"version":3,"names":["getProtocol","location","endsWith","startsWith","module","exports","targets","presets","_ref","concat","apply","_toConsumableArray","map","provider","type","protocol","filter","console","log"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/node_modules/eth-provider/resolve/index.js"],"sourcesContent":["const getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n"],"mappings":";AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAWA,CAAGC,QAAQ,EAAI;EAC9B,IAAIA,QAAQ,KAAK,UAAU,EAAE,OAAO,UAAU;EAC9C,IAAIA,QAAQ,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,KAAK;EAC3C,IAAID,QAAQ,CAACE,UAAU,CAAC,QAAQ,CAAC,IAAIF,QAAQ,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,IAAI;EAC9E,IAAIF,QAAQ,CAACE,UAAU,CAAC,UAAU,CAAC,IAAIF,QAAQ,CAACE,UAAU,CAAC,SAAS,CAAC,EAAE,OAAO,MAAM;EACpF,OAAO,EAAE;AACX,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG,UAACC,OAAO,EAAEC,OAAO,EAAK;EAAA,IAAAC,IAAA;EACrC,OAAO,CAAAA,IAAA,KAAE,EAACC,MAAM,CAAAC,KAAA,CAAAF,IAAA,EAAAG,kBAAA,CAAI,EAAE,CAACF,MAAM,CAACH,OAAO,CAAC,CAACM,GAAG,CAAC,UAAAC,QAAQ,EAAI;IACrD,IAAIN,OAAO,CAACM,QAAQ,CAAC,EAAE;MACrB,OAAON,OAAO,CAACM,QAAQ,CAAC,CAACD,GAAG,CAAC,UAAAX,QAAQ;QAAA,OAAK;UAAEa,IAAI,EAAED,QAAQ;UAAEZ,QAAQ,EAARA,QAAQ;UAAEc,QAAQ,EAAEf,WAAW,CAACC,QAAQ;QAAE,CAAC;MAAA,CAAC,CAAC;IAC3G,CAAC,MAAM;MACL,OAAO;QAAEa,IAAI,EAAE,QAAQ;QAAEb,QAAQ,EAAEY,QAAQ;QAAEE,QAAQ,EAAEf,WAAW,CAACa,QAAQ;MAAE,CAAC;IAChF;EACF,CAAC,CAAC,EAAC,CAACG,MAAM,CAAC,UAAAH,QAAQ,EAAI;IACrB,IAAIA,QAAQ,CAACE,QAAQ,IAAIF,QAAQ,CAACC,IAAI,KAAK,UAAU,EAAE;MACrD,OAAO,IAAI;IACb,CAAC,MAAM;MACLG,OAAO,CAACC,GAAG,CAAC,oDAAoD,GAAGL,QAAQ,CAACZ,QAAQ,GAAG,GAAG,CAAC;MAC3F,OAAO,KAAK;IACd;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}