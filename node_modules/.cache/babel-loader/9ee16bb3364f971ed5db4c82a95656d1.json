{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\nexport let ApprovalState = /*#__PURE__*/function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n  return ApprovalState;\n}({});\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token, spender) {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender\n      }\n    });\n  }, [approvalState, token, spender, addTransaction]);\n  return [approvalState, approve];\n}\nexport default useApprove;","map":{"version":3,"names":["BigNumber","ethers","useCallback","useMemo","useHasPendingApproval","useTransactionAdder","useAllowance","APPROVE_AMOUNT","constants","MaxUint256","APPROVE_BASE_AMOUNT","from","ApprovalState","useApprove","token","spender","pendingApproval","address","currentAllowance","approvalState","UNKNOWN","lt","PENDING","NOT_APPROVED","APPROVED","addTransaction","approve","console","error","response","summary","symbol","approval","tokenAddress"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useApprove.ts"],"sourcesContent":["import {BigNumber, ethers} from 'ethers';\nimport {useCallback, useMemo} from 'react';\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../bomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,MAAM,QAAO,QAAQ;AACxC,SAAQC,WAAW,EAAEC,OAAO,QAAO,OAAO;AAC1C,SAAQC,qBAAqB,EAAEC,mBAAmB,QAAO,6BAA6B;AACtF,OAAOC,YAAY,MAAM,gBAAgB;AAGzC,MAAMC,cAAc,GAAGN,MAAM,CAACO,SAAS,CAACC,UAAU;AAClD,MAAMC,mBAAmB,GAAGV,SAAS,CAACW,IAAI,CAAC,2BAA2B,CAAC;AAEvE,WAAYC,aAAa,0BAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;;AAOzB;AACA,SAASC,UAAUA,CAACC,KAAY,EAAEC,OAAe,EAAwC;EACvF,MAAMC,eAAe,GAAGZ,qBAAqB,CAACU,KAAK,CAACG,OAAO,EAAEF,OAAO,CAAC;EACrE,MAAMG,gBAAgB,GAAGZ,YAAY,CAACQ,KAAK,EAAEC,OAAO,EAAEC,eAAe,CAAC;;EAEtE;EACA,MAAMG,aAA4B,GAAGhB,OAAO,CAAC,MAAM;IACjD;IACA,IAAI,CAACe,gBAAgB,EAAE,OAAON,aAAa,CAACQ,OAAO;;IAEnD;IACA,OAAOF,gBAAgB,CAACG,EAAE,CAACX,mBAAmB,CAAC,GAC3CM,eAAe,GACbJ,aAAa,CAACU,OAAO,GACrBV,aAAa,CAACW,YAAY,GAC5BX,aAAa,CAACY,QAAQ;EAC5B,CAAC,EAAE,CAACN,gBAAgB,EAAEF,eAAe,CAAC,CAAC;EAEvC,MAAMS,cAAc,GAAGpB,mBAAmB,EAAE;EAE5C,MAAMqB,OAAO,GAAGxB,WAAW,CAAC,YAA2B;IACrD,IAAIiB,aAAa,KAAKP,aAAa,CAACW,YAAY,EAAE;MAChDI,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACF;IAEA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACY,OAAO,CAACX,OAAO,EAAER,cAAc,CAAC;IAC7DkB,cAAc,CAACI,QAAQ,EAAE;MACvBC,OAAO,EAAG,WAAUhB,KAAK,CAACiB,MAAO,EAAC;MAClCC,QAAQ,EAAE;QACRC,YAAY,EAAEnB,KAAK,CAACG,OAAO;QAC3BF,OAAO,EAAEA;MACX;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACI,aAAa,EAAEL,KAAK,EAAEC,OAAO,EAAEU,cAAc,CAAC,CAAC;EAEnD,OAAO,CAACN,aAAa,EAAEO,OAAO,CAAC;AACjC;AAEA,eAAeb,UAAU"},"metadata":{},"sourceType":"module"}