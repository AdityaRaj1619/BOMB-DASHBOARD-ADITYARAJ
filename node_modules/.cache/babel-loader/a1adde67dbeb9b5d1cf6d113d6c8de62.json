{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _inherits = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _createSuper = require(\"C:\\\\Users\\\\Aditya Raj Awasthi\\\\Desktop\\\\bomb-dashboard-final-task\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\nvar ObservableStore_1 = require(\"./ObservableStore\");\nvar MergedStore = /*#__PURE__*/function (_ObservableStore_1$Ob) {\n  _inherits(MergedStore, _ObservableStore_1$Ob);\n  var _super = _createSuper(MergedStore);\n  function MergedStore() {\n    var _this;\n    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, MergedStore);\n    // Typecast: Preserve existing behavior\n    _this = _super.call(this, {});\n    _this._children = children;\n    // subscribe to children\n    children.forEach(function (child) {\n      return _this._addChild(child);\n    });\n    _this._updateWholeState();\n    return _this;\n  }\n  _createClass(MergedStore, [{\n    key: \"_addChild\",\n    value: function _addChild(child) {\n      var _this2 = this;\n      child.subscribe(function () {\n        return _this2._updateWholeState();\n      });\n    }\n  }, {\n    key: \"_updateWholeState\",\n    value: function _updateWholeState() {\n      var childStates = this._children.map(function (child) {\n        return child.getState();\n      });\n      // apply shallow merge over states\n      var state = Object.assign.apply(Object, [{}].concat(_toConsumableArray(childStates)));\n      this.putState(state);\n    }\n  }]);\n  return MergedStore;\n}(ObservableStore_1.ObservableStore);\nexports.MergedStore = MergedStore;","map":{"version":3,"sources":["../src/MergedStore.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAAoD,IAEvC,WAEX,0BAAA,qBAAA;EAAA,SAAA,CAAA,WAAA,EAAA,qBAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,WAAA;EAGA,SAAA,YAAA,EAAyB;IAAA,IAAA,KAAA;IAAA,IAAb,QAAQ,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,EAAE;IAAA,eAAA,OAAA,WAAA;IACvB;IACA,KAAA,GAAA,MAAA,CAAA,IAAA,OAAM,CAAA,CAAkB;IAExB,KAAA,CAAK,SAAS,GAAG,QAAQ;IACzB;IACA,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;MAAA,OAAK,KAAA,CAAK,SAAS,CAAC,KAAK,CAAC;IAAA,EAAC;IAClD,KAAA,CAAK,iBAAiB,EAAE;IAAC,OAAA,KAAA;EAC3B;EAAC,YAAA,CAAA,WAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,KAAkC,EAAA;MAAA,IAAA,MAAA;MAC1C,KAAK,CAAC,SAAS,CAAC;QAAA,OAAM,MAAI,CAAC,iBAAiB,EAAE;MAAA,EAAC;IACjD;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,kBAAA,EAAiB;MACf,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,KAAK;QAAA,OAAK,KAAK,CAAC,QAAQ,EAAE;MAAA,EAAC;MACnE;MACA,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAA,KAAA,CAAb,MAAM,GAAQ,CAAA,CAAE,EAAA,MAAA,CAAA,kBAAA,CAAK,WAAW,GAAC;MAC/C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACtB;EAAC;EAAA,OAAA,WAAA;AAAA,EAtBO,iBAAA,CAAA,eAAkB;AAF5B,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}