{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar jsSHA3 = require(\"js-sha3\");\nvar _ = require(\"lodash\");\nvar random_1 = require(\"./random\");\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress: function isChecksumAddress(address) {\n    // Check each case\n    var unprefixedAddress = address.replace('0x', '');\n    var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n    for (var i = 0; i < ADDRESS_LENGTH; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      var hexBase = 16;\n      var lowercaseRange = 7;\n      if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n    return true;\n  },\n  isAddress: function isAddress(address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n  padZeros: function padZeros(address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n  generatePseudoRandomAddress: function generatePseudoRandomAddress() {\n    var randomBigNum = random_1.generatePseudoRandom256BitNumber();\n    var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n    var addressLengthInBytes = 20;\n    var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\n    return randomAddress;\n  }\n};","map":{"version":3,"sources":["../../src/address_utils.ts"],"names":[],"mappings":";;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA,IAAM,mBAAmB,GAAG,sBAAsB;AAClD,IAAM,uBAAuB,GAAG,oCAAoC;AACpE,IAAM,cAAc,GAAG,EAAE;AAEZ,OAAA,CAAA,YAAY,GAAG;EACxB,iBAAiB,EAAjB,SAAA,kBAAkB,OAAe,EAAA;IAC7B;IACA,IAAM,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACnD,IAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;IAErE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;MACrC;MACA,IAAM,OAAO,GAAG,EAAE;MAClB,IAAM,cAAc,GAAG,CAAC;MACxB,IACK,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,cAAc,IAC/C,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,iBAAiB,CAAC,CAAC,CAAC,IAC9D,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,cAAc,IAChD,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,iBAAiB,CAAC,CAAC,CAAE,EAClE;QACE,OAAO,KAAK;MACf;IACJ;IACD,OAAO,IAAI;EACf,CAAC;EACD,SAAS,EAAT,SAAA,UAAU,OAAe,EAAA;IACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;MACpC;MACA,OAAO,KAAK;KACf,MAAM,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;MAC9C;MACA,OAAO,IAAI;KACd,MAAM;MACH;MACA,IAAM,yBAAyB,GAAG,OAAA,CAAA,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC;MACzE,OAAO,yBAAyB;IACnC;EACL,CAAC;EACD,QAAQ,EAAR,SAAA,SAAS,OAAe,EAAA;IACpB,OAAO,iBAAA,CAAA,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,iBAAA,CAAA,cAAc,CAAC,OAAO,CAAC,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;EACjF,CAAC;EACD,2BAA2B,EAA3B,SAAA,4BAAA,EAAA;IACI,IAAM,YAAY,GAAG,QAAA,CAAA,gCAAgC,EAAE;IACvD,IAAM,UAAU,GAAG,iBAAA,CAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IAChD,IAAM,oBAAoB,GAAG,EAAE;IAC/B,IAAM,aAAa,GAAG,IAAA,GAAK,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAG;IACtF,OAAO,aAAa;EACxB;CACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar jsSHA3 = require(\"js-sha3\");\nvar _ = require(\"lodash\");\nvar random_1 = require(\"./random\");\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n    isChecksumAddress: function (address) {\n        // Check each case\n        var unprefixedAddress = address.replace('0x', '');\n        var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n        for (var i = 0; i < ADDRESS_LENGTH; i++) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1\n            var hexBase = 16;\n            var lowercaseRange = 7;\n            if ((parseInt(addressHash[i], hexBase) > lowercaseRange &&\n                unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i]) ||\n                (parseInt(addressHash[i], hexBase) <= lowercaseRange &&\n                    unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i])) {\n                return false;\n            }\n        }\n        return true;\n    },\n    isAddress: function (address) {\n        if (!BASIC_ADDRESS_REGEX.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n        else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n        else {\n            // Otherwise check each case\n            var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n            return isValidChecksummedAddress;\n        }\n    },\n    padZeros: function (address) {\n        return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n    },\n    generatePseudoRandomAddress: function () {\n        var randomBigNum = random_1.generatePseudoRandom256BitNumber();\n        var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n        var addressLengthInBytes = 20;\n        var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\n        return randomAddress;\n    },\n};\n//# sourceMappingURL=address_utils.js.map"]},"metadata":{},"sourceType":"script"}