{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar jsonschema_1 = require(\"jsonschema\");\nvar values = require(\"lodash.values\");\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\nvar SchemaValidator = /** @class */function () {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  function SchemaValidator() {\n    var e_1, _a;\n    this._validator = new jsonschema_1.Validator();\n    try {\n      for (var _b = __values(values(schemas_1.schemas)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var schema = _c.value;\n        SchemaValidator._assertSchemaDefined(schema);\n        this._validator.addSchema(schema, schema.id);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n  SchemaValidator._assertSchemaDefined = function (schema) {\n    if (schema === undefined) {\n      throw new Error(\"Cannot add undefined schema\");\n    }\n  };\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n  SchemaValidator.prototype.addSchema = function (schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n    this._validator.addSchema(schema, schema.id);\n  };\n  // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n  SchemaValidator.prototype.validate = function (instance, schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n    var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n    return this._validator.validate(jsonSchemaCompatibleObject, schema);\n  };\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n  SchemaValidator.prototype.isValid = function (instance, schema) {\n    var isValid = this.validate(instance, schema).errors.length === 0;\n    return isValid;\n  };\n  return SchemaValidator;\n}();\nexports.SchemaValidator = SchemaValidator;","map":{"version":3,"sources":["../../src/schema_validator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;AACH,IAAA,eAAA,GAAA,aAAA,YAAA;EAOI;;AAEG;EACH,SAAA,eAAA,CAAA,EAAA;;IACI,IAAI,CAAC,UAAU,GAAG,IAAI,YAAA,CAAA,SAAS,EAAE;;MACjC,KAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,SAAA,CAAA,OAAO,CAAC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAAjC,IAAM,MAAM,GAAA,EAAA,CAAA,KAAA;QACb,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;MAC/C;;;;;;;;;;;;EACL;EAde,eAAA,CAAA,oBAAoB,GAAnC,UAAoC,MAAc,EAAA;IAC9C,IAAI,MAAM,KAAK,SAAS,EAAE;MACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;IACjD;EACL,CAAC;EAWD;;;;;AAKG;EACI,eAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,MAAc,EAAA;IAC3B,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC;IAC5C,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;EAChD,CAAC;EACD;EACA;EACA;EACA;EACA;;;;;AAKG;EACI,eAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,QAAa,EAAE,MAAc,EAAA;IACzC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC;IAC5C,IAAM,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACvE,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,0BAA0B,EAAE,MAAM,CAAC;EACvE,CAAC;EACD;;;;;AAKG;EACI,eAAA,CAAA,SAAA,CAAA,OAAO,GAAd,UAAe,QAAa,EAAE,MAAc,EAAA;IACxC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;IACnE,OAAO,OAAO;EAClB,CAAC;EACL,OAAA,eAAC;AAAD,CAAC,EAAA;AApDY,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsonschema_1 = require(\"jsonschema\");\nvar values = require(\"lodash.values\");\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\nvar SchemaValidator = /** @class */ (function () {\n    /**\n     * Instantiates a SchemaValidator instance\n     */\n    function SchemaValidator() {\n        var e_1, _a;\n        this._validator = new jsonschema_1.Validator();\n        try {\n            for (var _b = __values(values(schemas_1.schemas)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var schema = _c.value;\n                SchemaValidator._assertSchemaDefined(schema);\n                this._validator.addSchema(schema, schema.id);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    SchemaValidator._assertSchemaDefined = function (schema) {\n        if (schema === undefined) {\n            throw new Error(\"Cannot add undefined schema\");\n        }\n    };\n    /**\n     * Add a schema to the validator. All schemas and sub-schemas must be added to\n     * the validator before the `validate` and `isValid` methods can be called with\n     * instances of that schema.\n     * @param schema The schema to add\n     */\n    SchemaValidator.prototype.addSchema = function (schema) {\n        SchemaValidator._assertSchemaDefined(schema);\n        this._validator.addSchema(schema, schema.id);\n    };\n    // In order to validate a complex JS object using jsonschema, we must replace any complex\n    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n    // complex types implement the `toString` method, we can stringify the object and\n    // then parse it. The resultant object can then be checked using jsonschema.\n    /**\n     * Validate the JS object conforms to a specific JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns The results of the validation\n     */\n    SchemaValidator.prototype.validate = function (instance, schema) {\n        SchemaValidator._assertSchemaDefined(schema);\n        var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n        return this._validator.validate(jsonSchemaCompatibleObject, schema);\n    };\n    /**\n     * Check whether an instance properly adheres to a JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns Whether or not the instance adheres to the schema\n     */\n    SchemaValidator.prototype.isValid = function (instance, schema) {\n        var isValid = this.validate(instance, schema).errors.length === 0;\n        return isValid;\n    };\n    return SchemaValidator;\n}());\nexports.SchemaValidator = SchemaValidator;\n//# sourceMappingURL=schema_validator.js.map"]},"metadata":{},"sourceType":"script"}