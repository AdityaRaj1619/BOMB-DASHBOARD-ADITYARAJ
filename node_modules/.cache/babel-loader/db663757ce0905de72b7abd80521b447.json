{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\nconst useTokenBalance = token => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance === null || bombFinance === void 0 ? void 0 : bombFinance.isUnlocked;\n  const fetchBalance = useCallback(async () => {\n    setBalance(await token.balanceOf(bombFinance.myAccount));\n  }, [token, bombFinance.myAccount]);\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch(err => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isUnlocked, token, fetchBalance, bombFinance]);\n  return balance;\n};\nexport default useTokenBalance;","map":{"version":3,"names":["useCallback","useEffect","useState","BigNumber","useBombFinance","config","useTokenBalance","token","balance","setBalance","from","bombFinance","isUnlocked","fetchBalance","balanceOf","myAccount","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval"],"sources":["C:/Users/Aditya Raj Awasthi/Desktop/bomb-dashboard-final-task/src/hooks/useTokenBalance.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {BigNumber} from 'ethers';\nimport ERC20 from '../bomb-finance/ERC20';\nimport useBombFinance from './useBombFinance';\nimport config from '../config';\n\nconst useTokenBalance = (token: ERC20) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    setBalance(await token.balanceOf(bombFinance.myAccount));\n  }, [token, bombFinance.myAccount]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(`Failed to fetch token balance: ${err.stack}`));\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isUnlocked, token, fetchBalance, bombFinance]);\n\n  return balance;\n};\n\nexport default useTokenBalance;\n"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACtD,SAAQC,SAAS,QAAO,QAAQ;AAEhC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,eAAe,GAAIC,KAAY,IAAK;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAACC,SAAS,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;EACzD,MAAMC,WAAW,GAAGP,cAAc,EAAE;EACpC,MAAMQ,UAAU,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,UAAU;EAE1C,MAAMC,YAAY,GAAGb,WAAW,CAAC,YAAY;IAC3CS,UAAU,CAAC,MAAMF,KAAK,CAACO,SAAS,CAACH,WAAW,CAACI,SAAS,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACR,KAAK,EAAEI,WAAW,CAACI,SAAS,CAAC,CAAC;EAElCd,SAAS,CAAC,MAAM;IACd,IAAIW,UAAU,EAAE;MACdC,YAAY,EAAE,CAACG,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAE,kCAAiCF,GAAG,CAACG,KAAM,EAAC,CAAC,CAAC;MAC3F,IAAIC,eAAe,GAAGC,WAAW,CAACT,YAAY,EAAER,MAAM,CAACgB,eAAe,CAAC;MACvE,OAAO,MAAME,aAAa,CAACF,eAAe,CAAC;IAC7C;EACF,CAAC,EAAE,CAACT,UAAU,EAAEL,KAAK,EAAEM,YAAY,EAAEF,WAAW,CAAC,CAAC;EAElD,OAAOH,OAAO;AAChB,CAAC;AAED,eAAeF,eAAe"},"metadata":{},"sourceType":"module"}